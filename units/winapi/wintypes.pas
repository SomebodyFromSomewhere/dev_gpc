{//////////////////////////////////////////////////////////////////////////}
{                                                                          }
{                         WINTYPES.PAS                                     }
{                                                                          }
{               WIN32 TYPE DEFINITIONS UNIT FOR GPC                        }
{                                                                          }
{ Copyright (C) 1998-2007 Free Software Foundation, Inc.                   }
{                                                                          }
{ Author: Prof. Abimbola Olowofoyeku <chiefsoft at bigfoot dot com>        }
{                                                                          }
{    This library is released as part of the GNU Pascal project.           }
{                                                                          }
{ This library is free software; you can redistribute it and/or            }
{ modify it under the terms of the GNU Lesser General Public               }
{ License as published by the Free Software Foundation; either             }
{ version 2.1 of the License, or (at your option) any later version.       }
{                                                                          }
{ This library is distributed in the hope that it will be useful,          }
{ but WITHOUT ANY WARRANTY; without even the implied warranty of           }
{ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU        }
{ Lesser General Public License for more details.                          }
{                                                                          }
{ You should have received a copy of the GNU Lesser General Public         }
{ License along with this library; if not, write to the Free Software      }
{ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA }
{                                                                          }
{    As a special exception, if you link this file with files compiled     }
{    with a GNU compiler to produce an executable, this does not cause     }
{    the resulting executable to be covered by the GNU Library General     }
{    Public License. This exception does not however invalidate any other  }
{    reasons why the executable file might be covered by the GNU Library   }
{    General Public License.                                               }
{                                                                          }
{  v1.01, Dec.  2002 - Prof. Abimbola Olowofoyeku (The African Chief)      }
{                      http://www.bigfoot.com/~African_Chief/              }
{  v1.02, April 2003 - Prof. Abimbola Olowofoyeku (The African Chief)      }
{  v1.03, May   2003 - Prof. Abimbola Olowofoyeku (The African Chief)      }
{  v1.04, Feb   2007 - Prof. Abimbola Olowofoyeku (The African Chief)      }
{                                                                          }
{                                                                          }
{//////////////////////////////////////////////////////////////////////////}
{$R-}

{$ifndef WINTYPES_PAS}
{$ifdef WINDOWS_UNIT}
   {$undef IS_UNIT}
   {$define WINTYPES_PAS}
{$else}
{$ifndef Windows_Inc} // * * * *
{$define IS_UNIT}
UNIT WINTYPES;

INTERFACE

USES messages;
{$endif}
{$endif Windows_Inc} // * * * * * *

{$W-}

{/// base.pas ///}
{-Base definitions }

{-Copyright (C) 1996 Free Software Foundation, Inc. }

{-Author: Scott Christley <scottc@net-community.com> }

{- Base.Pas }
{-Translated to GNU Pascal: Prof. Abimbola Olowofoyeku <African_Chief@bigfoot.com> }

{-This file is part of the Windows32 API Library. }

{-This library is free software; you can redistribute it and/or }
{-modify it under the terms of the GNU Library General Public }
{-License as published by the Free Software Foundation; either }
{-version 2 of the License, or (at your option) any later version. }

{-This library is distributed in the hope that it will be useful, }
{-but WITHOUT ANY WARRANTY; without even the implied warranty of }
{-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU }
{-Library General Public License for more details. }

{-If you are interested in a warranty or support for this source code, }
{-contact Scott Christley <scottc@net-community.com> for more information. }

{-You should have received a copy of the GNU Library General Public }
{-License along with this library; see the file COPYING.LIB. }
{-If not, write to the Free Software Foundation, }
{-59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. }
{= }

{$define i386}
{.$define __i386__}

{+// }
{-Base.h }
TYPE

{$ifdef __GPC__}
     Longint     = Integer;
     Pint        = ^Integer;
     SmallInt    = Integer  attribute ( size = 16 );
     Word        = Cardinal attribute ( size = 16 );
     SmallWord   = Cardinal attribute ( size = 16 );
     LongWord    = Cardinal attribute ( size = 64 );
     LongLong    = Integer  attribute ( size = 64 );
     Word32      = Cardinal attribute ( size = 32 );
     DWord       = Word32;
     THandle     = Word32;
{$else}
     DWord       = Longint;
     THandle     = Longint;
{$endif}

     PVOID       = Pointer;
     AnsiChar    = Char;
     pAnsiChar   = ^AnsiChar;
     WideChar    = {ARRAY [0..1] OF }pChar; {!!! hmmm .... !!!}
     pWideChar   = WideChar;
     PInteger    = ^Integer;
     PSmallInt   = ^SmallInt;
     PShortWord  = ^Word;
     PSC_HANDLE  = ^THandle;
     PLongInt    = ^Longint;
     pByte       = ^Byte;
     ppChar      = ^pChar;
     pSingle     = ^Single;
     pPointer    = ^Pointer;
     pva_list    = pChar;
     va_list     = pChar;


{$ifdef __GPC__}
TYPE UINT   = Word32;
TYPE ULONG  = Word32;
{$else}
TYPE UINT   = Longint;
TYPE ULONG  = Longint;
{$endif}

TYPE USHORT = Word;
TYPE WCHAR  = WideChar;

TYPE TFarProc = {Function (...) :} Pointer;
TYPE ACMDRIVERENUMCB = TFarProc;
TYPE ACMDRIVERPROC = TFarProc;
TYPE ACMFILERCHOOSEHOOKPROC = TFarProc;
TYPE ACMFILTERENUMCB = TFarProc;
TYPE ACMFILTERTAGENUMCB = TFarProc;
TYPE ACMFORMATCHOOSEHOOKPROC = TFarProc;
TYPE ACMFORMATENUMCB = TFarProc;
TYPE ACMFORMATTAGENUMCB = TFarProc;
TYPE APPLET_PROC = TFarProc;

TYPE TAtom = SmallInt;
TYPE WINBOOL = Boolean attribute ( size = 32 );
     Bool = WinBool;
     pBool = ^Bool;

HINST = THandle;

TYPE CALTYPE = THandle;
TYPE CALID = THandle;
TYPE TColorRef = THandle{Longint};

TYPE DWORDLONG = LongWord{Double}; {= was unsigned long }
TYPE PDWORDLONG = ^DWORDLONG;

TYPE EDITWORDBREAKPROC = TFarProc;
TYPE ENHMFENUMPROC = TFarProc;
TYPE FLOAT = Single;
TYPE TGLOBALHANDLE = THandle;
TYPE HACCEL = THandle;
TYPE HBITMAP = THandle;
TYPE HBRUSH = THandle;
TYPE HCOLORSPACE = THandle;
TYPE HCONV = THandle;
TYPE HCONVLIST = THandle;
TYPE HCURSOR = THandle;
TYPE HDBC = THandle;
TYPE HDC = THandle;
TYPE THDC = HDC;
TYPE HDDEDATA = THandle;
TYPE HDESK = THandle;
TYPE HDROP = THandle;
TYPE HDWP = THandle;
TYPE HENHMETAFILE = THandle;
TYPE HENV = THandle;
TYPE HFILE = Integer;
TYPE HFONT = THandle;
TYPE HGDIOBJ = THandle;
TYPE HGLOBAL = THandle;
TYPE HGLRC = THandle;
TYPE HHOOK = THandle;
TYPE HICON = THandle;
TYPE HIMAGELIST = THandle;
TYPE HKEY = THandle;
TYPE PHKEY = ^HKEY;
TYPE HKL = THandle;
     PHKL = ^HKL;
TYPE HLOCAL = THandle;
TYPE HMENU = THandle;
TYPE HMETAFILE = THandle;
TYPE HMODULE = THandle;
TYPE HPALETTE = THandle;
TYPE HPEN = THandle;
TYPE HRASCONN = THandle;
TYPE HRESULT = integer;
TYPE HRGN = THandle;
TYPE HRSRC = THandle;
TYPE HSTMT = THandle;
TYPE HSZ = THandle;
TYPE HWINSTA = THandle;
TYPE HWND = THandle;
     PHWND = ^HWND;
TYPE LANGID = SmallInt;
TYPE LCID = DWord;
TYPE LGID = Word;
TYPE LCTYPE = DWord;
TYPE TLOCALHANDLE = THandle;

{$ifdef __GPC__}
TYPE LPARAM32  = Longint; // ( 32 );
TYPE WPARAM32  = Word32; // ( 32 );
{$else}
TYPE LPARAM32  = Longint;
TYPE WPARAM32  = Longint;
{$endif}

TYPE LPBYTE = ^BYTE;
TYPE LPCCH = PCHAR;
TYPE LPCH = PChar;
TYPE LPCOLORREF = ^TColorRef;
TYPE PCOLORREF = ^TColorRef;
TYPE LPCSTR = PCHAR;

{$IFDEF UNICODE}
TYPE LPCTSTR = pWideChar;
{$ELSE}
TYPE LPCTSTR = PCHAR;
{$ENDIF /* UNICODE */}

TYPE LPCWCH  = pWideChar;
TYPE LPCWSTR = pWideChar;
TYPE LPDWORD = ^DWord;
TYPE LPHANDLE = ^THandle;
TYPE LPSTR = PChar;

{$IFDEF UNICODE}
TYPE LPTCH = PWideChar;
TYPE LPTSTR = PWideChar;
{$ELSE}
TYPE LPTCH = PChar;
TYPE LPTSTR = PChar;
{$ENDIF /* UNICODE */}

TYPE LRESULT = DWord;
TYPE LPWCH = PWideChar;
TYPE LPWORD = PShortWord;
TYPE LPWSTR = PWideChar;
TYPE NPSTR = PChar;
TYPE NWPSTR = PWideChar;
TYPE PWINBOOL = ^WINBOOL;
TYPE PBOOLEAN = ^BOOLEAN;
TYPE PCCH = CHAR;
TYPE PCH = PChar;
TYPE PCSTR = CHAR;
TYPE PCWCH = pChar;
TYPE PCWSTR = PChar;
TYPE PDWORD = ^DWord;
TYPE PFLOAT = ^Float;
TYPE PHANDLE = ^THandle;
{
Type SID = THandle;
Type PSID = ^SID;
}
TYPE PSTR = PChar;
TYPE PSZ = PChar;

{$IFDEF UNICODE}
TYPE PTBYTE = PShortWord;
TYPE PTCH   = pWideChar;
TYPE PTCHAR = pWideChar;
TYPE PTSTR  = pWideChar;
{$ELSE}
TYPE PTBYTE = ^Byte;
TYPE PTCH   = PChar;
TYPE PTCHAR = PChar;
TYPE PTSTR  = PChar;
{$ENDIF /* UNICODE */}

TYPE PUCHAR  = ^Byte;
TYPE PUINT   = ^Word;
TYPE PULONG  = ^Word;
TYPE PUSHORT = PShortWord;
TYPE PWCH    = pWideChar;
TYPE PWCHAR  = pWideChar;
TYPE PWORD   = ^Word;
TYPE PWSTR   = PWideChar;
TYPE REGSAM  = THandle;
TYPE RETCODE = SmallInt;
TYPE SC_HANDLE = THandle;
TYPE SC_LOCK = POINTER;
TYPE LPSC_HANDLE = PSC_HANDLE;
TYPE SERVICE_STATUS_HANDLE = DWord;

{$IFDEF UNICODE}
TYPE TBYTE = Word;
TYPE TCHAR = WideChar;
TYPE BCHAR = Word;
{$ELSE}
TYPE TBYTE = Byte;
TYPE TCHAR = Char;
TYPE BCHAR = BYTE;
{$ENDIF /* UNICODE */}
TYPE YIELDPROC = TFarProc;

{+// }
{-Enumerations }
{= }
TYPE _ACL_INFORMATION_CLASS = ( Dummy_0,
                               AclRevisionInformation {= 1},
                               AclSizeInformation  );
     ACL_INFORMATION_CLASS = _ACL_INFORMATION_CLASS;

TYPE _MEDIA_TYPE = ( Unknown,
                    F5_1Pt2_512,
                    F3_1Pt44_512,
                    F3_2Pt88_512,
                    F3_20Pt8_512,
                    F3_720_512,
                    F5_360_512,
                    F5_320_512,
                    F5_320_1024,
                    F5_180_512,
                    F5_160_512,
                    RemovableMedia,
                    FixedMedia  );

TYPE MEDIA_TYPE = _MEDIA_TYPE;

CONST RASCS_DONE = $2000;
CONST RASCS_PAUSED = $1000;
TYPE _RASCONNSTATE = ( RASCS_OpenPort {= 0},
                      RASCS_PortOpened,
                      RASCS_ConnectDevice,
                      RASCS_DeviceConnected,
                      RASCS_AllDevicesConnected,
                      RASCS_Authenticate,
                      RASCS_AuthNotify,
                      RASCS_AuthRetry,
                      RASCS_AuthCallback,
                      RASCS_AuthChangePassword,
                      RASCS_AuthProject,
                      RASCS_AuthLinkSpeed,
                      RASC,
                      RASCS_StartAuthentication,
                      RASCS_CallbackComplete,
                      RASCS_LogonNetwork,
                      RASCS_Interactive {= RASCS_PAUSED},
                      RASCS_RetryAuthentication,
                      RASCS_CallbackSetByCaller,
                      RASCS_PasswordExpired,
                      RASCS_Connected {= RASCS_DONE},
                      RASCS_Disconnected  );
RASCONNSTATE = _RASCONNSTATE;

TYPE _RASPROJECTION = ( RASP_Amb {= 0x10000},
                       RASP_PppNbf {= 0x803F},
                       RASP_PppIpx {= 0x802B},
                       RASP_PppIp {= 0x8021 } );

TYPE _SECURITY_IMPERSONATION_LEVEL = ( SecurityAnonymous,
                                      SecurityIdentification,
                                      SecurityImpersonation,
                                      SecurityDelegation  );
SECURITY_IMPERSONATION_LEVEL = _SECURITY_IMPERSONATION_LEVEL;

TYPE _SID_NAME_USE = ( Dummy_00,
                      SidTypeUser {= 1},
                      SidTypeGroup,
                      SidTypeDomain,
                      SidTypeAlias,
                      SidTypeWellKnownGroup,
                      SidTypeDeletedAccount,
                      SidTypeInvalid,
                      SidTypeUnknown  );
TSID_NAME_USE = _SID_NAME_USE;
pSID_NAME_USE = ^_SID_NAME_USE;

TYPE _TOKEN_INFORMATION_CLASS = ( Dummy_000,
                                 TokenUser {= 1},
                                 TokenGroups,
                                 TokenPrivileges,
                                 TokenOwner,
                                 TokenPrimaryGroup,
                                 TokenDefaultDacl,
                                 TokenSource,
                                 TokenType,
                                 TokenImpersonationLevel,
                                 TokenStatistics  );
TOKEN_INFORMATION_CLASS = _TOKEN_INFORMATION_CLASS;

TYPE tagTOKEN_TYPE = ( Dummy_0000,
                      TokenPrimary {= 1},
                      TokenImpersonation  );
TYPE TOKEN_TYPE = tagTOKEN_TYPE;

{+// }
{-Definitions for callback procedures }
TYPE
THREAD_START_ROUTINE = FUNCTION ( p : POINTER ) : DWORD;{Stdcall;}
PTHREAD_START_ROUTINE = THREAD_START_ROUTINE;
LPTHREAD_START_ROUTINE = PTHREAD_START_ROUTINE;
TTHREADSTARTROUTINE = THREAD_START_ROUTINE;
EDITSTREAMCALLBACK = FUNCTION ( dwCookie : DWORD; Data : pByte; cb : Longint; VAR pcb : longint ) : DWORD; {stdcall;}
BFFCALLBACK  = TFarProc; // FUNCTION ( Wnd : HWND; Ms : UINT; L1 : LPARAM32; L2 : LPARAM32 ) : integer;{stdcall;}
LPCCHOOKPROC = FUNCTION ( Wnd : HWND; Ms : UINT; W : UINT; L : LPARAM32 ) : UINT;{stdcall;}
LPCFHOOKPROC = FUNCTION ( Wnd : HWND; Ms : UINT; W : UINT; L : LPARAM32 ) : UINT;{stdcall;}
LPFRHOOKPROC = FUNCTION ( Wnd : HWND; Ms : UINT; W : UINT; L : LPARAM32 ) : UINT;{stdcall;}
PFRHOOKPROC = LPFRHOOKPROC;
LPOFNHOOKPROC = FUNCTION ( Wnd : HWND; Ms : UINT; W : UINT; L : LPARAM32 ) : UINT;{stdcall;}
LPPRINTHOOKPROC = FUNCTION ( Wnd : HWND; Ms : UINT; W : UINT; L : LPARAM32 ) : UINT;{stdcall;}
LPSETUPHOOKPROC = FUNCTION ( Wnd : HWND; Ms : UINT; W : UINT; L : LPARAM32 ) : UINT;{stdcall;}
LPSERVICE_MAIN_FUNCTION = PROCEDURE ( D : DWORD; p : LPTSTR );{stdcall;}
PSERVICE_MAIN_FUNCTION = LPSERVICE_MAIN_FUNCTION;
PROC = TFarProc;
DESKTOPENUMPROC = TFarProc;
GRAYSTRINGPROC = TFarProc;
WNDPROC = FUNCTION ( Wnd : HWND; U : UINT; W : WPARAM32; L : LPARAM32 ) : LRESULT;{stdcall;}
TFNWndProc  = TFarProc;
THookProc = FUNCTION ( i : INTEGER; W : UINT; L : LPARAM32 ) : LRESULT;{stdcall;}
Pcchookproc = THookProc;
PcFhookproc = THookProc;
PFNGETPROFILEPATH = FUNCTION ( P1 : LPCTSTR; P2 : LPSTR; U : UINT ) : UINT;{stdcall;}
PFNRECONCILEPROFILE = FUNCTION ( P1 : LPCTSTR; P2 : LPCTSTR; D : DWORD ) : UINT;{stdcall;}
LPPAGEPAINTHOOK = FUNCTION ( Wnd : HWND; U : UINT; W : UINT; L : LPARAM32 ) : UINT; {stdcall;}
LPPAGESETUPHOOK = FUNCTION ( Wnd : HWND; U : UINT; W : UINT; L : LPARAM32 ) : UINT;{stdcall;}
EDITWORDBREAKPROCEX = FUNCTION ( p : pCHAR; L : Longint; B : BYTE; I : INTEGER ) : Longint;{stdcall;}

  PFNLVCOMPARE = FUNCTION ( L1 : LPARAM32; L2 : LPARAM32; L3 : LPARAM32 ) : Integer;{stdcall;}
  ICMENUMPROC = FUNCTION ( P : LPTSTR; L : LPARAM32 ) : Integer;{stdcall;}
  PFNPROPSHEET = FUNCTION ( Wnd : HWND; Ms : UINT; L : LPARAM32 ) : Integer;{stdcall;}
  PFNTVCOMPARE = FUNCTION ( L1 : LPARAM32; L2 : LPARAM32; L3 : LPARAM32 ) : Integer;{stdcall;}

  SENDASYNCPROC = PROCEDURE ( Wnd : HWND; U : UINT; D : DWORD; L : LRESULT );{stdcall;}
  TIMERPROC = PROCEDURE ( Wnd : HWND; U : UINT; U2 : UINT; D : DWORD );{stdcall;}
  ENUMOBJECTSPROC = PROCEDURE ( P : POINTER; L : LPARAM32 );{stdcall;}
  LINEDDAPROC = PROCEDURE ( I : Integer; I2 : Integer; L : LPARAM32 );{stdcall;}

  LOCALE_ENUMPROC = FUNCTION ( P : LPTSTR ) : WinBool;{stdcall;}
  CODEPAGE_ENUMPROC = FUNCTION ( P : LPTSTR ) : WinBool;{stdcall;}
  DATEFMT_ENUMPROC = FUNCTION ( P : LPTSTR ) : WinBool;{stdcall;}
  TIMEFMT_ENUMPROC = FUNCTION ( P : LPTSTR ) : WinBool;{stdcall;}
  CALINFO_ENUMPROC = FUNCTION ( P : LPTSTR ) : WinBool;{stdcall;}
  PHANDLER_ROUTINE = FUNCTION ( D : DWORD ) : WinBool; {stdcall;}
  DlgProc = TFarProc;
  // DlgProc = FUNCTION ( Window : HWnd; Message : UINT; WParam : WParam32 : LParam : LParam32 ) : Integer;

  (*
  DLGPROC = FUNCTION ( Wnd : HWND; Msg : UINT; WPara : WPARAM32; LPara : LPARAM32 ) : WinBool;{stdcall;}
  *)
  TABORTPROC = FUNCTION ( H : HDC; I : INTEGER ) : WinBool;{stdcall;}
  LPHANDLER_FUNCTION = FUNCTION ( D : DWORD ) : WinBool;{stdcall;}
  PHANDLER_FUNCTION = LPHANDLER_FUNCTION ;
  ENUMWINDOWSTATIONPROC = FUNCTION ( P : LPTSTR; L : LPARAM32 ) : WinBool;{stdcall;}
  ENUMRESTYPEPROC = FUNCTION ( T : THANDLE; P : LPTSTR; L : Longint ) : WinBool;{stdcall;}
  ENUMRESNAMEPROC = FUNCTION ( T : THANDLE; P : LPCTSTR; P2 : LPTSTR; L : Longint ) : WinBool;{stdcall;}
  ENUMRESLANGPROC = FUNCTION ( T : THANDLE; P : LPCTSTR; P2 : LPCTSTR; W : WORD; L : Longint ) : WinBool;{stdcall;}
  ENUMWINDOWSPROC = FUNCTION ( Wnd : HWND; L : LPARAM32 ) : WinBool;{stdcall;}
  DRAWSTATEPROC = FUNCTION ( H : HDC; L : LPARAM32; W : UINT; I, I2 : INTEGER ) : WinBool;{stdcall;}
  PROPENUMPROCEX = FUNCTION ( Wnd : HWND; P : LPCTSTR; T : THANDLE; D : DWORD ) : WinBool; {stdcall;}
  PROPENUMPROC = FUNCTION ( Wnd : HWND; P : LPCTSTR; T : THANDLE ) : WinBool;{stdcall;}
  PFNPROCESSPOLICIES = FUNCTION ( Wnd : HWND; P : LPCTSTR; P2 : LPCTSTR; P3 : LPCTSTR; D : DWORD ) : WinBool;{stdcall;}
{}

CONST
TME_HOVER = $00000001;
TME_LEAVE = $00000002;
TME_QUERY = $40000000;
TME_CANCEL = $80000000;
HOVER_DEFAULT = $FFFFFFFF;

CONST SECURITY_NULL_SID_AUTHORITY = '{0,0,0,0,0,0}';
CONST SECURITY_WORLD_SID_AUTHORITY = '{0,0,0,0,0,1}';
CONST SECURITY_LOCAL_SID_AUTHORITY = '{0,0,0,0,0,2}';
CONST SECURITY_CREATOR_SID_AUTHORITY = '{0,0,0,0,0,3}';
CONST SECURITY_NON_UNIQUE_AUTHORITY = '{0,0,0,0,0,4}';
CONST SECURITY_NT_AUTHORITY = '{0,0,0,0,0,5}';


CONST SE_CREATE_TOKEN_NAME = ( 'SeCreateTokenPrivilege' );
CONST SE_ASSIGNPRIMARYTOKEN_NAME = ( 'SeAssignPrimaryTokenPrivilege' );
CONST SE_LOCK_MEMORY_NAME = ( 'SeLockMemoryPrivilege' );
CONST SE_INCREASE_QUOTA_NAME = ( 'SeIncreaseQuotaPrivilege' );
CONST SE_UNSOLICITED_INPUT_NAME = ( 'SeUnsolicitedInputPrivilege' );
CONST SE_MACHINE_ACCOUNT_NAME = ( 'SeMachineAccountPrivilege' );
CONST SE_TCB_NAME = ( 'SeTcbPrivilege' );
CONST SE_SECURITY_NAME = ( 'SeSecurityPrivilege' );
CONST SE_TAKE_OWNERSHIP_NAME = ( 'SeTakeOwnershipPrivilege' );
CONST SE_LOAD_DRIVER_NAME = ( 'SeLoadDriverPrivilege' );
CONST SE_SYSTEM_PROFILE_NAME = ( 'SeSystemProfilePrivilege' );
CONST SE_SYSTEMTIME_NAME = ( 'SeSystemtimePrivilege' );
CONST SE_PROF_SINGLE_PROCESS_NAME = ( 'SeProfileSingleProcessPrivilege' );
CONST SE_INC_BASE_PRIORITY_NAME = ( 'SeIncreaseBasePriorityPrivilege' );
CONST SE_CREATE_PAGEFILE_NAME = ( 'SeCreatePagefilePrivilege' );
CONST SE_CREATE_PERMANENT_NAME = ( 'SeCreatePermanentPrivilege' );
CONST SE_BACKUP_NAME = ( 'SeBackupPrivilege' );
CONST SE_RESTORE_NAME = ( 'SeRestorePrivilege' );
CONST SE_SHUTDOWN_NAME = ( 'SeShutdownPrivilege' );
CONST SE_DEBUG_NAME = ( 'SeDebugPrivilege' );
CONST SE_AUDIT_NAME = ( 'SeAuditPrivilege' );
CONST SE_SYSTEM_ENVIRONMENT_NAME = ( 'SeSystemEnvironmentPrivilege' );
CONST SE_CHANGE_NOTIFY_NAME = ( 'SeChangeNotifyPrivilege' );
CONST SE_REMOTE_SHUTDOWN_NAME = ( 'SeRemoteShutdownPrivilege' );

CONST SERVICES_ACTIVE_DATABASEW = 'ServicesActive';
CONST SERVICES_FAILED_DATABASEW = 'ServicesFailed';
CONST SERVICES_ACTIVE_DATABASEA = 'ServicesActive';
CONST SERVICES_FAILED_DATABASEA = 'ServicesFailed';
CONST SC_GROUP_IDENTIFIERW = '+';
CONST SC_GROUP_IDENTIFIERA = '+';

{$IFDEF UNICODE}
CONST SERVICES_ACTIVE_DATABASE = SERVICES_ACTIVE_DATABASEW;
CONST SERVICES_FAILED_DATABASE = SERVICES_FAILED_DATABASEW;
CONST SC_GROUP_IDENTIFIER = SC_GROUP_IDENTIFIERW;
{$ELSE}
CONST SERVICES_ACTIVE_DATABASE = SERVICES_ACTIVE_DATABASEA;
CONST SERVICES_FAILED_DATABASE = SERVICES_FAILED_DATABASEA;
CONST SC_GROUP_IDENTIFIER = SC_GROUP_IDENTIFIERA;
{$ENDIF /* UNICODE */}

{+// ---------------------------------- */ }
{+// From ddeml.h in old Cygnus headers */ }

TYPE  CALLB = PROCEDURE ( X : Pointer );
TYPE PFNCALLBACK = CALLB;

TYPE SECURITY_CONTEXT_TRACKING_MODE = WINBOOL;

{+// End of stuff from ddeml.h in old Cygnus headers */ }
{+// ----------------------------------------------- */ }

TYPE WNDENUMPROC = TFarProc;
TYPE CCSTYLE = DWord;
TYPE LPCCSTYLE = ^DWord;
     PCCSTYLE = LPCCSTYLE;
TYPE CCSTYLEFLAGA = DWord;
     LPCCSTYLEFLAGA = ^DWord;
     PCCSTYLEFLAGA = ^DWord;


{ /// errors.pas ///}
{+// }
{-Errors.h }

{-Windows32 API error codes }

{-Copyright (C) 1996 Free Software Foundation, Inc. }

{-Author: Scott Christley <scottc@net-community.com> }

{- Errors.Pas }
{-Translated to GNU Pascal: Prof. Abimbola Olowofoyeku <African_Chief@bigfoot.com> }

{-This file is part of the Windows32 API Library. }

{-This library is free software; you can redistribute it and/or }
{-modify it under the terms of the GNU Library General Public }
{-License as published by the Free Software Foundation; either }
{-version 2 of the License, or (at your option) any later version. }

{-This library is distributed in the hope that it will be useful, }
{-but WITHOUT ANY WARRANTY; without even the implied warranty of }
{-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU }
{-Library General Public License for more details. }

{-If you are interested in a warranty or support for this source code, }
{-contact Scott Christley <scottc@net-community.com> for more information. }

{-You should have received a copy of the GNU Library General Public }
{-License along with this library; see the file COPYING.LIB. }
{-If not, write to the Free Software Foundation, }
{-59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. }
{= }

{+// Numerical order */ }

CONST LZERROR_UNKNOWNALG = (  - 8 );
CONST LZERROR_BADVALUE = (  - 7 );
CONST LZERROR_GLOBLOCK = (  - 6 );
CONST LZERROR_GLOBALLOC = (  - 5 );
CONST LZERROR_WRITE = (  - 4 );
CONST LZERROR_READ = (  - 3 );
CONST LZERROR_BADOUTHANDLE = (  - 2 );
CONST LZERROR_BADINHANDLE = (  - 1 );
CONST NO_ERROR = 0;
CONST ERROR_SUCCESS = 0;
CONST ERROR_INVALID_FUNCTION = 1;
CONST ERROR_FILE_NOT_FOUND = 2;
CONST ERROR_PATH_NOT_FOUND = 3;
CONST ERROR_TOO_MANY_OPEN_FILES = 4;
CONST ERROR_ACCESS_DENIED = 5;
CONST ERROR_INVALID_HANDLE = 6;
CONST ERROR_ARENA_TRASHED = 7;
CONST ERROR_NOT_ENOUGH_MEMORY = 8;
CONST ERROR_INVALID_BLOCK = 9;
CONST ERROR_BAD_ENVIRONMENT = 10;
CONST ERROR_BAD_FORMAT = 11;
CONST ERROR_INVALID_ACCESS = 12;
CONST ERROR_INVALID_DATA = 13;
CONST ERROR_OUTOFMEMORY = 14;
CONST ERROR_INVALID_DRIVE = 15;
CONST ERROR_CURRENT_DIRECTORY = 16;
CONST ERROR_NOT_SAME_DEVICE = 17;
CONST ERROR_NO_MORE_FILES = 18;
CONST ERROR_WRITE_PROTECT = 19;
CONST ERROR_BAD_UNIT = 20;
CONST ERROR_NOT_READY = 21;
CONST ERROR_BAD_COMMAND = 22;
CONST ERROR_CRC = 23;
CONST ERROR_BAD_LENGTH = 24;
CONST ERROR_SEEK = 25;
CONST ERROR_NOT_DOS_DISK = 26;
CONST ERROR_SECTOR_NOT_FOUND = 27;
CONST ERROR_OUT_OF_PAPER = 28;
CONST ERROR_WRITE_FAULT = 29;
CONST ERROR_READ_FAULT = 30;
CONST ERROR_GEN_FAILURE = 31;
CONST ERROR_SHARING_VIOLATION = 32;
CONST ERROR_LOCK_VIOLATION = 33;
CONST ERROR_WRONG_DISK = 34;
CONST ERROR_SHARING_BUFFER_EXCEEDED = 36;
CONST ERROR_HANDLE_EOF = 38;
CONST ERROR_HANDLE_DISK_FULL = 39;
CONST ERROR_NOT_SUPPORTED = 50;
CONST ERROR_REM_NOT_LIST = 51;
CONST ERROR_DUP_NAME = 52;
CONST ERROR_BAD_NETPATH = 53;
CONST ERROR_NETWORK_BUSY = 54;
CONST ERROR_DEV_NOT_EXIST = 55;
CONST ERROR_TOO_MANY_CMDS = 56;
CONST ERROR_ADAP_HDW_ERR = 57;
CONST ERROR_BAD_NET_RESP = 58;
CONST ERROR_UNEXP_NET_ERR = 59;
CONST ERROR_BAD_REM_ADAP = 60;
CONST ERROR_PRINTQ_FULL = 61;
CONST ERROR_NO_SPOOL_SPACE = 62;
CONST ERROR_PRINT_CANCELLED = 63;
CONST ERROR_NETNAME_DELETED = 64;
CONST ERROR_NETWORK_ACCESS_DENIED = 65;
CONST ERROR_BAD_DEV_TYPE = 66;
CONST ERROR_BAD_NET_NAME = 67;
CONST ERROR_TOO_MANY_NAMES = 68;
CONST ERROR_TOO_MANY_SESS = 69;
CONST ERROR_SHARING_PAUSED = 70;
CONST ERROR_REQ_NOT_ACCEP = 71;
CONST ERROR_REDIR_PAUSED = 72;
CONST ERROR_FILE_EXISTS = 80;
CONST ERROR_CANNOT_MAKE = 82;
CONST ERROR_FAIL_I24 = 83;
CONST ERROR_OUT_OF_STRUCTURES = 84;
CONST ERROR_ALREADY_ASSIGNED = 85;
CONST ERROR_INVALID_PASSWORD = 86;
CONST ERROR_INVALID_PARAMETER = 87;
CONST ERROR_NET_WRITE_FAULT = 88;
CONST ERROR_NO_PROC_SLOTS = 89;
CONST ERROR_TOO_MANY_SEMAPHORES = 100;
CONST ERROR_EXCL_SEM_ALREADY_OWNED = 101;
CONST ERROR_SEM_IS_SET = 102;
CONST ERROR_TOO_MANY_SEM_REQUESTS = 103;
CONST ERROR_INVALID_AT_INTERRUPT_TIME = 104;
CONST ERROR_SEM_OWNER_DIED = 105;
CONST ERROR_SEM_USER_LIMIT = 106;
CONST ERROR_DISK_CHANGE = 107;
CONST ERROR_DRIVE_LOCKED = 108;
CONST ERROR_BROKEN_PIPE = 109;
CONST ERROR_OPEN_FAILED = 110;
CONST ERROR_BUFFER_OVERFLOW = 111;
CONST ERROR_DISK_FULL = 112;
CONST ERROR_NO_MORE_SEARCH_HANDLES = 113;
CONST ERROR_INVALID_TARGET_HANDLE = 114;
CONST ERROR_INVALID_CATEGORY = 117;
CONST ERROR_INVALID_VERIFY_SWITCH = 118;
CONST ERROR_BAD_DRIVER_LEVEL = 119;
CONST ERROR_CALL_NOT_IMPLEMENTED = 120;
CONST ERROR_SEM_TIMEOUT = 121;
CONST ERROR_INSUFFICIENT_BUFFER = 122;
CONST ERROR_INVALID_NAME = 123;
CONST ERROR_INVALID_LEVEL = 124;
CONST ERROR_NO_VOLUME_LABEL = 125;
CONST ERROR_MOD_NOT_FOUND = 126;
CONST ERROR_PROC_NOT_FOUND = 127;
CONST ERROR_WAIT_NO_CHILDREN = 128;
CONST ERROR_CHILD_NOT_COMPLETE = 129;
CONST ERROR_DIRECT_ACCESS_HANDLE = 130;
CONST ERROR_NEGATIVE_SEEK = 131;
CONST ERROR_SEEK_ON_DEVICE = 132;
CONST ERROR_IS_JOIN_TARGET = 133;
CONST ERROR_IS_JOINED = 134;
CONST ERROR_IS_SUBSTED = 135;
CONST ERROR_NOT_JOINED = 136;
CONST ERROR_NOT_SUBSTED = 137;
CONST ERROR_JOIN_TO_JOIN = 138;
CONST ERROR_SUBST_TO_SUBST = 139;
CONST ERROR_JOIN_TO_SUBST = 140;
CONST ERROR_SUBST_TO_JOIN = 141;
CONST ERROR_BUSY_DRIVE = 142;
CONST ERROR_SAME_DRIVE = 143;
CONST ERROR_DIR_NOT_ROOT = 144;
CONST ERROR_DIR_NOT_EMPTY = 145;
CONST ERROR_IS_SUBST_PATH = 146;
CONST ERROR_IS_JOIN_PATH = 147;
CONST ERROR_PATH_BUSY = 148;
CONST ERROR_IS_SUBST_TARGET = 149;
CONST ERROR_SYSTEM_TRACE = 150;
CONST ERROR_INVALID_EVENT_COUNT = 151;
CONST ERROR_TOO_MANY_MUXWAITERS = 152;
CONST ERROR_INVALID_LIST_FORMAT = 153;
CONST ERROR_LABEL_TOO_LONG = 154;
CONST ERROR_TOO_MANY_TCBS = 155;
CONST ERROR_SIGNAL_REFUSED = 156;
CONST ERROR_DISCARDED = 157;
CONST ERROR_NOT_LOCKED = 158;
CONST ERROR_BAD_THREADID_ADDR = 159;
CONST ERROR_BAD_ARGUMENTS = 160;
CONST ERROR_BAD_PATHNAME = 161;
CONST ERROR_SIGNAL_PENDING = 162;
CONST ERROR_MAX_THRDS_REACHED = 164;
CONST ERROR_LOCK_FAILED = 167;
CONST ERROR_BUSY = 170;
CONST ERROR_CANCEL_VIOLATION = 173;
CONST ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174;
CONST ERROR_INVALID_SEGMENT_NUMBER = 180;
CONST ERROR_INVALID_ORDINAL = 182;
CONST ERROR_ALREADY_EXISTS = 183;
CONST ERROR_INVALID_FLAG_NUMBER = 186;
CONST ERROR_SEM_NOT_FOUND = 187;
CONST ERROR_INVALID_STARTING_CODESEG = 188;
CONST ERROR_INVALID_STACKSEG = 189;
CONST ERROR_INVALID_MODULETYPE = 190;
CONST ERROR_INVALID_EXE_SIGNATURE = 191;
CONST ERROR_EXE_MARKED_INVALID = 192;
CONST ERROR_BAD_EXE_FORMAT = 193;
CONST ERROR_ITERATED_DATA_EXCEEDS_64k = 194;
CONST ERROR_INVALID_MINALLOCSIZE = 195;
CONST ERROR_DYNLINK_FROM_INVALID_RING = 196;
CONST ERROR_IOPL_NOT_ENABLED = 197;
CONST ERROR_INVALID_SEGDPL = 198;
CONST ERROR_AUTODATASEG_EXCEEDS_64k = 199;
CONST ERROR_RING2SEG_MUST_BE_MOVABLE = 200;
CONST ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201;
CONST ERROR_INFLOOP_IN_RELOC_CHAIN = 202;
CONST ERROR_ENVVAR_NOT_FOUND = 203;
CONST ERROR_NO_SIGNAL_SENT = 205;
CONST ERROR_FILENAME_EXCED_RANGE = 206;
CONST ERROR_RING2_STACK_IN_USE = 207;
CONST ERROR_META_EXPANSION_TOO_LONG = 208;
CONST ERROR_INVALID_SIGNAL_NUMBER = 209;
CONST ERROR_THREAD_1_INACTIVE = 210;
CONST ERROR_LOCKED = 212;
CONST ERROR_TOO_MANY_MODULES = 214;
CONST ERROR_NESTING_NOT_ALLOWED = 215;
CONST ERROR_BAD_PIPE = 230;
CONST ERROR_PIPE_BUSY = 231;
CONST ERROR_NO_DATA = 232;
CONST ERROR_PIPE_NOT_CONNECTED = 233;
CONST ERROR_MORE_DATA = 234;
CONST ERROR_VC_DISCONNECTED = 240;
CONST ERROR_INVALID_EA_NAME = 254;
CONST ERROR_EA_LIST_INCONSISTENT = 255;
CONST ERROR_NO_MORE_ITEMS = 259;
CONST ERROR_CANNOT_COPY = 266;
CONST ERROR_DIRECTORY = 267;
CONST ERROR_EAS_DIDNT_FIT = 275;
CONST ERROR_EA_FILE_CORRUPT = 276;
CONST ERROR_EA_TABLE_FULL = 277;
CONST ERROR_INVALID_EA_HANDLE = 278;
CONST ERROR_EAS_NOT_SUPPORTED = 282;
CONST ERROR_NOT_OWNER = 288;
CONST ERROR_TOO_MANY_POSTS = 298;
CONST ERROR_PARTIAL_COPY = 299;
CONST ERROR_MR_MID_NOT_FOUND = 317;
CONST ERROR_INVALID_ADDRESS = 487;
CONST ERROR_ARITHMETIC_OVERFLOW = 534;
CONST ERROR_PIPE_CONNECTED = 535;
CONST ERROR_PIPE_LISTENING = 536;
CONST ERROR_EA_ACCESS_DENIED = 994;
CONST ERROR_OPERATION_ABORTED = 995;
CONST ERROR_IO_INCOMPLETE = 996;
CONST ERROR_IO_PENDING = 997;
CONST ERROR_NOACCESS = 998;
CONST ERROR_SWAPERROR = 999;
CONST ERROR_STACK_OVERFLOW = 1001;
CONST ERROR_INVALID_MESSAGE = 1002;
CONST ERROR_CAN_NOT_COMPLETE = 1003;
CONST ERROR_INVALID_FLAGS = 1004;
CONST ERROR_UNRECOGNIZED_VOLUME = 1005;
CONST ERROR_FILE_INVALID = 1006;
CONST ERROR_FULLSCREEN_MODE = 1007;
CONST ERROR_NO_TOKEN = 1008;
CONST ERROR_BADDB = 1009;
CONST ERROR_BADKEY = 1010;
CONST ERROR_CANTOPEN = 1011;
CONST ERROR_CANTREAD = 1012;
CONST ERROR_CANTWRITE = 1013;
CONST ERROR_REGISTRY_RECOVERED = 1014;
CONST ERROR_REGISTRY_CORRUPT = 1015;
CONST ERROR_REGISTRY_IO_FAILED = 1016;
CONST ERROR_NOT_REGISTRY_FILE = 1017;
CONST ERROR_KEY_DELETED = 1018;
CONST ERROR_NO_LOG_SPACE = 1019;
CONST ERROR_KEY_HAS_CHILDREN = 1020;
CONST ERROR_CHILD_MUST_BE_VOLATILE = 1021;
CONST ERROR_NOTIFY_ENUM_DIR = 1022;
CONST ERROR_DEPENDENT_SERVICES_RUNNING = 1051;
CONST ERROR_INVALID_SERVICE_CONTROL = 1052;
CONST ERROR_SERVICE_REQUEST_TIMEOUT = 1053;
CONST ERROR_SERVICE_NO_THREAD = 1054;
CONST ERROR_SERVICE_DATABASE_LOCKED = 1055;
CONST ERROR_SERVICE_ALREADY_RUNNING = 1056;
CONST ERROR_INVALID_SERVICE_ACCOUNT = 1057;
CONST ERROR_SERVICE_DISABLED = 1058;
CONST ERROR_CIRCULAR_DEPENDENCY = 1059;
CONST ERROR_SERVICE_DOES_NOT_EXIST = 1060;
CONST ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061;
CONST ERROR_SERVICE_NOT_ACTIVE = 1062;
CONST ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063;
CONST ERROR_EXCEPTION_IN_SERVICE = 1064;
CONST ERROR_DATABASE_DOES_NOT_EXIST = 1065;
CONST ERROR_SERVICE_SPECIFIC_ERROR = 1066;
CONST ERROR_PROCESS_ABORTED = 1067;
CONST ERROR_SERVICE_DEPENDENCY_FAIL = 1068;
CONST ERROR_SERVICE_LOGON_FAILED = 1069;
CONST ERROR_SERVICE_START_HANG = 1070;
CONST ERROR_INVALID_SERVICE_LOCK = 1071;
CONST ERROR_SERVICE_MARKED_FOR_DELETE = 1072;
CONST ERROR_SERVICE_EXISTS = 1073;
CONST ERROR_ALREADY_RUNNING_LKG = 1074;
CONST ERROR_SERVICE_DEPENDENCY_DELETED = 1075;
CONST ERROR_BOOT_ALREADY_ACCEPTED = 1076;
CONST ERROR_SERVICE_NEVER_STARTED = 1077;
CONST ERROR_DUPLICATE_SERVICE_NAME = 1078;
CONST ERROR_END_OF_MEDIA = 1100;
CONST ERROR_FILEMARK_DETECTED = 1101;
CONST ERROR_BEGINNING_OF_MEDIA = 1102;
CONST ERROR_SETMARK_DETECTED = 1103;
CONST ERROR_NO_DATA_DETECTED = 1104;
CONST ERROR_PARTITION_FAILURE = 1105;
CONST ERROR_INVALID_BLOCK_LENGTH = 1106;
CONST ERROR_DEVICE_NOT_PARTITIONED = 1107;
CONST ERROR_UNABLE_TO_LOCK_MEDIA = 1108;
CONST ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109;
CONST ERROR_MEDIA_CHANGED = 1110;
CONST ERROR_BUS_RESET = 1111;
CONST ERROR_NO_MEDIA_IN_DRIVE = 1112;
CONST ERROR_NO_UNICODE_TRANSLATION = 1113;
CONST ERROR_DLL_INIT_FAILED = 1114;
CONST ERROR_SHUTDOWN_IN_PROGRESS = 1115;
CONST ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116;
CONST ERROR_IO_DEVICE = 1117;
CONST ERROR_SERIAL_NO_DEVICE = 1118;
CONST ERROR_IRQ_BUSY = 1119;
CONST ERROR_MORE_WRITES = 1120;
CONST ERROR_COUNTER_TIMEOUT = 1121;
CONST ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122;
CONST ERROR_FLOPPY_WRONG_CYLINDER = 1123;
CONST ERROR_FLOPPY_UNKNOWN_ERROR = 1124;
CONST ERROR_FLOPPY_BAD_REGISTERS = 1125;
CONST ERROR_DISK_RECALIBRATE_FAILED = 1126;
CONST ERROR_DISK_OPERATION_FAILED = 1127;
CONST ERROR_DISK_RESET_FAILED = 1128;
CONST ERROR_EOM_OVERFLOW = 1129;
CONST ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130;
CONST ERROR_POSSIBLE_DEADLOCK = 1131;
CONST ERROR_MAPPED_ALIGNMENT = 1132;
CONST ERROR_SET_POWER_STATE_VETOED = 1140;
CONST ERROR_SET_POWER_STATE_FAILED = 1141;
CONST ERROR_OLD_WIN_VERSION = 1150;
CONST ERROR_APP_WRONG_OS = 1151;
CONST ERROR_SINGLE_INSTANCE_APP = 1152;
CONST ERROR_RMODE_APP = 1153;
CONST ERROR_INVALID_DLL = 1154;
CONST ERROR_NO_ASSOCIATION = 1155;
CONST ERROR_DDE_FAIL = 1156;
CONST ERROR_DLL_NOT_FOUND = 1157;
CONST ERROR_BAD_USERNAME = 2202;
CONST ERROR_NOT_CONNECTED = 2250;
CONST ERROR_OPEN_FILES = 2401;
CONST ERROR_ACTIVE_CONNECTIONS = 2402;
CONST ERROR_DEVICE_IN_USE = 2404;
CONST ERROR_BAD_DEVICE = 1200;
CONST ERROR_CONNECTION_UNAVAIL = 1201;
CONST ERROR_DEVICE_ALREADY_REMEMBERED = 1202;
CONST ERROR_NO_NET_OR_BAD_PATH = 1203;
CONST ERROR_BAD_PROVIDER = 1204;
CONST ERROR_CANNOT_OPEN_PROFILE = 1205;
CONST ERROR_BAD_PROFILE = 1206;
CONST ERROR_NOT_CONTAINER = 1207;
CONST ERROR_EXTENDED_ERROR = 1208;
CONST ERROR_INVALID_GROUPNAME = 1209;
CONST ERROR_INVALID_COMPUTERNAME = 1210;
CONST ERROR_INVALID_EVENTNAME = 1211;
CONST ERROR_INVALID_DOMAINNAME = 1212;
CONST ERROR_INVALID_SERVICENAME = 1213;
CONST ERROR_INVALID_NETNAME = 1214;
CONST ERROR_INVALID_SHARENAME = 1215;
CONST ERROR_INVALID_PASSWORDNAME = 1216;
CONST ERROR_INVALID_MESSAGENAME = 1217;
CONST ERROR_INVALID_MESSAGEDEST = 1218;
CONST ERROR_SESSION_CREDENTIAL_CONFLICT = 1219;
CONST ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220;
CONST ERROR_DUP_DOMAINNAME = 1221;
CONST ERROR_NO_NETWORK = 1222;
CONST ERROR_CANCELLED = 1223;
CONST ERROR_USER_MAPPED_FILE = 1224;
CONST ERROR_CONNECTION_REFUSED = 1225;
CONST ERROR_GRACEFUL_DISCONNECT = 1226;
CONST ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;
CONST ERROR_ADDRESS_NOT_ASSOCIATED = 1228;
CONST ERROR_CONNECTION_INVALID = 1229;
CONST ERROR_CONNECTION_ACTIVE = 1230;
CONST ERROR_NETWORK_UNREACHABLE = 1231;
CONST ERROR_HOST_UNREACHABLE = 1232;
CONST ERROR_PROTOCOL_UNREACHABLE = 1233;
CONST ERROR_PORT_UNREACHABLE = 1234;
CONST ERROR_REQUEST_ABORTED = 1235;
CONST ERROR_CONNECTION_ABORTED = 1236;
CONST ERROR_RETRY = 1237;
CONST ERROR_CONNECTION_COUNT_LIMIT = 1238;
CONST ERROR_LOGIN_TIME_RESTRICTION = 1239;
CONST ERROR_LOGIN_WKSTA_RESTRICTION = 1240;
CONST ERROR_INCORRECT_ADDRESS = 1241;
CONST ERROR_ALREADY_REGISTERED = 1242;
CONST ERROR_SERVICE_NOT_FOUND = 1243;
CONST ERROR_NOT_AUTHENTICATED = 1244;
CONST ERROR_NOT_LOGGED_ON = 1245;
CONST ERROR_CONTINUE = 1246;
CONST ERROR_ALREADY_INITIALIZED = 1247;
CONST ERROR_NO_MORE_DEVICES = 1248;
CONST ERROR_NOT_ALL_ASSIGNED = 1300;
CONST ERROR_SOME_NOT_MAPPED = 1301;
CONST ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302;
CONST ERROR_LOCAL_USER_SESSION_KEY = 1303;
CONST ERROR_NULL_LM_PASSWORD = 1304;
CONST ERROR_UNKNOWN_REVISION = 1305;
CONST ERROR_REVISION_MISMATCH = 1306;
CONST ERROR_INVALID_OWNER = 1307;
CONST ERROR_INVALID_PRIMARY_GROUP = 1308;
CONST ERROR_NO_IMPERSONATION_TOKEN = 1309;
CONST ERROR_CANT_DISABLE_MANDATORY = 1310;
CONST ERROR_NO_LOGON_SERVERS = 1311;
CONST ERROR_NO_SUCH_LOGON_SESSION = 1312;
CONST ERROR_NO_SUCH_PRIVILEGE = 1313;
CONST ERROR_PRIVILEGE_NOT_HELD = 1314;
CONST ERROR_INVALID_ACCOUNT_NAME = 1315;
CONST ERROR_USER_EXISTS = 1316;
CONST ERROR_NO_SUCH_USER = 1317;
CONST ERROR_GROUP_EXISTS = 1318;
CONST ERROR_NO_SUCH_GROUP = 1319;
CONST ERROR_MEMBER_IN_GROUP = 1320;
CONST ERROR_MEMBER_NOT_IN_GROUP = 1321;
CONST ERROR_LAST_ADMIN = 1322;
CONST ERROR_WRONG_PASSWORD = 1323;
CONST ERROR_ILL_FORMED_PASSWORD = 1324;
CONST ERROR_PASSWORD_RESTRICTION = 1325;
CONST ERROR_LOGON_FAILURE = 1326;
CONST ERROR_ACCOUNT_RESTRICTION = 1327;
CONST ERROR_INVALID_LOGON_HOURS = 1328;
CONST ERROR_INVALID_WORKSTATION = 1329;
CONST ERROR_PASSWORD_EXPIRED = 1330;
CONST ERROR_ACCOUNT_DISABLED = 1331;
CONST ERROR_NONE_MAPPED = 1332;
CONST ERROR_TOO_MANY_LUIDS_REQUESTED = 1333;
CONST ERROR_LUIDS_EXHAUSTED = 1334;
CONST ERROR_INVALID_SUB_AUTHORITY = 1335;
CONST ERROR_INVALID_ACL = 1336;
CONST ERROR_INVALID_SID = 1337;
CONST ERROR_INVALID_SECURITY_DESCR = 1338;
CONST ERROR_BAD_INHERITANCE_ACL = 1340;
CONST ERROR_SERVER_DISABLED = 1341;
CONST ERROR_SERVER_NOT_DISABLED = 1342;
CONST ERROR_INVALID_ID_AUTHORITY = 1343;
CONST ERROR_ALLOTTED_SPACE_EXCEEDED = 1344;
CONST ERROR_INVALID_GROUP_ATTRIBUTES = 1345;
CONST ERROR_BAD_IMPERSONATION_LEVEL = 1346;
CONST ERROR_CANT_OPEN_ANONYMOUS = 1347;
CONST ERROR_BAD_VALIDATION_CLASS = 1348;
CONST ERROR_BAD_TOKEN_TYPE = 1349;
CONST ERROR_NO_SECURITY_ON_OBJECT = 1350;
CONST ERROR_CANT_ACCESS_DOMAIN_INFO = 1351;
CONST ERROR_INVALID_SERVER_STATE = 1352;
CONST ERROR_INVALID_DOMAIN_STATE = 1353;
CONST ERROR_INVALID_DOMAIN_ROLE = 1354;
CONST ERROR_NO_SUCH_DOMAIN = 1355;
CONST ERROR_DOMAIN_EXISTS = 1356;
CONST ERROR_DOMAIN_LIMIT_EXCEEDED = 1357;
CONST ERROR_INTERNAL_DB_CORRUPTION = 1358;
CONST ERROR_INTERNAL_ERROR = 1359;
CONST ERROR_GENERIC_NOT_MAPPED = 1360;
CONST ERROR_BAD_DESCRIPTOR_FORMAT = 1361;
CONST ERROR_NOT_LOGON_PROCESS = 1362;
CONST ERROR_LOGON_SESSION_EXISTS = 1363;
CONST ERROR_NO_SUCH_PACKAGE = 1364;
CONST ERROR_BAD_LOGON_SESSION_STATE = 1365;
CONST ERROR_LOGON_SESSION_COLLISION = 1366;
CONST ERROR_INVALID_LOGON_TYPE = 1367;
CONST ERROR_CANNOT_IMPERSONATE = 1368;
CONST ERROR_RXACT_INVALID_STATE = 1369;
CONST ERROR_RXACT_COMMIT_FAILURE = 1370;
CONST ERROR_SPECIAL_ACCOUNT = 1371;
CONST ERROR_SPECIAL_GROUP = 1372;
CONST ERROR_SPECIAL_USER = 1373;
CONST ERROR_MEMBERS_PRIMARY_GROUP = 1374;
CONST ERROR_TOKEN_ALREADY_IN_USE = 1375;
CONST ERROR_NO_SUCH_ALIAS = 1376;
CONST ERROR_MEMBER_NOT_IN_ALIAS = 1377;
CONST ERROR_MEMBER_IN_ALIAS = 1378;
CONST ERROR_ALIAS_EXISTS = 1379;
CONST ERROR_LOGON_NOT_GRANTED = 1380;
CONST ERROR_TOO_MANY_SECRETS = 1381;
CONST ERROR_SECRET_TOO_LONG = 1382;
CONST ERROR_INTERNAL_DB_ERROR = 1383;
CONST ERROR_TOO_MANY_CONTEXT_IDS = 1384;
CONST ERROR_LOGON_TYPE_NOT_GRANTED = 1385;
CONST ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386;
CONST ERROR_NO_SUCH_MEMBER = 1387;
CONST ERROR_INVALID_MEMBER = 1388;
CONST ERROR_TOO_MANY_SIDS = 1389;
CONST ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390;
CONST ERROR_NO_INHERITANCE = 1391;
CONST ERROR_FILE_CORRUPT = 1392;
CONST ERROR_DISK_CORRUPT = 1393;
CONST ERROR_NO_USER_SESSION_KEY = 1394;
CONST ERROR_LICENSE_QUOTA_EXCEEDED = 1395;
CONST ERROR_INVALID_WINDOW_HANDLE = 1400;
CONST ERROR_INVALID_MENU_HANDLE = 1401;
CONST ERROR_INVALID_CURSOR_HANDLE = 1402;
CONST ERROR_INVALID_ACCEL_HANDLE = 1403;
CONST ERROR_INVALID_HOOK_HANDLE = 1404;
CONST ERROR_INVALID_DWP_HANDLE = 1405;
CONST ERROR_TLW_WITH_WSCHILD = 1406;
CONST ERROR_CANNOT_FIND_WND_CLASS = 1407;
CONST ERROR_WINDOW_OF_OTHER_THREAD = 1408;
CONST ERROR_HOTKEY_ALREADY_REGISTERED = 1409;
CONST ERROR_CLASS_ALREADY_EXISTS = 1410;
CONST ERROR_CLASS_DOES_NOT_EXIST = 1411;
CONST ERROR_CLASS_HAS_WINDOWS = 1412;
CONST ERROR_INVALID_INDEX = 1413;
CONST ERROR_INVALID_ICON_HANDLE = 1414;
CONST ERROR_PRIVATE_DIALOG_INDEX = 1415;
CONST ERROR_LISTBOX_ID_NOT_FOUND = 1416;
CONST ERROR_NO_WILDCARD_CHARACTERS = 1417;
CONST ERROR_CLIPBOARD_NOT_OPEN = 1418;
CONST ERROR_HOTKEY_NOT_REGISTERED = 1419;
CONST ERROR_WINDOW_NOT_DIALOG = 1420;
CONST ERROR_CONTROL_ID_NOT_FOUND = 1421;
CONST ERROR_INVALID_COMBOBOX_MESSAGE = 1422;
CONST ERROR_WINDOW_NOT_COMBOBOX = 1423;
CONST ERROR_INVALID_EDIT_HEIGHT = 1424;
CONST ERROR_DC_NOT_FOUND = 1425;
CONST ERROR_INVALID_HOOK_FILTER = 1426;
CONST ERROR_INVALID_FILTER_PROC = 1427;
CONST ERROR_HOOK_NEEDS_HMOD = 1428;
CONST ERROR_GLOBAL_ONLY_HOOK = 1429;
CONST ERROR_JOURNAL_HOOK_SET = 1430;
CONST ERROR_HOOK_NOT_INSTALLED = 1431;
CONST ERROR_INVALID_LB_MESSAGE = 1432;
CONST ERROR_SETCOUNT_ON_BAD_LB = 1433;
CONST ERROR_LB_WITHOUT_TABSTOPS = 1434;
CONST ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435;
CONST ERROR_CHILD_WINDOW_MENU = 1436;
CONST ERROR_NO_SYSTEM_MENU = 1437;
CONST ERROR_INVALID_MSGBOX_STYLE = 1438;
CONST ERROR_INVALID_SPI_VALUE = 1439;
CONST ERROR_SCREEN_ALREADY_LOCKED = 1440;
CONST ERROR_HWNDS_HAVE_DIFF_PARENT = 1441;
CONST ERROR_NOT_CHILD_WINDOW = 1442;
CONST ERROR_INVALID_GW_COMMAND = 1443;
CONST ERROR_INVALID_THREAD_ID = 1444;
CONST ERROR_NON_MDICHILD_WINDOW = 1445;
CONST ERROR_POPUP_ALREADY_ACTIVE = 1446;
CONST ERROR_NO_SCROLLBARS = 1447;
CONST ERROR_INVALID_SCROLLBAR_RANGE = 1448;
CONST ERROR_INVALID_SHOWWIN_COMMAND = 1449;
CONST ERROR_NO_SYSTEM_RESOURCES = 1450;
CONST ERROR_NONPAGED_SYSTEM_RESOURCES = 1451;
CONST ERROR_PAGED_SYSTEM_RESOURCES = 1452;
CONST ERROR_WORKING_SET_QUOTA = 1453;
CONST ERROR_PAGEFILE_QUOTA = 1454;
CONST ERROR_COMMITMENT_LIMIT = 1455;
CONST ERROR_MENU_ITEM_NOT_FOUND = 1456;
CONST ERROR_EVENTLOG_FILE_CORRUPT = 1500;
CONST ERROR_EVENTLOG_CANT_START = 1501;
CONST ERROR_LOG_FILE_FULL = 1502;
CONST ERROR_EVENTLOG_FILE_CHANGED = 1503;
CONST RPC_S_INVALID_STRING_BINDING = 1700;
CONST RPC_S_WRONG_KIND_OF_BINDING = 1701;
CONST RPC_S_INVALID_BINDING = 1702;
CONST RPC_S_PROTSEQ_NOT_SUPPORTED = 1703;
CONST RPC_S_INVALID_RPC_PROTSEQ = 1704;
CONST RPC_S_INVALID_STRING_UUID = 1705;
CONST RPC_S_INVALID_ENDPOINT_FORMAT = 1706;
CONST RPC_S_INVALID_NET_ADDR = 1707;
CONST RPC_S_NO_ENDPOINT_FOUND = 1708;
CONST RPC_S_INVALID_TIMEOUT = 1709;
CONST RPC_S_OBJECT_NOT_FOUND = 1710;
CONST RPC_S_ALREADY_REGISTERED = 1711;
CONST RPC_S_TYPE_ALREADY_REGISTERED = 1712;
CONST RPC_S_ALREADY_LISTENING = 1713;
CONST RPC_S_NO_PROTSEQS_REGISTERED = 1714;
CONST RPC_S_NOT_LISTENING = 1715;
CONST RPC_S_UNKNOWN_MGR_TYPE = 1716;
CONST RPC_S_UNKNOWN_IF = 1717;
CONST RPC_S_NO_BINDINGS = 1718;
CONST RPC_S_NO_PROTSEQS = 1719;
CONST RPC_S_CANT_CREATE_ENDPOINT = 1720;
CONST RPC_S_OUT_OF_RESOURCES = 1721;
CONST RPC_S_SERVER_UNAVAILABLE = 1722;
CONST RPC_S_SERVER_TOO_BUSY = 1723;
CONST RPC_S_INVALID_NETWORK_OPTIONS = 1724;
CONST RPC_S_NO_CALL_ACTIVE = 1725;
CONST RPC_S_CALL_FAILED = 1726;
CONST RPC_S_CALL_FAILED_DNE = 1727;
CONST RPC_S_PROTOCOL_ERROR = 1728;
CONST RPC_S_UNSUPPORTED_TRANS_SYN = 1730;
CONST RPC_S_UNSUPPORTED_TYPE = 1732;
CONST RPC_S_INVALID_TAG = 1733;
CONST RPC_S_INVALID_BOUND = 1734;
CONST RPC_S_NO_ENTRY_NAME = 1735;
CONST RPC_S_INVALID_NAME_SYNTAX = 1736;
CONST RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737;
CONST RPC_S_UUID_NO_ADDRESS = 1739;
CONST RPC_S_DUPLICATE_ENDPOINT = 1740;
CONST RPC_S_UNKNOWN_AUTHN_TYPE = 1741;
CONST RPC_S_MAX_CALLS_TOO_SMALL = 1742;
CONST RPC_S_STRING_TOO_LONG = 1743;
CONST RPC_S_PROTSEQ_NOT_FOUND = 1744;
CONST RPC_S_PROCNUM_OUT_OF_RANGE = 1745;
CONST RPC_S_BINDING_HAS_NO_AUTH = 1746;
CONST RPC_S_UNKNOWN_AUTHN_SERVICE = 1747;
CONST RPC_S_UNKNOWN_AUTHN_LEVEL = 1748;
CONST RPC_S_INVALID_AUTH_IDENTITY = 1749;
CONST RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750;
CONST EPT_S_INVALID_ENTRY = 1751;
CONST EPT_S_CANT_PERFORM_OP = 1752;
CONST EPT_S_NOT_REGISTERED = 1753;
CONST RPC_S_NOTHING_TO_EXPORT = 1754;
CONST RPC_S_INCOMPLETE_NAME = 1755;
CONST RPC_S_INVALID_VERS_OPTION = 1756;
CONST RPC_S_NO_MORE_MEMBERS = 1757;
CONST RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758;
CONST RPC_S_INTERFACE_NOT_FOUND = 1759;
CONST RPC_S_ENTRY_ALREADY_EXISTS = 1760;
CONST RPC_S_ENTRY_NOT_FOUND = 1761;
CONST RPC_S_NAME_SERVICE_UNAVAILABLE = 1762;
CONST RPC_S_INVALID_NAF_ID = 1763;
CONST RPC_S_CANNOT_SUPPORT = 1764;
CONST RPC_S_NO_CONTEXT_AVAILABLE = 1765;
CONST RPC_S_INTERNAL_ERROR = 1766;
CONST RPC_S_ZERO_DIVIDE = 1767;
CONST RPC_S_ADDRESS_ERROR = 1768;
CONST RPC_S_FP_DIV_ZERO = 1769;
CONST RPC_S_FP_UNDERFLOW = 1770;
CONST RPC_S_FP_OVERFLOW = 1771;
CONST RPC_X_NO_MORE_ENTRIES = 1772;
CONST RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773;
CONST RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774;
CONST RPC_X_SS_IN_NULL_CONTEXT = 1775;
CONST RPC_X_SS_CONTEXT_DAMAGED = 1777;
CONST RPC_X_SS_HANDLES_MISMATCH = 1778;
CONST RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779;
CONST RPC_X_NULL_REF_POINTER = 1780;
CONST RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781;
CONST RPC_X_BYTE_COUNT_TOO_SMALL = 1782;
CONST RPC_X_BAD_STUB_DATA = 1783;
CONST ERROR_INVALID_USER_BUFFER = 1784;
CONST ERROR_UNRECOGNIZED_MEDIA = 1785;
CONST ERROR_NO_TRUST_LSA_SECRET = 1786;
CONST ERROR_NO_TRUST_SAM_ACCOUNT = 1787;
CONST ERROR_TRUSTED_DOMAIN_FAILURE = 1788;
CONST ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789;
CONST ERROR_TRUST_FAILURE = 1790;
CONST RPC_S_CALL_IN_PROGRESS = 1791;
CONST ERROR_NETLOGON_NOT_STARTED = 1792;
CONST ERROR_ACCOUNT_EXPIRED = 1793;
CONST ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794;
CONST ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795;
CONST ERROR_UNKNOWN_PORT = 1796;
CONST ERROR_UNKNOWN_PRINTER_DRIVER = 1797;
CONST ERROR_UNKNOWN_PRINTPROCESSOR = 1798;
CONST ERROR_INVALID_SEPARATOR_FILE = 1799;
CONST ERROR_INVALID_PRIORITY = 1800;
CONST ERROR_INVALID_PRINTER_NAME = 1801;
CONST ERROR_PRINTER_ALREADY_EXISTS = 1802;
CONST ERROR_INVALID_PRINTER_COMMAND = 1803;
CONST ERROR_INVALID_DATATYPE = 1804;
CONST ERROR_INVALID_ENVIRONMENT = 1805;
CONST RPC_S_NO_MORE_BINDINGS = 1806;
CONST ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807;
CONST ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808;
CONST ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809;
CONST ERROR_DOMAIN_TRUST_INCONSISTENT = 1810;
CONST ERROR_SERVER_HAS_OPEN_HANDLES = 1811;
CONST ERROR_RESOURCE_DATA_NOT_FOUND = 1812;
CONST ERROR_RESOURCE_TYPE_NOT_FOUND = 1813;
CONST ERROR_RESOURCE_NAME_NOT_FOUND = 1814;
CONST ERROR_RESOURCE_LANG_NOT_FOUND = 1815;
CONST ERROR_NOT_ENOUGH_QUOTA = 1816;
CONST RPC_S_NO_INTERFACES = 1817;
CONST RPC_S_CALL_CANCELLED = 1818;
CONST RPC_S_BINDING_INCOMPLETE = 1819;
CONST RPC_S_COMM_FAILURE = 1820;
CONST RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821;
CONST RPC_S_NO_PRINC_NAME = 1822;
CONST RPC_S_NOT_RPC_ERROR = 1823;
CONST RPC_S_UUID_LOCAL_ONLY = 1824;
CONST RPC_S_SEC_PKG_ERROR = 1825;
CONST RPC_S_NOT_CANCELLED = 1826;
CONST RPC_X_INVALID_ES_ACTION = 1827;
CONST RPC_X_WRONG_ES_VERSION = 1828;
CONST RPC_X_WRONG_STUB_VERSION = 1829;
CONST RPC_S_GROUP_MEMBER_NOT_FOUND = 1898;
CONST EPT_S_CANT_CREATE = 1899;
CONST RPC_S_INVALID_OBJECT = 1900;
CONST ERROR_INVALID_TIME = 1901;
CONST ERROR_INVALID_FORM_NAME = 1902;
CONST ERROR_INVALID_FORM_SIZE = 1903;
CONST ERROR_ALREADY_WAITING = 1904;
CONST ERROR_PRINTER_DELETED = 1905;
CONST ERROR_INVALID_PRINTER_STATE = 1906;
CONST ERROR_PASSWORD_MUST_CHANGE = 1907;
CONST ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908;
CONST ERROR_ACCOUNT_LOCKED_OUT = 1909;
CONST ERROR_NO_BROWSER_SERVERS_FOUND = 6118;
CONST ERROR_INVALID_PIXEL_FORMAT = 2000;
CONST ERROR_BAD_DRIVER = 2001;
CONST ERROR_INVALID_WINDOW_STYLE = 2002;
CONST ERROR_METAFILE_NOT_SUPPORTED = 2003;
CONST ERROR_TRANSFORM_NOT_SUPPORTED = 2004;
CONST ERROR_CLIPPING_NOT_SUPPORTED = 2005;
CONST ERROR_UNKNOWN_PRINT_MONITOR = 3000;
CONST ERROR_PRINTER_DRIVER_IN_USE = 3001;
CONST ERROR_SPOOL_FILE_NOT_FOUND = 3002;
CONST ERROR_SPL_NO_STARTDOC = 3003;
CONST ERROR_SPL_NO_ADDJOB = 3004;
CONST ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005;
CONST ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006;
CONST ERROR_WINS_INTERNAL = 4000;
CONST ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001;
CONST ERROR_STATIC_INIT = 4002;
CONST ERROR_INC_BACKUP = 4003;
CONST ERROR_FULL_BACKUP = 4004;
CONST ERROR_REC_NON_EXISTENT = 4005;
CONST ERROR_RPL_NOT_ALLOWED = 4006;

{$IFDEF __cplusplus}
{$ENDIF /* __cplusplus */}

{ /// defines.pas ////}
{-Defines.h }

{-Windows32 API definitions }

{-Copyright (C) 1996 Free Software Foundation, Inc. }

{-Author: Scott Christley <scottc@net-community.com> }

{-Defines.Pas }
{-Translated to GNU Pascal: Prof. Abimbola Olowofoyeku <African_Chief@bigfoot.com> }

{-This file is part of the Windows32 API Library. }

{-This library is free software; you can redistribute it and/or }
{-modify it under the terms of the GNU Library General Public }
{-License as published by the Free Software Foundation; either }
{-version 2 of the License, or (at your option) any later version. }

{-This library is distributed in the hope that it will be useful, }
{-but WITHOUT ANY WARRANTY; without even the implied warranty of }
{-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU }
{-Library General Public License for more details. }

{-If you are interested in a warranty or support for this source code, }
{-contact Scott Christley <scottc@net-community.com> for more information. }

{-You should have received a copy of the GNU Library General Public }
{-License along with this library; see the file COPYING.LIB. }
{-If not, write to the Free Software Foundation, }
{-59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. }
{= }
{+// WARNING: This file is automatically generated. */ }

{ !!! not sure !!! }
TYPE
HTreeItem   = Longint;
// CallBack    = TFarProc;
EXPENTRY    = TFarProc;
{ !!! not sure !!! }


TYPE MAKEINTRESOURCE = pChar;

CONST MAX_PATH = ( 260 );
CONST UNICODE_NULL = ( 0 );
CONST LF_FACESIZE = ( 32 );
CONST LF_FULLFACESIZE = ( 64 );
CONST ELF_VENDOR_SIZE = ( 4 );
CONST SECURITY_STATIC_TRACKING = ( 0 );
CONST SECURITY_DYNAMIC_TRACKING = ( 1 );
CONST MAX_DEFAULTCHAR = ( 2 );
CONST MAX_LEADBYTES = ( 12 );
CONST EXCEPTION_MAXIMUM_PARAMETERS = ( 15 );
CONST CCHDEVICENAME = ( 32 );
CONST CCHFORMNAME = ( 32 );
CONST MENU_TEXT_LEN = ( 40 );
CONST MAX_LANA = ( 254 );
CONST NCBNAMSZ = ( 16 );
CONST NETBIOS_NAME_LEN = ( 16 );
CONST OFS_MAXPATHNAME = ( 128 );
CONST MAX_TAB_STOPS = ( 32 );
CONST ANYSIZE_ARRAY = ( 1 );
CONST RAS_MaxCallbackNumber = ( 128 );
CONST RAS_MaxDeviceName = ( 128 );
CONST RAS_MaxDeviceType = ( 16 );
CONST RAS_MaxEntryName = ( 256 );
CONST RAS_MaxIpAddress = ( 15 );
CONST RAS_MaxIpxAddress = ( 21 );
CONST RAS_MaxPhoneNumber = ( 128 );
CONST UNLEN = ( 256 );
CONST PWLEN = ( 256 );
CONST CNLEN = ( 15 );
CONST DNLEN = ( 15 );
{+// Unsigned types max */ }
CONST MAXDWORD = ( $FFFFFFF );
CONST MAXWORD = ( $FFF );
CONST MAXBYTE = ( $F );
{+// Signed types max/min */ }
CONST MINCHAR = ( $80 );
CONST MAXCHAR = ( $7 );
CONST MINSHORT = ( $8000 );
CONST MAXSHORT = ( $7FF );
CONST MINLONG = ( $80000000 );
CONST MAXLONG = ( $7FFFFFF );

{+// _llseek */ }
CONST FILE_BEGIN = ( 0 );
CONST FILE_CURRENT = ( 1 );
CONST FILE_END = ( 2 );

{+// _lopen, LZOpenFile, OpenFile */ }
CONST OF_READ = ( 0 );
CONST OF_READWRITE = ( 2 );
CONST OF_WRITE = ( 1 );
CONST OF_SHARE_COMPAT = ( 0 );
CONST OF_SHARE_DENY_NONE = ( 64 );
CONST OF_SHARE_DENY_READ = ( 48 );
CONST OF_SHARE_DENY_WRITE = ( 32 );
CONST OF_SHARE_EXCLUSIVE = ( 16 );
CONST OF_CANCEL = ( 2048 );
CONST OF_CREATE = ( 4096 );
CONST OF_DELETE = ( 512 );
CONST OF_EXIST = ( 16384 );
CONST OF_PARSE = ( 256 );
CONST OF_PROMPT = ( 8192 );
CONST OF_REOPEN = ( 32768 );
CONST OF_VERIFY = ( 1024 );

{+// ActivateKeyboardLayout, LoadKeyboardLayout */ }
CONST HKL_NEXT = ( 1 );
CONST HKL_PREV = ( 0 );
CONST KLF_REORDER = ( 8 );
CONST KLF_UNLOADPREVIOUS = ( 4 );
CONST KLF_ACTIVATE = ( 1 );
CONST KLF_NOTELLSHELL = ( 128 );
CONST KLF_REPLACELANG = ( 16 );
CONST KLF_SUBSTITUTE_OK = ( 2 );

{+// AppendMenu */ }
CONST MF_BITMAP = ( $4 );
CONST MF_DISABLED = ( $2 );
CONST MF_ENABLED = ( 0 );
CONST MF_GRAYED = ( $1 );
CONST MF_HELP = ( $4000 );
CONST MF_MENUBARBREAK = ( $20 );
CONST MF_MENUBREAK = ( $40 );
CONST MF_MOUSESELECT = ( $8000 );
CONST MF_OWNERDRAW = ( $100 );
CONST MF_POPUP = ( $10 );
CONST MF_SEPARATOR = ( $800 );
CONST MF_STRING = ( 0 );
CONST MF_SYSMENU = ( $2000 );
CONST MF_USECHECKBITMAPS = ( $200 );

{+// Ternary Raster Operations - BitBlt */ }
CONST BLACKNESS = $00000042;
CONST NOTSRCERASE = $001100A6;
CONST NOTSRCCOPY = $00330008;
CONST SRCERASE = $00440328;
CONST DSTINVERT = $00550009;
CONST PATINVERT = $005A0049;
CONST SRCINVERT = $00660046;
CONST SRCAND = $008800C6;
CONST MERGEPAINT = $00BB0226;
CONST MERGECOPY = $00C000CA;
CONST SRCCOPY = $00CC0020;
CONST SRCPAINT = $00EE0086;
CONST PATCOPY = $00F00021;
CONST PATPAINT = $00FB0A09;
CONST WHITENESS = $00FF0062;

{+// Binary Raster Operations */ }
CONST R2_BLACK = ( 1 );
CONST R2_COPYPEN = ( 13 );
CONST R2_MASKNOTPEN = ( 3 );
CONST R2_MASKPEN = ( 9 );
CONST R2_MASKPENNOT = ( 5 );
CONST R2_MERGENOTPEN = ( 12 );
CONST R2_MERGEPEN = ( 15 );
CONST R2_MERGEPENNOT = ( 14 );
CONST R2_NOP = ( 11 );
CONST R2_NOT = ( 6 );
CONST R2_NOTCOPYPEN = ( 4 );
CONST R2_NOTMASKPEN = ( 8 );
CONST R2_NOTMERGEPEN = ( 2 );
CONST R2_NOTXORPEN = ( 10 );
CONST R2_WHITE = ( 16 );
CONST R2_XORPEN = ( 7 );

{+// BroadcastSystemMessage */ }
CONST BSF_FLUSHDISK = ( 4 );
CONST BSF_FORCEIFHUNG = ( 32 );
CONST BSF_IGNORECURRENTTASK = ( 2 );
CONST BSF_NOHANG = ( 8 );
CONST BSF_POSTMESSAGE = ( 16 );
CONST BSF_QUERY = ( 1 );
CONST BSM_ALLCOMPONENTS = ( 0 );
CONST BSM_APPLICATIONS = ( 8 );
CONST BSM_INSTALLABLEDRIVERS = ( 4 );
CONST BSM_NETDRIVER = ( 2 );
CONST BSM_VXDS = ( 1 );
CONST BROADCAST_QUERY_DENY = ( 1112363332 );

{+// BrowseCallbackProc */ }

{+// CallNamedPipe */ }
CONST NMPWAIT_NOWAIT = ( 1 );
CONST NMPWAIT_WAIT_FOREVER = (  - 1 );
CONST NMPWAIT_USE_DEFAULT_WAIT = ( 0 );

{+// CascadeWindows, TileWindows */ }
CONST MDITILE_SKIPDISABLED = ( 2 );
CONST MDITILE_HORIZONTAL = ( 1 );
CONST MDITILE_VERTICAL = ( 0 );

{+// CBTProc */ }
CONST HCBT_ACTIVATE = ( 5 );
CONST HCBT_CLICKSKIPPED = ( 6 );
CONST HCBT_CREATEWND = ( 3 );
CONST HCBT_DESTROYWND = ( 4 );
CONST HCBT_KEYSKIPPED = ( 7 );
CONST HCBT_MINMAX = ( 1 );
CONST HCBT_MOVESIZE = ( 0 );
CONST HCBT_QS = ( 2 );
CONST HCBT_SETFOCUS = ( 9 );
CONST HCBT_SYSCOMMAND = ( 8 );

{+// ChangeDisplaySettings */ }
CONST DM_BITSPERPEL = ( $40000 );
CONST DM_PELSWIDTH = ( $80000 );
CONST DM_PELSHEIGHT = ( $100000 );
CONST DM_DISPLAYFLAGS = ( $200000 );
CONST DM_DISPLAYFREQUENCY = ( $400000 );
CONST CDS_UPDATEREGISTRY = ( 1 );
CONST CDS_TEST = ( 2 );
CONST DISP_CHANGE_SUCCESSFUL = ( 0 );
CONST DISP_CHANGE_RESTART = ( 1 );
CONST DISP_CHANGE_BADFLAGS = (  - 4 );
CONST DISP_CHANGE_FAILED = (  - 1 );
CONST DISP_CHANGE_BADMODE = (  - 2 );
CONST DISP_CHANGE_NOTUPDATED = (  - 3 );

{+// ChangeServiceConfig */ }
CONST SERVICE_NO_CHANGE = (  - 1 );
CONST SERVICE_WIN32_OWN_PROCESS = ( 16 );
CONST SERVICE_WIN32_SHARE_PROCESS = ( 32 );
CONST SERVICE_KERNEL_DRIVER = ( 1 );
CONST SERVICE_FILE_SYSTEM_DRIVER = ( 2 );
CONST SERVICE_INTERACTIVE_PROCESS = ( 256 );
CONST SERVICE_BOOT_START = ( 0 );
CONST SERVICE_SYSTEM_START = ( 1 );
CONST SERVICE_AUTO_START = ( 2 );
CONST SERVICE_DEMAND_START = ( 3 );
CONST SERVICE_DISABLED = ( 4 );

{+// SERVICE_STATUS structure */ }
CONST SERVICE_STOPPED = ( 1 );
CONST SERVICE_START_PENDING = ( 2 );
CONST SERVICE_STOP_PENDING = ( 3 );
CONST SERVICE_RUNNING = ( 4 );
CONST SERVICE_CONTINUE_PENDING = ( 5 );
CONST SERVICE_PAUSE_PENDING = ( 6 );
CONST SERVICE_PAUSED = ( 7 );
CONST SERVICE_ACCEPT_STOP = ( 1 );
CONST SERVICE_ACCEPT_PAUSE_CONTINUE = ( 2 );
CONST SERVICE_ACCEPT_SHUTDOWN = ( 4 );

{+// CheckDlgButton */ }
CONST BST_CHECKED = ( 1 );
CONST BST_INDETERMINATE = ( 2 );
CONST BST_UNCHECKED = ( 0 );
CONST BST_FOCUS = ( 8 );
CONST BST_PUSHED = ( 4 );

{+// CheckMenuItem, HiliteMenuItem */ }
CONST MF_BYCOMMAND = ( 0 );
CONST MF_BYPOSITION = ( $400 );
CONST MF_CHECKED = ( $8 );
CONST MF_UNCHECKED = ( 0 );
CONST MF_HILITE = ( $80 );
CONST MF_UNHILITE = ( 0 );

{+// ChildWindowFromPointEx */ }
CONST CWP_ALL = ( 0 );
CONST CWP_SKIPINVISIBLE = ( 1 );
CONST CWP_SKIPDISABLED = ( 2 );
CONST CWP_SKIPTRANSPARENT = ( 4 );

{+// ClearCommError */ }
CONST CE_BREAK = ( 16 );
CONST CE_DNS = ( 2048 );
CONST CE_FRAME = ( 8 );
CONST CE_IOE = ( 1024 );
CONST CE_MODE = ( 32768 );
CONST CE_OOP = ( 4096 );
CONST CE_OVERRUN = ( 2 );
CONST CE_PTO = ( 512 );
CONST CE_RXOVER = ( 1 );
CONST CE_RXPARITY = ( 4 );
CONST CE_TXFULL = ( 256 );

{+// ChooseMatchToTarget */ }

{+// CombineRgn */ }
CONST RGN_AND = ( 1 );
CONST RGN_COPY = ( 5 );
CONST RGN_DIFF = ( 4 );
CONST RGN_OR = ( 2 );
CONST RGN_XOR = ( 3 );
CONST NULLREGION = ( 1 );
CONST SIMPLEREGION = ( 2 );
CONST COMPLEXREGION = ( 3 );
CONST ERROR = ( 0 );

{+// CommonDlgExtendedError */ }

{+// CompareString, LCMapString */ }
CONST LOCALE_SYSTEM_DEFAULT = ( $800 );
CONST LOCALE_USER_DEFAULT = ( $400 );
CONST NORM_IGNORECASE = ( 1 );
CONST NORM_IGNOREKANATYPE = ( 65536 );
CONST NORM_IGNORENONSPACE = ( 2 );
CONST NORM_IGNORESYMBOLS = ( 4 );
CONST NORM_IGNOREWIDTH = ( 131072 );
CONST SORT_STRINGSORT = ( 4096 );
CONST LCMAP_BYTEREV = ( 2048 );
CONST LCMAP_FULLWIDTH = ( 8388608 );
CONST LCMAP_HALFWIDTH = ( 4194304 );
CONST LCMAP_HIRAGANA = ( 1048576 );
CONST LCMAP_KATAKANA = ( 2097152 );
CONST LCMAP_LOWERCASE = ( 256 );
CONST LCMAP_SORTKEY = ( 1024 );
CONST LCMAP_UPPERCASE = ( 512 );

{+// ContinueDebugEvent */ }
CONST DBG_CONTINUE = ( $10002 );
CONST DBG_CONTROL_BREAK = ( $40010008 );
CONST DBG_CONTROL_C = ( $40010005 );
CONST DBG_EXCEPTION_NOT_HANDLED = ( $80010001 );
CONST DBG_TERMINATE_THREAD = ( $40010003 );
CONST DBG_TERMINATE_PROCESS = ( $40010004 );

{+// ControlService */ }
CONST SERVICE_CONTROL_STOP = ( 1 );
CONST SERVICE_CONTROL_PAUSE = ( 2 );
CONST SERVICE_CONTROL_CONTINUE = ( 3 );
CONST SERVICE_CONTROL_INTERROGATE = ( 4 );
CONST SERVICE_CONTROL_SHUTDOWN = ( 5 );

{+// CopyImage, LoadImage */ }
CONST IMAGE_BITMAP = ( 0 );
CONST IMAGE_CURSOR = ( 2 );
CONST IMAGE_ENHMETAFILE = ( 1 );
CONST IMAGE_ICON = ( 1 );
CONST LR_COPYDELETEORG = ( 8 );
CONST LR_COPYRETURNORG = ( 4 );
CONST LR_MONOCHROME = ( 1 );
CONST LR_CREATEDIBSECTION = ( 8192 );
CONST LR_DEFAULTSIZE = ( 64 );

{+// CreateDesktop */ }
CONST DF_ALLOWOTHERACCOUNTHOOK = ( $1 );
CONST DESKTOP_CREATEMENU = ( $4 );
CONST DESKTOP_CREATEWINDOW = ( $2 );
CONST DESKTOP_ENUMERATE = ( $40 );
CONST DESKTOP_HOOKCONTROL = ( $8 );
CONST DESKTOP_JOURNALPLAYBACK = ( $20 );
CONST DESKTOP_JOURNALRECORD = ( $10 );
CONST DESKTOP_READOBJECTS = ( $1 );
CONST DESKTOP_SWITCHDESKTOP = ( $100 );
CONST DESKTOP_WRITEOBJECTS = ( $80 );
CONST WSF_VISIBLE = ( $1 );

{+// CreateDIBitmap */ }
CONST CBM_INIT = ( $4 );
CONST DIB_PAL_COLORS = ( 1 );
CONST DIB_RGB_COLORS = ( 0 );

{+// CreateFile, GetFileAttributes, SetFileAttributes */ }
CONST GENERIC_READ = ( $80000000 );
CONST GENERIC_WRITE = ( $40000000 );
CONST FILE_SHARE_DELETE = ( 4 );
CONST FILE_SHARE_READ = ( 1 );
CONST FILE_SHARE_WRITE = ( 2 );
CONST CONSOLE_TEXTMODE_BUFFER = ( 1 );
CONST CONSOLE_FULLSCREEN_MODE = 1;
CONST CONSOLE_WINDOWED_MODE = 2;
CONST CREATE_NEW = ( 1 );
CONST CREATE_ALWAYS = ( 2 );
CONST OPEN_EXISTING = ( 3 );
CONST OPEN_ALWAYS = ( 4 );
CONST TRUNCATE_EXISTING = ( 5 );
CONST FILE_ATTRIBUTE_ARCHIVE = ( 32 );
CONST FILE_ATTRIBUTE_COMPRESSED = ( 2048 );
CONST FILE_ATTRIBUTE_NORMAL = ( 128 );
CONST FILE_ATTRIBUTE_DIRECTORY = ( 16 );
CONST FILE_ATTRIBUTE_HIDDEN = ( 2 );
CONST FILE_ATTRIBUTE_READONLY = ( 1 );
CONST FILE_ATTRIBUTE_SYSTEM = ( 4 );
CONST FILE_ATTRIBUTE_TEMPORARY = ( 256 );
CONST FILE_FLAG_WRITE_THROUGH = ( 2147483648 );
CONST FILE_FLAG_OVERLAPPED = ( 1073741824 );
CONST FILE_FLAG_NO_BUFFERING = ( 536870912 );
CONST FILE_FLAG_RANDOM_ACCESS = ( 268435456 );
CONST FILE_FLAG_SEQUENTIAL_SCAN = ( 134217728 );
CONST FILE_FLAG_DELETE_ON_CLOSE = ( 67108864 );
CONST FILE_FLAG_BACKUP_SEMANTICS = ( 33554432 );
CONST FILE_FLAG_POSIX_SEMANTICS = ( 16777216 );
CONST SECURITY_ANONYMOUS = ( 0 );
CONST SECURITY_IDENTIFICATION = ( 65536 );
CONST SECURITY_IMPERSONATION = ( 131072 );
CONST SECURITY_DELEGATION = ( 196608 );
CONST SECURITY_CONTEXT_TRACKING = ( 262144 );
CONST SECURITY_EFFECTIVE_ONLY = ( 524288 );
CONST SECURITY_SQOS_PRESENT = ( 1048576 );

{+// CreateFileMapping, VirtualAlloc, VirtualFree, VirtualProtect */ }
CONST SEC_COMMIT = ( 134217728 );
CONST SEC_IMAGE = ( 16777216 );
CONST SEC_NOCACHE = ( 268435456 );
CONST SEC_RESERVE = ( 67108864 );
CONST PAGE_READONLY = ( 2 );
CONST PAGE_READWRITE = ( 4 );
CONST PAGE_WRITECOPY = ( 8 );
CONST PAGE_EXECUTE = ( 16 );
CONST PAGE_EXECUTE_READ = ( 32 );
CONST PAGE_EXECUTE_READWRITE = ( 64 );
CONST PAGE_EXECUTE_WRITECOPY = ( 128 );
CONST PAGE_GUARD = ( 256 );
CONST PAGE_NOACCESS = ( 1 );
CONST PAGE_NOCACHE = ( 512 );
CONST MEM_COMMIT = ( 4096 );
CONST MEM_FREE = ( 65536 );
CONST MEM_RESERVE = ( 8192 );
CONST MEM_IMAGE = ( 16777216 );
CONST MEM_MAPPED = ( 262144 );
CONST MEM_PRIVATE = ( 131072 );
CONST MEM_DECOMMIT = ( 16384 );
CONST MEM_RELEASE = ( 32768 );
CONST MEM_TOP_DOWN = ( 1048576 );
CONST EXCEPTION_GUARD_PAGE = ( $80000001 );
CONST SECTION_EXTEND_SIZE = ( $10 );
CONST SECTION_MAP_READ = ( $4 );
CONST SECTION_MAP_WRITE = ( $2 );
CONST SECTION_QUERY = ( $1 );
CONST SECTION_ALL_ACCESS = ( $f001f );

{+// CreateFont */ }
CONST FW_DONTCARE = ( 0 );
CONST FW_THIN = ( 100 );
CONST FW_EXTRALIGHT = ( 200 );
CONST FW_LIGHT = ( 300 );
CONST FW_NORMAL = ( 400 );
CONST FW_REGULAR = FW_NORMAL;
CONST FW_MEDIUM = ( 500 );
CONST FW_SEMIBOLD = ( 600 );
CONST FW_BOLD = ( 700 );
CONST FW_EXTRABOLD = ( 800 );
CONST FW_HEAVY = ( 900 );
CONST ANSI_CHARSET = ( 0 );
CONST DEFAULT_CHARSET = ( 1 );
CONST SYMBOL_CHARSET = ( 2 );
CONST SHIFTJIS_CHARSET = ( 128 );
CONST HANGEUL_CHARSET = ( 129 );
CONST GB2312_CHARSET = ( 134 );
CONST CHINESEBIG5_CHARSET = ( 136 );
CONST GREEK_CHARSET = ( 161 );
CONST TURKISH_CHARSET = ( 162 );
CONST HEBREW_CHARSET = ( 177 );
CONST ARABIC_CHARSET = ( 178 );
CONST BALTIC_CHARSET = ( 186 );
CONST RUSSIAN_CHARSET = ( 204 );
CONST THAI_CHARSET = ( 222 );
CONST EASTEUROPE_CHARSET = ( 238 );
CONST OEM_CHARSET = ( 255 );
CONST OUT_DEFAULT_PRECIS = ( 0 );
CONST OUT_STRING_PRECIS = ( 1 );
CONST OUT_CHARACTER_PRECIS = ( 2 );
CONST OUT_STROKE_PRECIS = ( 3 );
CONST OUT_TT_PRECIS = ( 4 );
CONST OUT_DEVICE_PRECIS = ( 5 );
CONST OUT_RASTER_PRECIS = ( 6 );
CONST OUT_TT_ONLY_PRECIS = ( 7 );
CONST OUT_OUTLINE_PRECIS = ( 8 );
CONST CLIP_DEFAULT_PRECIS = ( 0 );
CONST CLIP_CHARACTER_PRECIS = ( 1 );
CONST CLIP_STROKE_PRECIS = ( 2 );
CONST CLIP_MASK = ( 15 );
CONST CLIP_LH_ANGLES = ( 16 );
CONST CLIP_TT_ALWAYS = ( 32 );
CONST CLIP_EMBEDDED = ( 128 );
CONST DEFAULT_QUALITY = ( 0 );
CONST DRAFT_QUALITY = ( 1 );
CONST PROOF_QUALITY = ( 2 );
CONST DEFAULT_PITCH = ( 0 );
CONST FIXED_PITCH = ( 1 );
CONST VARIABLE_PITCH = ( 2 );
CONST FF_DECORATIVE = ( 80 );
CONST FF_DONTCARE = ( 0 );
CONST FF_MODERN = ( 48 );
CONST FF_ROMAN = ( 16 );
CONST FF_SCRIPT = ( 64 );
CONST FF_SWISS = ( 32 );

{+// CreateHatchBrush */ }
CONST HS_BDIAGONAL = ( 3 );
CONST HS_CROSS = ( 4 );
CONST HS_DIAGCROSS = ( 5 );
CONST HS_FDIAGONAL = ( 2 );
CONST HS_HORIZONTAL = ( 0 );
CONST HS_VERTICAL = ( 1 );

{+// CreateIconFromResourceEx */ }
CONST LR_DEFAULTCOLOR = ( 0 );
CONST LR_LOADREALSIZE = ( 128 );

{+// CreateMailslot, GetMailslotInfo */ }
CONST MAILSLOT_WAIT_FOREVER = ( $ffffffff{L} );
CONST MAILSLOT_NO_MESSAGE = ( $ffffffff{L} );

{+// CreateMappedBitmap */ }
CONST CMB_MASKED = ( 2 );

{+// CreateNamedPipe */ }
CONST PIPE_ACCESS_DUPLEX = ( 3 );
CONST PIPE_ACCESS_INBOUND = ( 1 );
CONST PIPE_ACCESS_OUTBOUND = ( 2 );
CONST WRITE_DAC = ( $40000 );
CONST WRITE_OWNER = ( $80000 );
CONST ACCESS_SYSTEM_SECURITY = ( $1000000 );
CONST PIPE_TYPE_BYTE = ( 0 );
CONST PIPE_TYPE_MESSAGE = ( 4 );
CONST PIPE_READMODE_BYTE = ( 0 );
CONST PIPE_READMODE_MESSAGE = ( 2 );
CONST PIPE_WAIT = ( 0 );
CONST PIPE_NOWAIT = ( 1 );

{+// CreatePen, ExtCreatePen */ }
CONST PS_GEOMETRIC = ( 65536 );
CONST PS_COSMETIC = ( 0 );
CONST PS_ALTERNATE = ( 8 );
CONST PS_SOLID = ( 0 );
CONST PS_DASH = ( 1 );
CONST PS_DOT = ( 2 );
CONST PS_DASHDOT = ( 3 );
CONST PS_DASHDOTDOT = ( 4 );
CONST PS_NULL = ( 5 );
CONST PS_USERSTYLE = ( 7 );
CONST PS_INSIDEFRAME = ( 6 );
CONST PS_ENDCAP_ROUND = ( 0 );
CONST PS_ENDCAP_SQUARE = ( 256 );
CONST PS_ENDCAP_FLAT = ( 512 );
CONST PS_JOIN_BEVEL = ( 4096 );
CONST PS_JOIN_MITER = ( 8192 );
CONST PS_JOIN_ROUND = ( 0 );
CONST PS_STYLE_MASK = ( 15 );
CONST PS_ENDCAP_MASK = ( 3840 );
CONST PS_TYPE_MASK = ( 983040 );

{+// CreatePolygonRgn */ }
CONST ALTERNATE = ( 1 );
CONST WINDING = ( 2 );

{+// CreateProcess */ }
CONST CREATE_DEFAULT_ERROR_MODE = ( 67108864 );
CONST CREATE_NEW_CONSOLE = ( 16 );
CONST CREATE_NEW_PROCESS_GROUP = ( 512 );
CONST CREATE_SEPARATE_WOW_VDM = ( 2048 );
CONST CREATE_SUSPENDED = ( 4 );
CONST CREATE_UNICODE_ENVIRONMENT = ( 1024 );
CONST DEBUG_PROCESS = ( 1 );
CONST DEBUG_ONLY_THIS_PROCESS = ( 2 );
CONST DETACHED_PROCESS = ( 8 );
CONST HIGH_PRIORITY_CLASS = ( 128 );
CONST IDLE_PRIORITY_CLASS = ( 64 );
CONST NORMAL_PRIORITY_CLASS = ( 32 );
CONST REALTIME_PRIORITY_CLASS = ( 256 );

{+// CreateService */ }
CONST SERVICE_ALL_ACCESS = ( $f01ff );
CONST SERVICE_CHANGE_CONFIG = ( 2 );
CONST SERVICE_ENUMERATE_DEPENDENTS = ( 8 );
CONST SERVICE_INTERROGATE = ( 128 );
CONST SERVICE_PAUSE_CONTINUE = ( 64 );
CONST SERVICE_QUERY_CONFIG = ( 1 );
CONST SERVICE_QUERY_STATUS = ( 4 );
CONST SERVICE_START = ( 16 );
CONST SERVICE_STOP = ( 32 );
CONST SERVICE_USER_DEFINED_CONTROL = ( 256 );
CONST DELETE_ = ( $10000 );   { !! inserted '_' to stop problems with Pascal's 'delete' }
CONST READ_CONTROL = ( $20000 );
CONST GENERIC_EXECUTE = ( $20000000 );
CONST SERVICE_ERROR_IGNORE = ( 0 );
CONST SERVICE_ERROR_NORMAL = ( 1 );
CONST SERVICE_ERROR_SEVERE = ( 2 );
CONST SERVICE_ERROR_CRITICAL = ( 3 );

{+// CreateTapePartition, WriteTapemark */ }
CONST TAPE_FIXED_PARTITIONS = ( 0 );
CONST TAPE_INITIATOR_PARTITIONS = ( $2 );
CONST TAPE_SELECT_PARTITIONS = ( $1 );
CONST TAPE_FILEMARKS = ( $1 );
CONST TAPE_LONG_FILEMARKS = ( $3 );
CONST TAPE_SETMARKS = ( 0 );
CONST TAPE_SHORT_FILEMARKS = ( $2 );

{+// CreateWindow */ }
CONST CW_USEDEFAULT = ( $80000000 );
CONST WS_BORDER = ( $800000 );
CONST WS_CAPTION = ( $c00000 );
CONST WS_CHILD = ( $40000000 );
CONST WS_CHILDWINDOW = ( $40000000 );
CONST WS_CLIPCHILDREN = ( $2000000 );
CONST WS_CLIPSIBLINGS = ( $4000000 );
CONST WS_DISABLED = ( $8000000 );
CONST WS_DLGFRAME = ( $400000 );
CONST WS_GROUP = ( $20000 );
CONST WS_HSCROLL = ( $100000 );
CONST WS_ICONIC = ( $20000000 );
CONST WS_MAXIMIZE = ( $1000000 );
CONST WS_MAXIMIZEBOX = ( $10000 );
CONST WS_MINIMIZE = ( $20000000 );
CONST WS_MINIMIZEBOX = ( $20000 );
CONST WS_OVERLAPPED = ( 0 );
CONST WS_OVERLAPPEDWINDOW = ( $cf0000 );
CONST WS_POPUP = ( $80000000 );
CONST WS_POPUPWINDOW = ( $80880000 );
CONST WS_SIZEBOX = ( $40000 );
CONST WS_SYSMENU = ( $80000 );
CONST WS_TABSTOP = ( $10000 );
CONST WS_THICKFRAME = ( $40000 );
CONST WS_TILED = ( 0 );
CONST WS_TILEDWINDOW = ( $cf0000 );
CONST WS_VISIBLE = ( $10000000 );
CONST WS_VSCROLL = ( $200000 );
CONST MDIS_ALLCHILDSTYLES = ( $1 );
CONST BS_3STATE = ( $5 );
CONST BS_AUTO3STATE = ( $6 );
CONST BS_AUTOCHECKBOX = ( $3 );
CONST BS_AUTORADIOBUTTON = ( $9 );
CONST BS_BITMAP = ( $80 );
CONST BS_BOTTOM = ( $800 );
CONST BS_CENTER = ( $300 );
CONST BS_CHECKBOX = ( $2 );
CONST BS_DEFPUSHBUTTON = ( $1 );
CONST BS_GROUPBOX = ( $7 );
CONST BS_ICON = ( $40 );
CONST BS_LEFT = ( $100 );
CONST BS_LEFTTEXT = ( $20 );
CONST BS_MULTILINE = ( $2000 );
CONST BS_NOTIFY = ( $4000 );
CONST BS_OWNERDRAW = ( $b );
CONST BS_PUSHBUTTON = ( 0 );
CONST BS_PUSHLIKE = ( $1000 );
CONST BS_RADIOBUTTON = ( $4 );
CONST BS_RIGHT = ( $200 );
CONST BS_RIGHTBUTTON = ( $20 );
CONST BS_TEXT = ( 0 );
CONST BS_TOP = ( $400 );
CONST BS_USERBUTTON = ( $8 );
CONST BS_VCENTER = ( $c00 );
CONST CBS_AUTOHSCROLL = ( $40 );
CONST CBS_DISABLENOSCROLL = ( $800 );
CONST CBS_DROPDOWN = ( $2 );
CONST CBS_DROPDOWNLIST = ( $3 );
CONST CBS_HASSTRINGS = ( $200 );
CONST CBS_LOWERCASE = ( $4000 );
CONST CBS_NOINTEGRALHEIGHT = ( $400 );
CONST CBS_OEMCONVERT = ( $80 );
CONST CBS_OWNERDRAWFIXED = ( $10 );
CONST CBS_OWNERDRAWVARIABLE = ( $20 );
CONST CBS_SIMPLE = ( $1 );
CONST CBS_SORT = ( $100 );
CONST CBS_UPPERCASE = ( $2000 );
CONST ES_AUTOHSCROLL = ( $80 );
CONST ES_AUTOVSCROLL = ( $40 );
CONST ES_CENTER = ( $1 );
CONST ES_LEFT = ( 0 );
CONST ES_LOWERCASE = ( $10 );
CONST ES_MULTILINE = ( $4 );
CONST ES_NOHIDESEL = ( $100 );
CONST ES_NUMBER = ( $2000 );
CONST ES_OEMCONVERT = ( $400 );
CONST ES_PASSWORD = ( $20 );
CONST ES_READONLY = ( $800 );
CONST ES_RIGHT = ( $2 );
CONST ES_UPPERCASE = ( $8 );
CONST ES_WANTRETURN = ( $1000 );
CONST LBS_DISABLENOSCROLL = ( $1000 );
CONST LBS_EXTENDEDSEL = ( $800 );
CONST LBS_HASSTRINGS = ( $40 );
CONST LBS_MULTICOLUMN = ( $200 );
CONST LBS_MULTIPLESEL = ( $8 );
CONST LBS_NODATA = ( $2000 );
CONST LBS_NOINTEGRALHEIGHT = ( $100 );
CONST LBS_NOREDRAW = ( $4 );
CONST LBS_NOSEL = ( $4000 );
CONST LBS_NOTIFY = ( $1 );
CONST LBS_OWNERDRAWFIXED = ( $10 );
CONST LBS_OWNERDRAWVARIABLE = ( $20 );
CONST LBS_SORT = ( $2 );
CONST LBS_STANDARD = ( $a00003 );
CONST LBS_USETABSTOPS = ( $80 );
CONST LBS_WANTKEYBOARDINPUT = ( $400 );
CONST SBS_BOTTOMALIGN = ( $4 );
CONST SBS_HORZ = ( 0 );
CONST SBS_LEFTALIGN = ( $2 );
CONST SBS_RIGHTALIGN = ( $4 );
CONST SBS_SIZEBOX = ( $8 );
CONST SBS_SIZEBOXBOTTOMRIGHTALIGN = ( $4 );
CONST SBS_SIZEBOXTOPLEFTALIGN = ( $2 );
CONST SBS_SIZEGRIP = ( $10 );
CONST SBS_TOPALIGN = ( $2 );
CONST SBS_VERT = ( $1 );
CONST SS_BITMAP = ( $e );
CONST SS_BLACKFRAME = ( $7 );
CONST SS_BLACKRECT = ( $4 );
CONST SS_CENTER = ( $1 );
CONST SS_CENTERIMAGE = ( $200 );
CONST SS_ENHMETAFILE = ( $f );
CONST SS_ETCHEDFRAME = ( $12 );
CONST SS_ETCHEDHORZ = ( $10 );
CONST SS_ETCHEDVERT = ( $11 );
CONST SS_GRAYFRAME = ( $8 );
CONST SS_GRAYRECT = ( $5 );
CONST SS_ICON = ( $3 );
CONST SS_LEFT = ( 0 );
CONST SS_LEFTNOWORDWRAP = ( $c );
CONST SS_NOPREFIX = ( $80 );
CONST SS_NOTIFY = ( $100 );
CONST SS_OWNERDRAW = ( $d );
CONST SS_REALSIZEIMAGE = ( $800 );
CONST SS_RIGHT = ( $2 );
CONST SS_RIGHTJUST = ( $400 );
CONST SS_SIMPLE = ( $b );
CONST SS_SUNKEN = ( $1000 );
CONST SS_USERITEM = ( $a );
CONST SS_WHITEFRAME = ( $9 );
CONST SS_WHITERECT = ( $6 );
CONST DS_3DLOOK = ( $4 );
CONST DS_ABSALIGN = ( $1 );
CONST DS_CENTER = ( $800 );
CONST DS_CENTERMOUSE = ( $1000 );
CONST DS_CONTEXTHELP = ( $2000 );
CONST DS_CONTROL = ( $400 );
CONST DS_FIXEDSYS = ( $8 );
CONST DS_LOCALEDIT = ( $20 );
CONST DS_MODALFRAME = ( $80 );
CONST DS_NOFAILCREATE = ( $10 );
CONST DS_NOIDLEMSG = ( $100 );
CONST DS_SETFONT = ( $40 );
CONST DS_SETFOREGROUND = ( $200 );
CONST DS_SYSMODAL = ( $2 );

{+// CreateWindowEx */ }
CONST WS_EX_ACCEPTFILES = ( $10 );
CONST WS_EX_APPWINDOW = ( $40000 );
CONST WS_EX_CLIENTEDGE = ( $200 );
CONST WS_EX_CONTEXTHELP = ( $400 );
CONST WS_EX_CONTROLPARENT = ( $10000 );
CONST WS_EX_DLGMODALFRAME = ( $1 );
CONST WS_EX_LEFT = ( 0 );
CONST WS_EX_LEFTSCROLLBAR = ( $4000 );
CONST WS_EX_LTRREADING = ( 0 );
CONST WS_EX_MDICHILD = ( $40 );
CONST WS_EX_NOPARENTNOTIFY = ( $4 );
CONST WS_EX_OVERLAPPEDWINDOW = ( $300 );
CONST WS_EX_PALETTEWINDOW = ( $188 );
CONST WS_EX_RIGHT = ( $1000 );
CONST WS_EX_RIGHTSCROLLBAR = ( 0 );
CONST WS_EX_RTLREADING = ( $2000 );
CONST WS_EX_STATICEDGE = ( $20000 );
CONST WS_EX_TOOLWINDOW = ( $80 );
CONST WS_EX_TOPMOST = ( $8 );
CONST WS_EX_TRANSPARENT = ( $20 );
CONST WS_EX_WINDOWEDGE = ( $100 );

{+// CreateWindowStation */ }
CONST WINSTA_ACCESSCLIPBOARD = ( $4 );
CONST WINSTA_ACCESSGLOBALATOMS = ( $20 );
CONST WINSTA_CREATEDESKTOP = ( $8 );
CONST WINSTA_ENUMDESKTOPS = ( $1 );
CONST WINSTA_ENUMERATE = ( $100 );
CONST WINSTA_EXITWINDOWS = ( $40 );
CONST WINSTA_READATTRIBUTES = ( $2 );
CONST WINSTA_READSCREEN = ( $200 );
CONST WINSTA_WRITEATTRIBUTES = ( $10 );

{+// DdeCallback */ }

{+// DdeClientTransaction */ }

{+// DdeEnableCallback */ }

{+// DdeGetLastError */ }

{+// DdeInitialize */ }

{+// DdeNameService */ }

{+// DebugProc */ }
CONST WH_CALLWNDPROC = ( 4 );
CONST WH_CALLWNDPROCRET = ( 12 );
CONST WH_CBT = ( 5 );
CONST WH_DEBUG = ( 9 );
CONST WH_GETMESSAGE = ( 3 );
CONST WH_JOURNALPLAYBACK = ( 1 );
CONST WH_JOURNALRECORD = ( 0 );
CONST WH_KEYBOARD = ( 2 );
CONST WH_MOUSE = ( 7 );
CONST WH_MSGFILTER = (  - 1 );
CONST WH_SHELL = ( 10 );
CONST WH_SYSMSGFILTER = ( 6 );
CONST WH_FOREGROUNDIDLE = ( 11 );

{+// DefineDosDevice */ }
CONST DDD_RAW_TARGET_PATH = ( 1 );
CONST DDD_REMOVE_DEFINITION = ( 2 );
CONST DDD_EXACT_MATCH_ON_REMOVE = ( 4 );

{+// DeviceCapbilities */ }
CONST DC_BINNAMES = ( 12 );
CONST DC_BINS = ( 6 );
CONST DC_COPIES = ( 18 );
CONST DC_DRIVER = ( 11 );
CONST DC_DATATYPE_PRODUCED = ( 21 );
CONST DC_DUPLEX = ( 7 );
CONST DC_EMF_COMPLIANT = ( 20 );
CONST DC_ENUMRESOLUTIONS = ( 13 );
CONST DC_EXTRA = ( 9 );
CONST DC_FIELDS = ( 1 );
CONST DC_FILEDEPENDENCIES = ( 14 );
CONST DC_MAXEXTENT = ( 5 );
CONST DC_MINEXTENT = ( 4 );
CONST DC_ORIENTATION = ( 17 );
CONST DC_PAPERNAMES = ( 16 );
CONST DC_PAPERS = ( 2 );
CONST DC_PAPERSIZE = ( 3 );
CONST DC_SIZE = ( 8 );
CONST DC_TRUETYPE = ( 15 );
CONST DCTT_BITMAP = ( $1 );
CONST DCTT_DOWNLOAD = ( $2 );
CONST DCTT_SUBDEV = ( $4 );
CONST DC_VERSION = ( 10 );
CONST DC_BINADJUST = ( 19 );

{+// DeviceIoControl */ }

{+// DlgDirList */ }
CONST DDL_ARCHIVE = ( 32 );
CONST DDL_DIRECTORY = ( 16 );
CONST DDL_DRIVES = ( 16384 );
CONST DDL_EXCLUSIVE = ( 32768 );
CONST DDL_HIDDEN = ( 2 );
CONST DDL_READONLY = ( 1 );
CONST DDL_READWRITE = ( 0 );
CONST DDL_SYSTEM = ( 4 );
CONST DDL_POSTMSGS = ( 8192 );

{+// DllEntryPoint */ }
CONST DLL_PROCESS_ATTACH = ( 1 );
CONST DLL_THREAD_ATTACH = ( 2 );
CONST DLL_PROCESS_DETACH = ( 0 );
CONST DLL_THREAD_DETACH = ( 3 );

{+// DocumentProperties */ }
CONST DM_IN_BUFFER = ( 8 );
CONST DM_MODIFY = ( 8 );
CONST DM_IN_PROMPT = ( 4 );
CONST DM_PROMPT = ( 4 );
CONST DM_OUT_BUFFER = ( 2 );
CONST DM_COPY = ( 2 );
CONST DM_UPDATE = ( 1 );

{+// DrawAnimatedRects */ }
CONST IDANI_OPEN = ( 1 );
CONST IDANI_CLOSE = ( 2 );

{+// DrawCaption */ }
CONST DC_ACTIVE = ( 1 );
CONST DC_SMALLCAP = ( 2 );

{+// DrawEdge */ }
CONST BDR_RAISEDINNER = ( 4 );
CONST BDR_SUNKENINNER = ( 8 );
CONST BDR_RAISEDOUTER = ( 1 );
CONST BDR_SUNKENOUTER = ( 1 );
CONST EDGE_BUMP = ( 9 );
CONST EDGE_ETCHED = ( 6 );
CONST EDGE_RAISED = ( 5 );
CONST EDGE_SUNKEN = ( 10 );
CONST BF_ADJUST = ( 8192 );
CONST BF_BOTTOM = ( 8 );
CONST BF_BOTTOMLEFT = ( 9 );
CONST BF_BOTTOMRIGHT = ( 12 );
CONST BF_DIAGONAL = ( 16 );
CONST BF_DIAGONAL_ENDBOTTOMLEFT = ( 25 );
CONST BF_DIAGONAL_ENDBOTTOMRIGHT = ( 28 );
CONST BF_DIAGONAL_ENDTOPLEFT = ( 19 );
CONST BF_DIAGONAL_ENDTOPRIGHT = ( 22 );
CONST BF_FLAT = ( 16384 );
CONST BF_LEFT = ( 1 );
CONST BF_MIDDLE = ( 2048 );
CONST BF_MONO = ( 32768 );
CONST BF_RECT = ( 15 );
CONST BF_RIGHT = ( 4 );
CONST BF_SOFT = ( 4096 );
CONST BF_TOP = ( 2 );
CONST BF_TOPLEFT = ( 3 );
CONST BF_TOPRIGHT = ( 6 );

{+// DrawFrameControl */ }
CONST DFC_BUTTON = ( 4 );
CONST DFC_CAPTION = ( 1 );
CONST DFC_MENU = ( 2 );
CONST DFC_SCROLL = ( 3 );
CONST DFCS_BUTTON3STATE = ( 8 );
CONST DFCS_BUTTONCHECK = ( 0 );
CONST DFCS_BUTTONPUSH = ( 16 );
CONST DFCS_BUTTONRADIO = ( 4 );
CONST DFCS_BUTTONRADIOIMAGE = ( 1 );
CONST DFCS_BUTTONRADIOMASK = ( 2 );
CONST DFCS_CAPTIONCLOSE = ( 0 );
CONST DFCS_CAPTIONHELP = ( 4 );
CONST DFCS_CAPTIONMAX = ( 2 );
CONST DFCS_CAPTIONMIN = ( 1 );
CONST DFCS_CAPTIONRESTORE = ( 3 );
CONST DFCS_MENUARROW = ( 0 );
CONST DFCS_MENUBULLET = ( 2 );
CONST DFCS_MENUCHECK = ( 1 );
CONST DFCS_SCROLLCOMBOBOX = ( 5 );
CONST DFCS_SCROLLDOWN = ( 1 );
CONST DFCS_SCROLLLEFT = ( 2 );
CONST DFCS_SCROLLRIGHT = ( 3 );
CONST DFCS_SCROLLSIZEGRIP = ( 8 );
CONST DFCS_SCROLLUP = ( 0 );
CONST DFCS_ADJUSTRECT = ( 8192 );
CONST DFCS_CHECKED = ( 1024 );
CONST DFCS_FLAT = ( 16384 );
CONST DFCS_INACTIVE = ( 256 );
CONST DFCS_MONO = ( 32768 );
CONST DFCS_PUSHED = ( 512 );

{+// DrawIconEx */ }
CONST DI_COMPAT = ( 4 );
CONST DI_DEFAULTSIZE = ( 8 );
CONST DI_IMAGE = ( 2 );
CONST DI_MASK = ( 1 );
CONST DI_NORMAL = ( 3 );

{+// DrawState */ }
CONST DST_BITMAP = ( 4 );
CONST DST_COMPLEX = ( 0 );
CONST DST_ICON = ( 3 );
CONST DST_PREFIXTEXT = ( 2 );
CONST DST_TEXT = ( 1 );
CONST DSS_NORMAL = ( 0 );
CONST DSS_UNION = ( 16 );
CONST DSS_DISABLED = ( 32 );
CONST DSS_MONO = ( 128 );

{+// DrawStatusText */ }
CONST SBT_NOBORDERS = ( 256 );
CONST SBT_OWNERDRAW = ( 4096 );
CONST SBT_POPOUT = ( 512 );
CONST SBT_RTLREADING = ( 1024 );

{+// DrawText, DrawTextEx */ }
CONST DT_BOTTOM = ( 8 );
CONST DT_CALCRECT = ( 1024 );
CONST DT_CENTER = ( 1 );
CONST DT_EDITCONTROL = ( 8192 );
CONST DT_END_ELLIPSIS = ( 32768 );
CONST DT_PATH_ELLIPSIS = ( 16384 );
CONST DT_EXPANDTABS = ( 64 );
CONST DT_EXTERNALLEADING = ( 512 );
CONST DT_LEFT = ( 0 );
CONST DT_MODIFYSTRING = ( 65536 );
CONST DT_NOCLIP = ( 256 );
CONST DT_NOPREFIX = ( 2048 );
CONST DT_RIGHT = ( 2 );
CONST DT_RTLREADING = ( 131072 );
CONST DT_SINGLELINE = ( 32 );
CONST DT_TABSTOP = ( 128 );
CONST DT_TOP = ( 0 );
CONST DT_VCENTER = ( 4 );
CONST DT_WORDBREAK = ( 16 );
CONST DT_INTERNAL = ( 4096 );

{+// DuplicateHandle, MapViewOfFile */ }
CONST DUPLICATE_CLOSE_SOURCE = ( 1 );
CONST DUPLICATE_SAME_ACCESS = ( 2 );
CONST FILE_MAP_ALL_ACCESS = ( $f001f );
CONST FILE_MAP_READ = ( 4 );
CONST FILE_MAP_WRITE = ( 2 );
CONST FILE_MAP_COPY = ( 1 );
CONST MUTEX_ALL_ACCESS = ( $1f0001 );
CONST MUTEX_MODIFY_STATE = ( 1 );
CONST SYNCHRONIZE = ( $100000 );
CONST SEMAPHORE_ALL_ACCESS = ( $1f0003 );
CONST SEMAPHORE_MODIFY_STATE = ( 2 );
CONST EVENT_ALL_ACCESS = ( $1f0003 );
CONST EVENT_MODIFY_STATE = ( 2 );
CONST KEY_ALL_ACCESS = ( $f003f );
CONST KEY_CREATE_LINK = ( 32 );
CONST KEY_CREATE_SUB_KEY = ( 4 );
CONST KEY_ENUMERATE_SUB_KEYS = ( 8 );
CONST KEY_EXECUTE = ( $20019 );
CONST KEY_NOTIFY = ( 16 );
CONST KEY_QUERY_VALUE = ( 1 );
CONST KEY_READ = ( $20019 );
CONST KEY_SET_VALUE = ( 2 );
CONST KEY_WRITE = ( $20006 );
CONST PROCESS_ALL_ACCESS = ( $1f0fff );
CONST PROCESS_CREATE_PROCESS = ( 128 );
CONST PROCESS_CREATE_THREAD = ( 2 );
CONST PROCESS_DUP_HANDLE = ( 64 );
CONST PROCESS_QUERY_INFORMATION = ( 1024 );
CONST PROCESS_SET_INFORMATION = ( 512 );
CONST PROCESS_TERMINATE = ( 1 );
CONST PROCESS_VM_OPERATION = ( 8 );
CONST PROCESS_VM_READ = ( 16 );
CONST PROCESS_VM_WRITE = ( 32 );
CONST THREAD_ALL_ACCESS = ( $1f03ff );
CONST THREAD_DIRECT_IMPERSONATION = ( 512 );
CONST THREAD_GET_CONTEXT = ( 8 );
CONST THREAD_IMPERSONATE = ( 256 );
CONST THREAD_QUERY_INFORMATION = ( 64 );
CONST THREAD_SET_CONTEXT = ( 16 );
CONST THREAD_SET_INFORMATION = ( 32 );
CONST THREAD_SET_THREAD_TOKEN = ( 128 );
CONST THREAD_SUSPEND_RESUME = ( 2 );
CONST THREAD_TERMINATE = ( 1 );

{+// EditWordBreakProc */ }
CONST WB_ISDELIMITER = ( 2 );
CONST WB_LEFT = ( 0 );
CONST WB_RIGHT = ( 1 );

{+// EnableScrollBar */ }
CONST SB_BOTH = ( 3 );
CONST SB_CTL = ( 2 );
CONST SB_HORZ = ( 0 );
CONST SB_VERT = ( 1 );
CONST ESB_DISABLE_BOTH = ( 3 );
CONST ESB_DISABLE_DOWN = ( 2 );
CONST ESB_DISABLE_LEFT = ( 1 );
CONST ESB_DISABLE_LTUP = ( 1 );
CONST ESB_DISABLE_RIGHT = ( 2 );
CONST ESB_DISABLE_RTDN = ( 2 );
CONST ESB_DISABLE_UP = ( 1 );
CONST ESB_ENABLE_BOTH = ( 0 );

{+// Scroll Bar notifications*/ }
CONST SB_LINEUP = ( 0 );
CONST SB_LINEDOWN = ( 1 );
CONST SB_LINELEFT = ( 0 );
CONST SB_LINERIGHT = ( 1 );
CONST SB_PAGEUP = ( 2 );
CONST SB_PAGEDOWN = ( 3 );
CONST SB_PAGELEFT = ( 2 );
CONST SB_PAGERIGHT = ( 3 );
CONST SB_THUMBPOSITION = ( 4 );
CONST SB_THUMBTRACK = ( 5 );
CONST SB_ENDSCROLL = ( 8 );
CONST SB_LEFT = ( 6 );
CONST SB_RIGHT = ( 7 );
CONST SB_BOTTOM = ( 7 );
CONST SB_TOP = ( 6 );

{+// EnumCalendarInfo */ }
CONST ENUM_ALL_CALENDARS = (  - 1 );

{+// EnumDateFormats */ }
CONST DATE_SHORTDATE = ( 1 );
CONST DATE_LONGDATE = ( 2 );

{+// EnumDependentServices */ }
CONST SERVICE_ACTIVE = ( 1 );
CONST SERVICE_INACTIVE = ( 2 );

{+// EnumFontFamExProc */ }
CONST DEVICE_FONTTYPE = ( 2 );
CONST RASTER_FONTTYPE = ( 1 );
CONST TRUETYPE_FONTTYPE = ( 4 );

{+// EnumObjects, GetCurrentObject, GetObjectType */ }
CONST OBJ_BRUSH = ( 2 );
CONST OBJ_PEN = ( 1 );
CONST OBJ_PAL = ( 5 );
CONST OBJ_FONT = ( 6 );
CONST OBJ_BITMAP = ( 7 );
CONST OBJ_EXTPEN = ( 11 );
CONST OBJ_REGION = ( 8 );
CONST OBJ_DC = ( 3 );
CONST OBJ_MEMDC = ( 10 );
CONST OBJ_METAFILE = ( 9 );
CONST OBJ_METADC = ( 4 );
CONST OBJ_ENHMETAFILE = ( 13 );
CONST OBJ_ENHMETADC = ( 12 );

{+// EnumPrinters */ }

{+// EnumProtocols */ }

{+// EnumResLangProc */ }
CONST RT_ACCELERATOR = ( MAKEINTRESOURCE ( 9 ) );
CONST RT_BITMAP = ( MAKEINTRESOURCE ( 2 ) );
CONST RT_DIALOG = ( MAKEINTRESOURCE ( 5 ) );
CONST RT_FONT = ( MAKEINTRESOURCE ( 8 ) );
CONST RT_FONTDIR = ( MAKEINTRESOURCE ( 7 ) );
CONST RT_MENU = ( MAKEINTRESOURCE ( 4 ) );
CONST RT_RCDATA = ( MAKEINTRESOURCE ( 10 ) );
CONST RT_STRING = ( MAKEINTRESOURCE ( 6 ) );
CONST RT_MESSAGETABLE = ( MAKEINTRESOURCE ( 11 ) );
CONST RT_CURSOR = ( MAKEINTRESOURCE ( 1 ) );
CONST RT_GROUP_CURSOR = ( MAKEINTRESOURCE ( 12 ) );
CONST RT_ICON = ( MAKEINTRESOURCE ( 3 ) );
CONST RT_GROUP_ICON = ( MAKEINTRESOURCE ( 13 ) );
CONST RT_VERSION = ( MAKEINTRESOURCE ( 16 ) );

{+// EnumServicesStatus */ }
CONST SERVICE_WIN32 = ( 48 );
CONST SERVICE_DRIVER = ( 11 );

{+// EnumSystemCodePages */ }
CONST CP_INSTALLED = ( 1 );
CONST CP_SUPPORTED = ( 2 );

{+// EnumSystemLocales */ }
CONST LCID_INSTALLED = ( 1 );
CONST LCID_SUPPORTED = ( 2 );

{+// EraseTape */ }
CONST TAPE_ERASE_LONG = ( $1 );
CONST TAPE_ERASE_SHORT = ( 0 );

{+// Escape */ }
CONST SP_ERROR = (  - 1 );
CONST SP_OUTOFDISK = (  - 4 );
CONST SP_OUTOFMEMORY = (  - 5 );
CONST SP_USERABORT = (  - 3 );
CONST PHYSICALWIDTH = ( 110 );
CONST PHYSICALHEIGHT = ( 111 );
CONST PHYSICALOFFSETX = ( 112 );
CONST PHYSICALOFFSETY = ( 113 );
CONST SCALINGFACTORX = ( 114 );
CONST SCALINGFACTORY = ( 115 );
CONST QUERYESCSUPPORT = ( 8 );
{Const ABORTDOC = (2);
Const ENDDOC = (11);}
CONST GETPHYSPAGESIZE = ( 12 );
CONST GETPRINTINGOFFSET = ( 13 );
CONST GETSCALINGFACTOR = ( 14 );
CONST NEWFRAME = ( 1 );
CONST NEXTBAND = ( 3 );
CONST PASSTHROUGH = ( 19 );
{Const SETABORTPROC = (9);
Const STARTDOC = (10);}

{+// EscapeCommFunction */ }
CONST CLRDTR = ( 6 );
CONST CLRRTS = ( 4 );
CONST SETDTR = ( 5 );
CONST SETRTS = ( 3 );
CONST SETXOFF = ( 1 );
CONST SETXON = ( 2 );
CONST SETBREAK = ( 8 );
CONST CLRBREAK = ( 9 );

{+// ExitWindowsEx */ }
CONST EWX_FORCE = ( 4 );
CONST EWX_LOGOFF = ( 0 );
CONST EWX_POWEROFF = ( 8 );
CONST EWX_REBOOT = ( 2 );
CONST EWX_SHUTDOWN = ( 1 );

{+// ExtFloodFill */ }
CONST FLOODFILLBORDER = ( 0 );
CONST FLOODFILLSURFACE = ( 1 );

{+// ExtTextOut */ }
CONST ETO_CLIPPED = ( 4 );
CONST ETO_GLYPH_INDEX = ( 16 );
CONST ETO_OPAQUE = ( 2 );
CONST ETO_RTLREADING = ( 128 );

{+// FillConsoleOutputAttribute */ }
CONST FOREGROUND_BLUE = ( 1 );
CONST FOREGROUND_GREEN = ( 2 );
CONST FOREGROUND_RED = ( 4 );
CONST FOREGROUND_INTENSITY = ( 8 );
CONST BACKGROUND_BLUE = ( 16 );
CONST BACKGROUND_GREEN = ( 32 );
CONST BACKGROUND_RED = ( 64 );
CONST BACKGROUND_INTENSITY = ( 128 );

{+// FindFirstChangeNotification */ }
CONST FILE_NOTIFY_CHANGE_FILE_NAME = ( 1 );
CONST FILE_NOTIFY_CHANGE_DIR_NAME = ( 2 );
CONST FILE_NOTIFY_CHANGE_ATTRIBUTES = ( 4 );
CONST FILE_NOTIFY_CHANGE_SIZE = ( 8 );
CONST FILE_NOTIFY_CHANGE_LAST_WRITE = ( 16 );
CONST FILE_NOTIFY_CHANGE_SECURITY = ( 256 );

{+// FindFirstPrinterChangeNotification */ }

{+// FindNextPrinterNotification */ }

{+// FMExtensionProc */ }

{+// FoldString */ }
CONST MAP_FOLDCZONE = ( 16 );
CONST MAP_FOLDDIGITS = ( 128 );
CONST MAP_PRECOMPOSED = ( 32 );
CONST MAP_COMPOSITE = ( 64 );

{+// ForegroundIdleProc */ }
CONST HC_ACTION = ( 0 );

{+// FormatMessage */ }
CONST FORMAT_MESSAGE_ALLOCATE_BUFFER = ( 256 );
CONST FORMAT_MESSAGE_IGNORE_INSERTS = ( 512 );
CONST FORMAT_MESSAGE_FROM_STRING = ( 1024 );
CONST FORMAT_MESSAGE_FROM_HMODULE = ( 2048 );
CONST FORMAT_MESSAGE_FROM_SYSTEM = ( 4096 );
CONST FORMAT_MESSAGE_ARGUMENT_ARRAY = ( 8192 );
CONST FORMAT_MESSAGE_MAX_WIDTH_MASK = ( 255 );

{+// GdiComment */ }
CONST GDICOMMENT_WINDOWS_METAFILE = (  - 2147483647 );
CONST GDICOMMENT_BEGINGROUP = ( 2 );
CONST GDICOMMENT_ENDGROUP = ( 3 );
CONST GDICOMMENT_MULTIFORMATS = ( 1073741828 );
CONST GDICOMMENT_IDENTIFIER = ( 1128875079 );

{+// GenerateConsoleCtrlEvent, HandlerRoutine */ }
CONST CTRL_C_EVENT = ( 0 );
CONST CTRL_BREAK_EVENT = ( 1 );
CONST CTRL_CLOSE_EVENT = ( 2 );
CONST CTRL_LOGOFF_EVENT = ( 5 );
CONST CTRL_SHUTDOWN_EVENT = ( 6 );

{+// GetAddressByName */ }

{+// GetArcDirection */ }
CONST AD_COUNTERCLOCKWISE = ( 1 );
CONST AD_CLOCKWISE = ( 2 );

{+// GetBinaryTypes */ }
CONST SCS_32BIT_BINARY = ( 0 );
CONST SCS_DOS_BINARY = ( 1 );
CONST SCS_OS216_BINARY = ( 5 );
CONST SCS_PIF_BINARY = ( 3 );
CONST SCS_POSIX_BINARY = ( 4 );
CONST SCS_WOW_BINARY = ( 2 );

{+// GetBoundsRect, SetBoundsRect */ }
CONST DCB_DISABLE = ( 8 );
CONST DCB_ENABLE = ( 4 );
CONST DCB_RESET = ( 1 );
CONST DCB_SET = ( 3 );
CONST DCB_ACCUMULATE = ( 2 );

{+// GetCharacterPlacement, GetFontLanguageInfo */ }
CONST GCP_DBCS = ( 1 );
CONST GCP_ERROR = ( $8000 );
CONST GCP_CLASSIN = ( $80000 );
CONST GCP_DIACRITIC = ( 256 );
CONST GCP_DISPLAYZWG = ( $400000 );
CONST GCP_GLYPHSHAPE = ( 16 );
CONST GCP_JUSTIFY = ( $10000 );
CONST GCP_JUSTIFYIN = ( $200000 );
CONST GCP_KASHIDA = ( 1024 );
CONST GCP_LIGATE = ( 32 );
CONST GCP_MAXEXTENT = ( $100000 );
CONST GCP_NEUTRALOVERRIDE = ( $2000000 );
CONST GCP_NUMERICOVERRIDE = ( $1000000 );
CONST GCP_NUMERICSLATIN = ( $4000000 );
CONST GCP_NUMERICSLOCAL = ( $8000000 );
CONST GCP_REORDER = ( 2 );
CONST GCP_SYMSWAPOFF = ( $800000 );
CONST GCP_USEKERNING = ( 8 );
CONST FLI_GLYPHS = ( $40000 );
CONST FLI_MASK = ( $103b );

{+// GetClassLong, GetClassWord */ }
CONST GCW_ATOM = (  - 32 );
CONST GCL_CBCLSEXTRA = (  - 20 );
CONST GCL_CBWNDEXTRA = (  - 18 );
CONST GCL_HBRBACKGROUND = (  - 10 );
CONST GCL_HCURSOR = (  - 12 );
CONST GCL_HICON = (  - 14 );
CONST GCL_HICONSM = (  - 34 );
CONST GCL_HMODULE = (  - 16 );
CONST GCL_MENUNAME = (  - 8 );
CONST GCL_STYLE = (  - 26 );
CONST GCL_WNDPROC = (  - 24 );

{+// GetClipboardFormat, SetClipboardData */ }
CONST CF_BITMAP = ( 2 );
CONST CF_DIB = ( 8 );
CONST CF_PALETTE = ( 9 );
CONST CF_ENHMETAFILE = ( 14 );
CONST CF_METAFILEPICT = ( 3 );
CONST CF_OEMTEXT = ( 7 );
CONST CF_TEXT = ( 1 );
CONST CF_UNICODETEXT = ( 13 );
CONST CF_DIF = ( 5 );
CONST CF_DSPBITMAP = ( 130 );
CONST CF_DSPENHMETAFILE = ( 142 );
CONST CF_DSPMETAFILEPICT = ( 131 );
CONST CF_DSPTEXT = ( 129 );
CONST CF_GDIOBJFIRST = ( 768 );
CONST CF_GDIOBJLAST = ( 1023 );
CONST CF_HDROP = ( 15 );
CONST CF_LOCALE = ( 16 );
CONST CF_OWNERDISPLAY = ( 128 );
CONST CF_PENDATA = ( 10 );
CONST CF_PRIVATEFIRST = ( 512 );
CONST CF_PRIVATELAST = ( 767 );
CONST CF_RIFF = ( 11 );
CONST CF_SYLK = ( 4 );
CONST CF_WAVE = ( 12 );
CONST CF_TIFF = ( 6 );

{+// GetCommMask */ }
CONST EV_BREAK = ( 64 );
CONST EV_CTS = ( 8 );
CONST EV_DSR = ( 16 );
CONST EV_ERR = ( 128 );
CONST EV_EVENT1 = ( 2048 );
CONST EV_EVENT2 = ( 4096 );
CONST EV_PERR = ( 512 );
CONST EV_RING = ( 256 );
CONST EV_RLSD = ( 32 );
CONST EV_RX80FULL = ( 1024 );
CONST EV_RXCHAR = ( 1 );
CONST EV_RXFLAG = ( 2 );
CONST EV_TXEMPTY = ( 4 );

{+// GetCommModemStatus */ }
CONST MS_CTS_ON = ( $10 );
CONST MS_DSR_ON = ( $20 );
CONST MS_RING_ON = ( $40 );
CONST MS_RLSD_ON = ( $80 );

{+// GetComputerName */ }
CONST MAX_COMPUTERNAME_LENGTH = ( 15 );

{+// GetConsoleMode */ }
CONST ENABLE_LINE_INPUT = ( 2 );
CONST ENABLE_ECHO_INPUT = ( 4 );
CONST ENABLE_PROCESSED_INPUT = ( 1 );
CONST ENABLE_WINDOW_INPUT = ( 8 );
CONST ENABLE_MOUSE_INPUT = ( 16 );
CONST ENABLE_PROCESSED_OUTPUT = ( 1 );
CONST ENABLE_WRAP_AT_EOL_OUTPUT = ( 2 );

{+// GetCPInfo */ }
CONST CP_ACP = ( 0 );
CONST CP_MACCP = ( 2 );
CONST CP_OEMCP = ( 1 );

{+// GetDateFormat */ }
{Const DATE_SHORTDATE = (1);
Const DATE_LONGDATE = (2);}
CONST DATE_USE_ALT_CALENDAR = ( 4 );

{+// GetDCEx */ }
CONST DCX_WINDOW = ( $1 );
CONST DCX_CACHE = ( $2 );
CONST DCX_PARENTCLIP = ( $20 );
CONST DCX_CLIPSIBLINGS = ( $10 );
CONST DCX_CLIPCHILDREN = ( $8 );
CONST DCX_NORESETATTRS = ( $4 );
CONST DCX_LOCKWINDOWUPDATE = ( $400 );
CONST DCX_EXCLUDERGN = ( $40 );
CONST DCX_INTERSECTRGN = ( $80 );
CONST DCX_VALIDATE = ( $200000 );

{+// GetDeviceCaps */ }
CONST DRIVERVERSION = ( 0 );
CONST TECHNOLOGY = ( 2 );
CONST DT_PLOTTER = ( 0 );
CONST DT_RASDISPLAY = ( 1 );
CONST DT_RASPRINTER = ( 2 );
CONST DT_RASCAMERA = ( 3 );
CONST DT_CHARSTREAM = ( 4 );
CONST DT_METAFILE = ( 5 );
CONST DT_DISPFILE = ( 6 );
CONST HORZSIZE = ( 4 );
CONST VERTSIZE = ( 6 );
CONST HORZRES = ( 8 );
CONST VERTRES = ( 10 );
CONST LOGPIXELSX = ( 88 );
CONST LOGPIXELSY = ( 90 );
CONST BITSPIXEL = ( 12 );
CONST PLANES = ( 14 );
CONST NUMBRUSHES = ( 16 );
CONST NUMPENS = ( 18 );
CONST NUMFONTS = ( 22 );
CONST NUMCOLORS = ( 24 );
CONST ASPECTX = ( 40 );
CONST ASPECTY = ( 42 );
CONST ASPECTXY = ( 44 );
CONST PDEVICESIZE = ( 26 );
CONST CLIPCAPS = ( 36 );
CONST SIZEPALETTE = ( 104 );
CONST NUMRESERVED = ( 106 );
CONST COLORRES = ( 108 );
{Const PHYSICALWIDTH = (110);
Const PHYSICALHEIGHT = (111);
Const PHYSICALOFFSETX = (112);
Const PHYSICALOFFSETY = (113);
Const SCALINGFACTORX = (114);
Const SCALINGFACTORY = (115);}
CONST VREFRESH = ( 116 );
CONST DESKTOPHORZRES = ( 118 );
CONST DESKTOPVERTRES = ( 117 );
CONST BLTALIGNMENT = ( 119 );
CONST RASTERCAPS = ( 38 );
CONST RC_BANDING = ( 2 );
CONST RC_BITBLT = ( 1 );
CONST RC_BITMAP64 = ( 8 );
CONST RC_DI_BITMAP = ( 128 );
CONST RC_DIBTODEV = ( 512 );
CONST RC_FLOODFILL = ( 4096 );
CONST RC_GDI20_OUTPUT = ( 16 );
CONST RC_PALETTE = ( 256 );
CONST RC_SCALING = ( 4 );
CONST RC_STRETCHBLT = ( 2048 );
CONST RC_STRETCHDIB = ( 8192 );
CONST CURVECAPS = ( 28 );
CONST CC_NONE = ( 0 );
CONST CC_CIRCLES = ( 1 );
CONST CC_PIE = ( 2 );
CONST CC_CHORD = ( 4 );
CONST CC_ELLIPSES = ( 8 );
CONST CC_WIDE = ( 16 );
CONST CC_STYLED = ( 32 );
CONST CC_WIDESTYLED = ( 64 );
CONST CC_INTERIORS = ( 128 );
CONST CC_ROUNDRECT = ( 256 );
CONST LINECAPS = ( 30 );
CONST LC_NONE = ( 0 );
CONST LC_POLYLINE = ( 2 );
CONST LC_MARKER = ( 4 );
CONST LC_POLYMARKER = ( 8 );
CONST LC_WIDE = ( 16 );
CONST LC_STYLED = ( 32 );
CONST LC_WIDESTYLED = ( 64 );
CONST LC_INTERIORS = ( 128 );
CONST POLYGONALCAPS = ( 32 );
CONST PC_NONE = ( 0 );
CONST PC_POLYGON = ( 1 );
CONST PC_RECTANGLE = ( 2 );
CONST PC_WINDPOLYGON = ( 4 );
CONST PC_SCANLINE = ( 8 );
CONST PC_WIDE = ( 16 );
CONST PC_STYLED = ( 32 );
CONST PC_WIDESTYLED = ( 64 );
CONST PC_INTERIORS = ( 128 );
CONST TEXTCAPS = ( 34 );
CONST TC_OP_CHARACTER = ( 1 );
CONST TC_OP_STROKE = ( 2 );
CONST TC_CP_STROKE = ( 4 );
CONST TC_CR_90 = ( 8 );
CONST TC_CR_ANY = ( 16 );
CONST TC_SF_X_YINDEP = ( 32 );
CONST TC_SA_DOUBLE = ( 64 );
CONST TC_SA_INTEGER = ( 128 );
CONST TC_SA_CONTIN = ( 256 );
CONST TC_EA_DOUBLE = ( 512 );
CONST TC_IA_ABLE = ( 1024 );
CONST TC_UA_ABLE = ( 2048 );
CONST TC_SO_ABLE = ( 4096 );
CONST TC_RA_ABLE = ( 8192 );
CONST TC_VA_ABLE = ( 16384 );
CONST TC_RESERVED = ( 32768 );
CONST TC_SCROLLBLT = ( 65536 );
CONST PC_PATHS = ( 512 );

{+// GetDriveType */ }
CONST DRIVE_REMOVABLE = ( 2 );
CONST DRIVE_FIXED = ( 3 );
CONST DRIVE_REMOTE = ( 4 );
CONST DRIVE_CDROM = ( 5 );
CONST DRIVE_RAMDISK = ( 6 );
CONST DRIVE_UNKNOWN = ( 0 );
CONST DRIVE_NO_ROOT_DIR = ( 1 );

{+// GetExceptionCode */ }
CONST EXCEPTION_ACCESS_VIOLATION = ( $c0000005 );
CONST EXCEPTION_BREAKPOINT = ( $80000003 );
CONST EXCEPTION_DATATYPE_MISALIGNMENT = ( $80000002 );
CONST EXCEPTION_SINGLE_STEP = ( $80000004 );
CONST EXCEPTION_ARRAY_BOUNDS_EXCEEDED = ( $c000008c );
CONST EXCEPTION_FLT_DENORMAL_OPERAND = ( $c000008d );
CONST EXCEPTION_FLT_DIVIDE_BY_ZERO = ( $c000008e );
CONST EXCEPTION_FLT_INEXACT_RESULT = ( $c000008f );
CONST EXCEPTION_FLT_INVALID_OPERATION = ( $c0000090 );
CONST EXCEPTION_FLT_OVERFLOW = ( $c0000091 );
CONST EXCEPTION_FLT_STACK_CHECK = ( $c0000092 );
CONST EXCEPTION_FLT_UNDERFLOW = ( $c0000093 );
CONST EXCEPTION_INT_DIVIDE_BY_ZERO = ( $c0000094 );
CONST EXCEPTION_INT_OVERFLOW = ( $c0000095 );
CONST EXCEPTION_PRIV_INSTRUCTION = ( $c0000096 );
CONST EXCEPTION_NONCONTINUABLE_EXCEPTION = ( $c0000025 );
CONST EXCEPTION_NONCONTINUABLE = ( $1 );
CONST EXCEPTION_STACK_OVERFLOW = ( $c00000fd );
CONST EXCEPTION_INVALID_DISPOSITION = ( $c0000026 );

{+// GetFileType */ }
CONST FILE_TYPE_UNKNOWN = ( 0 );
CONST FILE_TYPE_DISK = ( 1 );
CONST FILE_TYPE_CHAR = ( 2 );
CONST FILE_TYPE_PIPE = ( 3 );

{+// GetGlyphOutline */ }
CONST GGO_BITMAP = ( 1 );
CONST GGO_NATIVE = ( 2 );
CONST GGO_METRICS = ( 0 );
CONST GGO_GRAY2_BITMAP = ( 4 );
CONST GGO_GRAY4_BITMAP = ( 5 );
CONST GGO_GRAY8_BITMAP = ( 6 );
CONST GDI_ERROR = ( $ffffffff );

{+// GetGraphicsMode */ }
CONST GM_COMPATIBLE = ( 1 );
CONST GM_ADVANCED = ( 2 );

{+// GetHandleInformation */ }
CONST HANDLE_FLAG_INHERIT = ( 1 );
CONST HANDLE_FLAG_PROTECT_FROM_CLOSE = ( 2 );

{+// GetIconInfo */ }
CONST IDC_ARROW = ( MAKEINTRESOURCE ( 32512 ) );
CONST IDC_IBEAM = ( MAKEINTRESOURCE ( 32513 ) );
CONST IDC_WAIT = ( MAKEINTRESOURCE ( 32514 ) );
CONST IDC_CROSS = ( MAKEINTRESOURCE ( 32515 ) );
CONST IDC_UPARROW = ( MAKEINTRESOURCE ( 32516 ) );
CONST IDC_SIZENWSE = ( MAKEINTRESOURCE ( 32642 ) );
CONST IDC_SIZENESW = ( MAKEINTRESOURCE ( 32643 ) );
CONST IDC_SIZEWE = ( MAKEINTRESOURCE ( 32644 ) );
CONST IDC_SIZENS = ( MAKEINTRESOURCE ( 32645 ) );
CONST IDC_SIZEALL = ( MAKEINTRESOURCE ( 32646 ) );
CONST IDC_NO = ( MAKEINTRESOURCE ( 32648 ) );
CONST IDC_APPSTARTING = ( MAKEINTRESOURCE ( 32650 ) );
CONST IDC_HELP = ( MAKEINTRESOURCE ( 32651 ) );
CONST IDI_APPLICATION = ( MAKEINTRESOURCE ( 32512 ) );
CONST IDI_HAND = ( MAKEINTRESOURCE ( 32513 ) );
CONST IDI_QUESTION = ( MAKEINTRESOURCE ( 32514 ) );
CONST IDI_EXCLAMATION = ( MAKEINTRESOURCE ( 32515 ) );
CONST IDI_ASTERISK = ( MAKEINTRESOURCE ( 32516 ) );
CONST IDI_WINLOGO = ( MAKEINTRESOURCE ( 32517 ) );
CONST IDC_SIZE = ( MAKEINTRESOURCE ( 32640 ) );
CONST IDC_ICON = ( MAKEINTRESOURCE ( 32641 ) );

{+// GetMapMode */ }
CONST MM_ANISOTROPIC = ( 8 );
CONST MM_HIENGLISH = ( 5 );
CONST MM_HIMETRIC = ( 3 );
CONST MM_ISOTROPIC = ( 7 );
CONST MM_LOENGLISH = ( 4 );
CONST MM_LOMETRIC = ( 2 );
CONST MM_TEXT = ( 1 );
CONST MM_TWIPS = ( 6 );

{+// GetMenuDefaultItem */ }
CONST GMDI_GOINTOPOPUPS = ( $2 );
CONST GMDI_USEDISABLED = ( $1 );

{+// PeekMessage */ }
CONST PM_NOREMOVE = ( 0 );
CONST PM_REMOVE = ( 1 );
CONST PM_NOYIELD = ( 2 );

{+// GetNamedPipeHandleState */ }
{Const PIPE_NOWAIT = (1);
Const PIPE_READMODE_MESSAGE = (2);}

{+// GetNamedPipeInfo */ }
CONST PIPE_CLIENT_END = ( 0 );
CONST PIPE_SERVER_END = ( 1 );
{Const PIPE_TYPE_MESSAGE = (4);}

{+// GetNextWindow, GetWindow */ }
CONST GW_HWNDNEXT = ( 2 );
CONST GW_HWNDPREV = ( 3 );
CONST GW_CHILD = ( 5 );
CONST GW_HWNDFIRST = ( 0 );
CONST GW_HWNDLAST = ( 1 );
CONST GW_OWNER = ( 4 );

{+// GetPath */ }
CONST PT_MOVETO = ( 6 );
CONST PT_LINETO = ( 2 );
CONST PT_BEZIERTO = ( 4 );
CONST PT_CLOSEFIGURE = ( 1 );

{+// GetProcessShutdownParameters */ }
CONST SHUTDOWN_NORETRY = ( 1 );

{+// GetQueueStatus */ }
CONST QS_ALLEVENTS = ( 191 );
CONST QS_ALLINPUT = ( 255 );
CONST QS_HOTKEY = ( 128 );
CONST QS_INPUT = ( 7 );
CONST QS_KEY = ( 1 );
CONST QS_MOUSE = ( 6 );
CONST QS_MOUSEBUTTON = ( 4 );
CONST QS_MOUSEMOVE = ( 2 );
CONST QS_PAINT = ( 32 );
CONST QS_POSTMESSAGE = ( 8 );
CONST QS_SENDMESSAGE = ( 64 );
CONST QS_TIMER = ( 16 );

{+// GetScrollInfo, SetScrollInfo */ }
CONST SIF_ALL = ( 23 );
CONST SIF_PAGE = ( 2 );
CONST SIF_POS = ( 4 );
CONST SIF_RANGE = ( 1 );
CONST SIF_DISABLENOSCROLL = ( 8 );

{+// GetStdHandle */ }
CONST STD_INPUT_HANDLE = (  - 10 );
CONST STD_OUTPUT_HANDLE = (  - 11 );
CONST STD_ERROR_HANDLE =  (  - 12 );
CONST INVALID_HANDLE_VALUE = (  - 1 );
CONST STDINPUTHANDLE = (  - 10 );
CONST STDOUTPUTHANDLE = (  - 11 );
CONST STDERRORHANDLE =  (  - 12 );
CONST INVALIDHANDLEVALUE = (  - 1 );

{+// GetStockObject */ }
CONST BLACK_BRUSH = ( 4 );
CONST DKGRAY_BRUSH = ( 3 );
CONST GRAY_BRUSH = ( 2 );
CONST HOLLOW_BRUSH = ( 5 );
CONST LTGRAY_BRUSH = ( 1 );
CONST NULL_BRUSH = ( 5 );
CONST WHITE_BRUSH = ( 0 );
CONST BLACK_PEN = ( 7 );
CONST NULL_PEN = ( 8 );
CONST WHITE_PEN = ( 6 );
CONST ANSI_FIXED_FONT = ( 11 );
CONST ANSI_VAR_FONT = ( 12 );
CONST DEVICE_DEFAULT_FONT = ( 14 );
CONST DEFAULT_GUI_FONT = ( 17 );
CONST OEM_FIXED_FONT = ( 10 );
CONST SYSTEM_FONT = ( 13 );
CONST SYSTEM_FIXED_FONT = ( 16 );
CONST DEFAULT_PALETTE = ( 15 );

{+// GetStringTypeA */ }
CONST CT_CTYPE1 = ( 1 );
CONST CT_CTYPE2 = ( 2 );
CONST CT_CTYPE3 = ( 4 );
CONST C1_UPPER = ( 1 );
CONST C1_LOWER = ( 2 );
CONST C1_DIGIT = ( 4 );
CONST C1_SPACE = ( 8 );
CONST C1_PUNCT = ( 16 );
CONST C1_CNTRL = ( 32 );
CONST C1_BLANK = ( 64 );
CONST C1_XDIGIT = ( 128 );
CONST C1_ALPHA = ( 256 );
CONST C2_LEFTTORIGHT = ( 1 );
CONST C2_RIGHTTOLEFT = ( 2 );
CONST C2_EUROPENUMBER = ( 3 );
CONST C2_EUROPESEPARATOR = ( 4 );
CONST C2_EUROPETERMINATOR = ( 5 );
CONST C2_ARABICNUMBER = ( 6 );
CONST C2_COMMONSEPARATOR = ( 7 );
CONST C2_BLOCKSEPARATOR = ( 8 );
CONST C2_SEGMENTSEPARATOR = ( 9 );
CONST C2_WHITESPACE = ( 10 );
CONST C2_OTHERNEUTRAL = ( 11 );
CONST C2_NOTAPPLICABLE = ( 0 );
CONST C3_NONSPACING = ( 1 );
CONST C3_DIACRITIC = ( 2 );
CONST C3_VOWELMARK = ( 4 );
CONST C3_SYMBOL = ( 8 );
CONST C3_KATAKANA = ( 16 );
CONST C3_HIRAGANA = ( 32 );
CONST C3_HALFWIDTH = ( 64 );
CONST C3_FULLWIDTH = ( 128 );
CONST C3_IDEOGRAPH = ( 256 );
CONST C3_KASHIDA = ( 512 );
CONST C3_ALPHA = ( 32768 );
CONST C3_NOTAPPLICABLE = ( 0 );

{+// GetSysColor */ }
CONST COLOR_3DDKSHADOW = ( 21 );
CONST COLOR_3DFACE = ( 15 );
CONST COLOR_3DHILIGHT = ( 20 );
CONST COLOR_3DLIGHT = ( 22 );
CONST COLOR_BTNHILIGHT = ( 20 );
CONST COLOR_3DSHADOW = ( 16 );
CONST COLOR_ACTIVEBORDER = ( 10 );
CONST COLOR_ACTIVECAPTION = ( 2 );
CONST COLOR_APPWORKSPACE = ( 12 );
CONST COLOR_BACKGROUND = ( 1 );
CONST COLOR_DESKTOP = ( 1 );
CONST COLOR_BTNFACE = ( 15 );
CONST COLOR_BTNHIGHLIGHT = ( 20 );
CONST COLOR_BTNSHADOW = ( 16 );
CONST COLOR_BTNTEXT = ( 18 );
CONST COLOR_CAPTIONTEXT = ( 9 );
CONST COLOR_GRAYTEXT = ( 17 );
CONST COLOR_HIGHLIGHT = ( 13 );
CONST COLOR_HIGHLIGHTTEXT = ( 14 );
CONST COLOR_INACTIVEBORDER = ( 11 );
CONST COLOR_INACTIVECAPTION = ( 3 );
CONST COLOR_INACTIVECAPTIONTEXT = ( 19 );
CONST COLOR_INFOBK = ( 24 );
CONST COLOR_INFOTEXT = ( 23 );
CONST COLOR_MENU = ( 4 );
CONST COLOR_MENUTEXT = ( 7 );
CONST COLOR_SCROLLBAR = ( 0 );
CONST COLOR_WINDOW = ( 5 );
CONST COLOR_WINDOWFRAME = ( 6 );
CONST COLOR_WINDOWTEXT = ( 8 );

{+// GetSystemMetrics */ }
CONST SM_CYMIN = ( 29 );
CONST SM_CXMIN = ( 28 );
CONST SM_ARRANGE = ( 56 );
CONST SM_CLEANBOOT = ( 67 );
CONST SM_CMETRICS = ( 75 );
CONST SM_CMOUSEBUTTONS = ( 43 );
CONST SM_CXBORDER = ( 5 );
CONST SM_CYBORDER = ( 6 );
CONST SM_CXCURSOR = ( 13 );
CONST SM_CYCURSOR = ( 14 );
CONST SM_CXDLGFRAME = ( 7 );
CONST SM_CYDLGFRAME = ( 8 );
CONST SM_CXDOUBLECLK = ( 36 );
CONST SM_CYDOUBLECLK = ( 37 );
CONST SM_CXDRAG = ( 32 );
CONST SM_CYDRAG = ( 33 );
CONST SM_CXEDGE = ( 32 );
CONST SM_CYEDGE = ( 33 );
CONST SM_CXFIXEDFRAME = ( 32 );
CONST SM_CYFIXEDFRAME = ( 33 );
CONST SM_CXFRAME = ( 32 );
CONST SM_CYFRAME = ( 33 );
CONST SM_CXFULLSCREEN = ( 16 );
CONST SM_CYFULLSCREEN = ( 17 );
CONST SM_CXHSCROLL = ( 21 );
CONST SM_CYHSCROLL = ( 3 );
CONST SM_CXHTHUMB = ( 10 );
CONST SM_CXICON = ( 11 );
CONST SM_CYICON = ( 12 );
CONST SM_CXICONSPACING = ( 38 );
CONST SM_CYICONSPACING = ( 39 );
CONST SM_CXMAXIMIZED = ( 61 );
CONST SM_CYMAXIMIZED = ( 62 );
CONST SM_CXMAXTRACK = ( 59 );
CONST SM_CYMAXTRACK = ( 60 );
CONST SM_CXMENUCHECK = ( 71 );
CONST SM_CYMENUCHECK = ( 72 );
CONST SM_CXMENUSIZE = ( 54 );
CONST SM_CYMENUSIZE = ( 55 );
CONST SM_CXMINIMIZED = ( 57 );
CONST SM_CYMINIMIZED = ( 58 );
CONST SM_CXMINSPACING = ( 47 );
CONST SM_CYMINSPACING = ( 48 );
CONST SM_CXMINTRACK = ( 34 );
CONST SM_CYMINTRACK = ( 35 );
CONST SM_CXSCREEN = ( 0 );
CONST SM_CYSCREEN = ( 1 );
CONST SM_CXSIZE = ( 30 );
CONST SM_CYSIZE = ( 31 );
CONST SM_CXSIZEFRAME = ( 32 );
CONST SM_CYSIZEFRAME = ( 33 );
CONST SM_CXSMICON = ( 49 );
CONST SM_CYSMICON = ( 50 );
CONST SM_CXSMSIZE = ( 52 );
CONST SM_CYSMSIZE = ( 53 );
CONST SM_CXVSCROLL = ( 2 );
{Const SM_CYHSCROLL = (3);
Const SM_CXHSCROLL = (21);}
CONST SM_CYVSCROLL = ( 20 );
CONST SM_CYVTHUMB = ( 9 );
CONST SM_CYCAPTION = ( 4 );
CONST SM_CYKANJIWINDOW = ( 18 );
CONST SM_CYMENU = ( 15 );
CONST SM_CYSMCAPTION = ( 51 );
CONST SM_DBCSENABLED = ( 42 );
CONST SM_DEBUG = ( 22 );
CONST SM_MENUDROPALIGNMENT = ( 40 );
CONST SM_MIDEASTENABLED = ( 74 );
CONST SM_MOUSEPRESENT = ( 19 );
CONST SM_NETWORK = ( 63 );
CONST SM_PENWINDOWS = ( 41 );
CONST SM_SECURE = ( 44 );
CONST SM_SHOWSOUNDS = ( 70 );
CONST SM_SLOWMACHINE = ( 73 );
CONST SM_SWAPBUTTON = ( 23 );
CONST ARW_BOTTOMLEFT = ( 0 );
CONST ARW_BOTTOMRIGHT = ( $1 );
CONST ARW_HIDE = ( $8 );
CONST ARW_TOPLEFT = ( $2 );
CONST ARW_TOPRIGHT = ( $3 );
CONST ARW_DOWN = ( $4 );
CONST ARW_LEFT = ( 0 );
CONST ARW_RIGHT = ( 0 );
CONST ARW_UP = ( $4 );

{+// GetSystemPaletteUse */ }
CONST SYSPAL_NOSTATIC = ( 2 );
CONST SYSPAL_STATIC = ( 1 );
CONST SYSPAL_ERROR = ( 0 );

{+// GetTapeParameters, SetTapeParameters */ }
CONST GET_TAPE_MEDIA_INFORMATION = ( 0 );
CONST GET_TAPE_DRIVE_INFORMATION = ( 1 );
CONST SET_TAPE_MEDIA_INFORMATION = ( 0 );
CONST SET_TAPE_DRIVE_INFORMATION = ( 1 );

{+// GetTapePosition */ }
CONST TAPE_ABSOLUTE_POSITION = ( 0 );
CONST TAPE_LOGICAL_POSITION = ( $1 );

{+// GetTextAlign */ }
CONST TA_BASELINE = ( 24 );
CONST TA_BOTTOM = ( 8 );
CONST TA_TOP = ( 0 );
CONST TA_CENTER = ( 6 );
CONST TA_LEFT = ( 0 );
CONST TA_RIGHT = ( 2 );
CONST TA_RTLREADING = ( 256 );
CONST TA_NOUPDATECP = ( 0 );
CONST TA_UPDATECP = ( 1 );
CONST VTA_BASELINE = ( 24 );
CONST VTA_CENTER = ( 6 );

{+// GetThreadPriority */ }
CONST THREAD_PRIORITY_ABOVE_NORMAL = ( 1 );
CONST THREAD_PRIORITY_BELOW_NORMAL = (  - 1 );
CONST THREAD_PRIORITY_HIGHEST = ( 2 );
CONST THREAD_PRIORITY_IDLE = (  - 15 );
CONST THREAD_PRIORITY_LOWEST = (  - 2 );
CONST THREAD_PRIORITY_NORMAL = ( 0 );
CONST THREAD_PRIORITY_TIME_CRITICAL = ( 15 );
CONST THREAD_PRIORITY_ERROR_RETURN = ( 2147483647 );
CONST TLS_MINIMUM_AVAILABLE = ( 64 );

{+// GetTimeFormat */ }
CONST TIME_NOMINUTESORSECONDS = ( 1 );
CONST TIME_NOSECONDS = ( 2 );
CONST TIME_NOTIMEMARKER = ( 4 );
CONST TIME_FORCE24HOURFORMAT = ( 8 );

{+// GetTimeZoneInformation */ }
CONST TIME_ZONE_ID_UNKNOWN = ( 0 );
CONST TIME_ZONE_ID_STANDARD = ( 1 );
CONST TIME_ZONE_ID_DAYLIGHT = ( 2 );

{+// GetUserObjectInformation */ }
CONST UOI_FLAGS = ( 1 );
CONST UOI_NAME = ( 2 );
CONST UOI_TYPE = ( 3 );

{+// GetVolumeInformation */ }
CONST FS_CASE_IS_PRESERVED = ( 2 );
CONST FS_CASE_SENSITIVE = ( 1 );
CONST FS_UNICODE_STORED_ON_DISK = ( 4 );
CONST FS_PERSISTENT_ACLS = ( 8 );
CONST FS_FILE_COMPRESSION = ( 16 );
CONST FS_VOL_IS_COMPRESSED = ( 32768 );

{+// GetWindowLong */ }
CONST GWL_EXSTYLE = (  - 20 );
CONST GWL_STYLE = (  - 16 );
CONST GWL_WNDPROC = (  - 4 );
CONST GWL_HINSTANCE = (  - 6 );
CONST GWL_HWNDPARENT = (  - 8 );
CONST GWL_ID = (  - 12 );
CONST GWL_USERDATA = (  - 21 );
CONST DWL_DLGPROC = ( 4 );
CONST DWL_MSGRESULT = ( 0 );
CONST DWL_USER = ( 8 );

{+// GlobalAlloc, GlobalFlags */ }
CONST GMEM_FIXED = ( 0 );
CONST GMEM_MOVEABLE = ( 2 );
CONST GPTR = ( 64 );
CONST GHND = ( 66 );
CONST GMEM_DDESHARE = ( 8192 );
CONST GMEM_DISCARDABLE = ( 256 );
CONST GMEM_LOWER = ( 4096 );
CONST GMEM_NOCOMPACT = ( 16 );
CONST GMEM_NODISCARD = ( 32 );
CONST GMEM_NOT_BANKED = ( 4096 );
CONST GMEM_NOTIFY = ( 16384 );
CONST GMEM_SHARE = ( 8192 );
CONST GMEM_ZEROINIT = ( 64 );
CONST GMEM_DISCARDED = ( 16384 );
CONST GMEM_INVALID_HANDLE = ( 32768 );
CONST GMEM_LOCKCOUNT = ( 255 );

{+// HeapAlloc, HeapReAlloc */ }
CONST HEAP_GENERATE_EXCEPTIONS = ( 4 );
CONST HEAP_NO_SERIALIZE = ( 1 );
CONST HEAP_ZERO_MEMORY = ( 8 );
CONST STATUS_NO_MEMORY = ( $c0000017 );
CONST STATUS_ACCESS_VIOLATION = ( $c0000005 );
CONST HEAP_REALLOC_IN_PLACE_ONLY = ( 16 );

{+// ImageList_Create */ }
CONST ILC_COLOR = ( 0 );
CONST ILC_COLOR4 = ( 4 );
CONST ILC_COLOR8 = ( 8 );
CONST ILC_COLOR16 = ( 16 );
CONST ILC_COLOR24 = ( 24 );
CONST ILC_COLOR32 = ( 32 );
CONST ILC_COLORDDB = ( 254 );
CONST ILC_MASK = ( 1 );
CONST ILC_PALETTE = ( 2048 );

{+// ImageList_Draw, ImageList_DrawEx */ }
CONST ILD_BLEND25 = ( 2 );
CONST ILD_BLEND50 = ( 4 );
CONST ILD_SELECTED = ( 4 );
CONST ILD_BLEND = ( 4 );
CONST ILD_FOCUS = ( 2 );
CONST ILD_MASK = ( 16 );
CONST ILD_NORMAL = ( 0 );
CONST ILD_TRANSPARENT = ( 1 );
CONST CLR_NONE = ( $ffffffff{L} );
CONST CLR_DEFAULT = ( $ff000000 );

{+// ImageList_LoadImage */ }
{Const LR_DEFAULTCOLOR = (0);}
CONST LR_LOADFROMFILE = ( 16 );
CONST LR_LOADMAP3DCOLORS = ( 4096 );
CONST LR_LOADTRANSPARENT = ( 32 );
{Const LR_MONOCHROME = (1);}

{+// ImmConfigureIME */ }
CONST IME_CONFIG_GENERAL = ( 1 );
CONST IME_CONFIG_REGISTERWORD = ( 2 );
CONST IME_CONFIG_SELECTDICTIONARY = ( 3 );

{+// ImmGetConversionList */ }
CONST GCL_CONVERSION = ( 1 );
CONST GCL_REVERSECONVERSION = ( 2 );
CONST GCL_REVERSE_LENGTH = ( 3 );

{+// ImmGetGuideLine */ }
CONST GGL_LEVEL = ( 1 );
CONST GGL_INDEX = ( 2 );
CONST GGL_STRING = ( 3 );
CONST GGL_PRIVATE = ( 4 );
CONST GL_LEVEL_ERROR = ( 2 );
CONST GL_LEVEL_FATAL = ( 1 );
CONST GL_LEVEL_INFORMATION = ( 4 );
CONST GL_LEVEL_NOGUIDELINE = ( 0 );
CONST GL_LEVEL_WARNING = ( 3 );
CONST GL_ID_CANNOTSAVE = ( 17 );
CONST GL_ID_NOCONVERT = ( 32 );
CONST GL_ID_NODICTIONARY = ( 16 );
CONST GL_ID_NOMODULE = ( 1 );
CONST GL_ID_READINGCONFLICT = ( 35 );
CONST GL_ID_TOOMANYSTROKE = ( 34 );
CONST GL_ID_TYPINGERROR = ( 33 );
CONST GL_ID_UNKNOWN = ( 0 );
CONST GL_ID_INPUTREADING = ( 36 );
CONST GL_ID_INPUTRADICAL = ( 37 );
CONST GL_ID_INPUTCODE = ( 38 );
CONST GL_ID_CHOOSECANDIDATE = ( 40 );
CONST GL_ID_REVERSECONVERSION = ( 41 );

{+// ImmGetProperty */ }
CONST IGP_PROPERTY = ( 4 );
CONST IGP_CONVERSION = ( 8 );
CONST IGP_SENTENCE = ( 12 );
CONST IGP_UI = ( 16 );
CONST IGP_SETCOMPSTR = ( 20 );
CONST IGP_SELECT = ( 24 );
CONST IME_PROP_AT_CARET = ( 65536 );
CONST IME_PROP_SPECIAL_UI = ( 131072 );
CONST IME_PROP_CANDLIST_START_FROM_1 = ( 262144 );
CONST IME_PROP_UNICODE = ( 524288 );
CONST UI_CAP_2700 = ( 1 );
CONST UI_CAP_ROT90 = ( 2 );
CONST UI_CAP_ROTANY = ( 4 );
CONST SCS_CAP_COMPSTR = ( 1 );
CONST SCS_CAP_MAKEREAD = ( 2 );
CONST SELECT_CAP_CONVERSION = ( 1 );
CONST SELECT_CAP_SENTENCE = ( 2 );

{+// ImmNotifyIME */ }
CONST NI_CHANGECANDIDATELIST = ( 19 );
CONST NI_CLOSECANDIDATE = ( 17 );
CONST NI_COMPOSITIONSTR = ( 21 );
CONST NI_OPENCANDIDATE = ( 16 );
CONST NI_SELECTCANDIDATESTR = ( 18 );
CONST NI_SETCANDIDATE_PAGESIZE = ( 23 );
CONST NI_SETCANDIDATE_PAGESTART = ( 22 );
CONST CPS_CANCEL = ( 4 );
CONST CPS_COMPLETE = ( 1 );
CONST CPS_CONVERT = ( 2 );
CONST CPS_REVERT = ( 3 );

{+// ImmSetCompositionString */ }
CONST SCS_SETSTR = ( 9 );
CONST SCS_CHANGEATTR = ( 18 );
CONST SCS_CHANGECLAUSE = ( 36 );

{+// ImmUnregisterWord */ }
CONST IME_REGWORD_STYLE_EUDC = ( 1 );
CONST IME_REGWORD_STYLE_USER_FIRST = $80000000;
CONST IME_REGWORD_STYLE_USER_LAST = (  - 1 );

{+// InitializeSecurityDescriptor */ }
CONST SECURITY_DESCRIPTOR_REVISION = ( 1 );

{+// IsTextUnicode */ }
CONST IS_TEXT_UNICODE_ASCII16 = ( 1 );
CONST IS_TEXT_UNICODE_REVERSE_ASCII16 = ( 16 );
CONST IS_TEXT_UNICODE_STATISTICS = ( 2 );
CONST IS_TEXT_UNICODE_REVERSE_STATISTICS = ( 32 );
CONST IS_TEXT_UNICODE_CONTROLS = ( 4 );
CONST IS_TEXT_UNICODE_REVERSE_CONTROLS = ( 64 );
CONST IS_TEXT_UNICODE_SIGNATURE = ( 8 );
CONST IS_TEXT_UNICODE_REVERSE_SIGNATURE = ( 128 );
CONST IS_TEXT_UNICODE_ILLEGAL_CHARS = ( 256 );
CONST IS_TEXT_UNICODE_ODD_LENGTH = ( 512 );
CONST IS_TEXT_UNICODE_NULL_BYTES = ( 4096 );
CONST IS_TEXT_UNICODE_UNICODE_MASK = ( 15 );
CONST IS_TEXT_UNICODE_REVERSE_MASK = ( 240 );
CONST IS_TEXT_UNICODE_NOT_UNICODE_MASK = ( 3840 );
CONST IS_TEXT_UNICODE_NOT_ASCII_MASK = ( 61440 );

{+// JournalPlaybackProc, KeyboardProc */ }
CONST HC_GETNEXT = ( 1 );
CONST HC_SKIP = ( 2 );
CONST HC_SYSMODALOFF = ( 5 );
CONST HC_SYSMODALON = ( 4 );
CONST HC_NOREMOVE = ( 3 );

{+// keybd_event */ }
CONST KEYEVENTF_EXTENDEDKEY = ( 1 );
CONST KEYEVENTF_KEYUP = ( 2 );

{+// LoadBitmap */ }
CONST OBM_BTNCORNERS = ( 32758 );
CONST OBM_BTSIZE = ( 32761 );
CONST OBM_CHECK = ( 32760 );
CONST OBM_CHECKBOXES = ( 32759 );
CONST OBM_CLOSE = ( 32754 );
CONST OBM_COMBO = ( 32738 );
CONST OBM_DNARROW = ( 32752 );
CONST OBM_DNARROWD = ( 32742 );
CONST OBM_DNARROWI = ( 32736 );
CONST OBM_LFARROW = ( 32750 );
CONST OBM_LFARROWI = ( 32734 );
CONST OBM_LFARROWD = ( 32740 );
CONST OBM_MNARROW = ( 32739 );
CONST OBM_OLD_CLOSE = ( 32767 );
CONST OBM_OLD_DNARROW = ( 32764 );
CONST OBM_OLD_LFARROW = ( 32762 );
CONST OBM_OLD_REDUCE = ( 32757 );
CONST OBM_OLD_RESTORE = ( 32755 );
CONST OBM_OLD_RGARROW = ( 32763 );
CONST OBM_OLD_UPARROW = ( 32765 );
CONST OBM_OLD_ZOOM = ( 32756 );
CONST OBM_REDUCE = ( 32749 );
CONST OBM_REDUCED = ( 32746 );
CONST OBM_RESTORE = ( 32747 );
CONST OBM_RESTORED = ( 32744 );
CONST OBM_RGARROW = ( 32751 );
CONST OBM_RGARROWD = ( 32741 );
CONST OBM_RGARROWI = ( 32735 );
CONST OBM_SIZE = ( 32766 );
CONST OBM_UPARROW = ( 32753 );
CONST OBM_UPARROWD = ( 32743 );
CONST OBM_UPARROWI = ( 32737 );
CONST OBM_ZOOM = ( 32748 );
CONST OBM_ZOOMD = ( 32745 );

{+// LoadLibraryEx */ }
CONST DONT_RESOLVE_DLL_REFERENCES = ( 1 );
CONST LOAD_LIBRARY_AS_DATAFILE = ( 2 );
CONST LOAD_WITH_ALTERED_SEARCH_PATH = ( 8 );

{+// LocalAlloc, LocalFlags */ }
CONST LPTR = ( 64 );
CONST LHND = ( 66 );
CONST NONZEROLHND = ( 2 );
CONST NONZEROLPTR = ( 0 );
CONST LMEM_NONZEROLHND = ( 2 );
CONST LMEM_NONZEROLPTR = ( 0 );
CONST LMEM_FIXED = ( 0 );
CONST LMEM_MOVEABLE = ( 2 );
CONST LMEM_NOCOMPACT = ( 16 );
CONST LMEM_NODISCARD = ( 32 );
CONST LMEM_ZEROINIT = ( 64 );
CONST LMEM_MODIFY = ( 128 );
CONST LMEM_LOCKCOUNT = ( 255 );
CONST LMEM_DISCARDABLE = ( 3840 );
CONST LMEM_DISCARDED = ( 16384 );
CONST LMEM_INVALID_HANDLE = ( 32768 );

{+// LockFileEx */ }
CONST LOCKFILE_FAIL_IMMEDIATELY = ( 1 );
CONST LOCKFILE_EXCLUSIVE_LOCK = ( 2 );

{+// LogonUser */ }

{+// LZCopy, LZInit, LZRead */ }

{+// MessageBeep, MessageBox */ }
CONST MB_USERICON = ( $80 );
CONST MB_ICONASTERISK = ( $40 );
CONST MB_ICONEXCLAMATION = ( $30 );
CONST MB_ICONWARNING = ( $30 );
CONST MB_ICONERROR = ( $10 );
CONST MB_ICONHAND = ( $10 );
CONST MB_ICONQUESTION = ( $20 );
CONST MB_OK = ( 0 );
CONST MB_ABORTRETRYIGNORE = ( $2 );
CONST MB_APPLMODAL = ( 0 );
CONST MB_DEFAULT_DESKTOP_ONLY = ( $20000 );
CONST MB_HELP = ( $4000 );
CONST MB_RIGHT = ( $80000 );
CONST MB_RTLREADING = ( $100000 );
CONST MB_TOPMOST = ( $40000 );
CONST MB_DEFBUTTON1 = ( 0 );
CONST MB_DEFBUTTON2 = ( $100 );
CONST MB_DEFBUTTON3 = ( $200 );
CONST MB_DEFBUTTON4 = ( $300 );
CONST MB_ICONINFORMATION = ( $40 );
CONST MB_ICONSTOP = ( $10 );
CONST MB_OKCANCEL = ( $1 );
CONST MB_RETRYCANCEL = ( $5 );
CONST MB_SERVICE_NOTIFICATION = ( $40000 );
CONST MB_SETFOREGROUND = ( $10000 );
CONST MB_SYSTEMMODAL = ( $1000 );
CONST MB_TASKMODAL = ( $2000 );
CONST MB_YESNO = ( $4 );
CONST MB_YESNOCANCEL = ( $3 );
CONST IDABORT = ( 3 );
CONST IDCANCEL = ( 2 );
CONST IDCLOSE = ( 8 );
CONST IDHELP = ( 9 );
CONST IDIGNORE = ( 5 );
CONST IDNO = ( 7 );
CONST IDOK = ( 1 );
CONST IDRETRY = ( 4 );
CONST IDYES = ( 6 );

id_Ok     = 1;
id_Cancel = 2;
id_Abort  = 3;
id_Retry  = 4;
id_Ignore = 5;
id_Yes    = 6;
id_No     = 7;

{+// MessageProc */ }
CONST MSGF_DIALOGBOX = ( 0 );
CONST MSGF_MENU = ( 2 );
CONST MSGF_NEXTWINDOW = ( 6 );
CONST MSGF_SCROLLBAR = ( 5 );
CONST MSGF_MAINLOOP = ( 8 );
CONST MSGF_USER = ( 4096 );

{+// ModifyWorldTransform */ }
CONST MWT_IDENTITY = ( 1 );
CONST MWT_LEFTMULTIPLY = ( 2 );
CONST MWT_RIGHTMULTIPLY = ( 3 );

{+// mouse_event */ }
CONST MOUSEEVENTF_ABSOLUTE = ( 32768 );
CONST MOUSEEVENTF_MOVE = ( 1 );
CONST MOUSEEVENTF_LEFTDOWN = ( 2 );
CONST MOUSEEVENTF_LEFTUP = ( 4 );
CONST MOUSEEVENTF_RIGHTDOWN = ( 8 );
CONST MOUSEEVENTF_RIGHTUP = ( 16 );
CONST MOUSEEVENTF_MIDDLEDOWN = ( 32 );
CONST MOUSEEVENTF_MIDDLEUP = ( 64 );

{+// MoveFileEx */ }
CONST MOVEFILE_REPLACE_EXISTING = ( 1 );
CONST MOVEFILE_COPY_ALLOWED = ( 2 );
CONST MOVEFILE_DELAY_UNTIL_REBOOT = ( 4 );

{+// MsgWaitForMultipleObjects, WaitForMultipleObjectsEx */ }
CONST WAIT_OBJECT_0 = ( 0 );
CONST WAIT_ABANDONED_0 = ( $80 );
CONST WAIT_TIMEOUT = ( $102 );
CONST WAIT_IO_COMPLETION = ( $c0 );
CONST WAIT_ABANDONED = ( $80 );
CONST WAIT_FAILED = ( $ffffffff{L} );
CONST MAXIMUM_WAIT_OBJECTS = ( $40 );
CONST MAXIMUM_SUSPEND_COUNT = ( $7 );

{+// MultiByteToWideChar */ }
CONST MB_PRECOMPOSED = ( 1 );
CONST MB_COMPOSITE = ( 2 );
CONST MB_ERR_INVALID_CHARS = ( 8 );
CONST MB_USEGLYPHCHARS = ( 4 );

{+// NDdeSetTrustedShare */ }

{+// NetAccessCheck */ }

{+// NetServerEnum */ }

{+// NetServiceControl */ }

{+// NetUserEnum */ }

{+// OpenProcessToken */ }
CONST TOKEN_ADJUST_DEFAULT = ( 128 );
CONST TOKEN_ADJUST_GROUPS = ( 64 );
CONST TOKEN_ADJUST_PRIVILEGES = ( 32 );
CONST TOKEN_ALL_ACCESS = ( $f00ff{L} );
CONST TOKEN_ASSIGN_PRIMARY = ( 1 );
CONST TOKEN_DUPLICATE = ( 2 );
CONST TOKEN_EXECUTE = ( $20000 );
CONST TOKEN_IMPERSONATE = ( 4 );
CONST TOKEN_QUERY = ( 8 );
CONST TOKEN_QUERY_SOURCE = ( 16 );
CONST TOKEN_READ = ( $20008 );
CONST TOKEN_WRITE = ( $200e0 );

{+// OpenSCManager */ }
CONST SC_MANAGER_ALL_ACCESS = ( $f003f{L} );
CONST SC_MANAGER_CONNECT = ( 1 );
CONST SC_MANAGER_CREATE_SERVICE = ( 2 );
CONST SC_MANAGER_ENUMERATE_SERVICE = ( 4 );
CONST SC_MANAGER_LOCK = ( 8 );
CONST SC_MANAGER_QUERY_LOCK_STATUS = ( 16 );
CONST SC_MANAGER_MODIFY_BOOT_CONFIG = ( 32 );

{+// PostMessage */ }
CONST HWND_BROADCAST = HWND ( $FFF );

{+// PrepareTape */ }
CONST TAPE_FORMAT = ( $5 );
CONST TAPE_LOAD = ( 0 );
CONST TAPE_LOCK = ( $3 );
CONST TAPE_TENSION = ( $2 );
CONST TAPE_UNLOAD = ( $1 );
CONST TAPE_UNLOCK = ( $4 );

{+// PropertySheet */ }
CONST IS_PSREBOOTSYSTEM = ( 3 );
CONST IS_PSRESTARTWINDOWS = ( 2 );

{+// PropSheetPageProc */ }
CONST PSPCB_CREATE = ( 2 );
CONST PSPCB_RELEASE = ( 1 );

{+// PurgeComm */ }
CONST PURGE_TXABORT = ( 1 );
CONST PURGE_RXABORT = ( 2 );
CONST PURGE_TXCLEAR = ( 4 );
CONST PURGE_RXCLEAR = ( 8 );

{+// QueryServiceObjectSecurity */ }
CONST OWNER_SECURITY_INFORMATION = ( $1 );
CONST GROUP_SECURITY_INFORMATION = ( $2 );
CONST DACL_SECURITY_INFORMATION = ( $4 );
CONST SACL_SECURITY_INFORMATION = ( $8 );

{+// ReadEventLog, ReportEvent */ }
CONST EVENTLOG_FORWARDS_READ = ( 4 );
CONST EVENTLOG_BACKWARDS_READ = ( 8 );
CONST EVENTLOG_SEEK_READ = ( 2 );
CONST EVENTLOG_SEQUENTIAL_READ = ( 1 );
CONST EVENTLOG_ERROR_TYPE = ( 1 );
CONST EVENTLOG_WARNING_TYPE = ( 2 );
CONST EVENTLOG_INFORMATION_TYPE = ( 4 );
CONST EVENTLOG_AUDIT_SUCCESS = ( 8 );
CONST EVENTLOG_AUDIT_FAILURE = ( 16 );

{+// RedrawWindow */ }
CONST RDW_ERASE = ( 4 );
CONST RDW_FRAME = ( 1024 );
CONST RDW_INTERNALPAINT = ( 2 );
CONST RDW_INVALIDATE = ( 1 );
CONST RDW_NOERASE = ( 32 );
CONST RDW_NOFRAME = ( 2048 );
CONST RDW_NOINTERNALPAINT = ( 16 );
CONST RDW_VALIDATE = ( 8 );
CONST RDW_ERASENOW = ( 512 );
CONST RDW_UPDATENOW = ( 256 );
CONST RDW_ALLCHILDREN = ( 128 );
CONST RDW_NOCHILDREN = ( 64 );

{+// RegCreateKey */ }
CONST HKEY_CLASSES_ROOT = ( $80000000 );
CONST HKEY_CURRENT_USER = ( $80000001 );
CONST HKEY_LOCAL_MACHINE = ( $80000002 );
CONST HKEY_USERS = ( $80000003 );
CONST HKEY_PERFORMANCE_DATA  = ( $80000004 );
CONST HKEY_CURRENT_CONFIG  = ( $80000005 );

{+// RegCreateKeyEx */ }
CONST REG_OPTION_VOLATILE = ( $1 );
CONST REG_OPTION_NON_VOLATILE = ( 0 );
CONST REG_CREATED_NEW_KEY = ( $1 );
CONST REG_OPENED_EXISTING_KEY = ( $2 );

{+// RegEnumValue */ }
CONST REG_BINARY = ( 3 );
CONST REG_DWORD = ( 4 );
CONST REG_DWORD_LITTLE_ENDIAN = ( 4 );
CONST REG_DWORD_BIG_ENDIAN = ( 5 );
CONST REG_EXPAND_SZ = ( 2 );
CONST REG_LINK = ( 6 );
CONST REG_MULTI_SZ = ( 7 );
CONST REG_NONE = ( 0 );
CONST REG_RESOURCE_LIST = ( 8 );
CONST REG_SZ = ( 1 );

{+// RegisterHotKey */ }
CONST MOD_ALT = ( 1 );
CONST MOD_CONTROL = ( 2 );
CONST MOD_SHIFT = ( 4 );
CONST MOD_WIN = ( 8 );
CONST IDHOT_SNAPDESKTOP = (  - 2 );
CONST IDHOT_SNAPWINDOW = (  - 1 );

{+// RegNotifyChangeKeyValue */ }
CONST REG_NOTIFY_CHANGE_NAME = ( $1 );
CONST REG_NOTIFY_CHANGE_ATTRIBUTES = ( $2 );
CONST REG_NOTIFY_CHANGE_LAST_SET = ( $4 );
CONST REG_NOTIFY_CHANGE_SECURITY = ( $8 );

{+// ScrollWindowEx */ }
CONST SW_ERASE = ( 4 );
CONST SW_INVALIDATE = ( 2 );
CONST SW_SCROLLCHILDREN = ( 1 );

{+// SendMessageTimeout */ }
CONST SMTO_ABORTIFHUNG = ( 2 );
CONST SMTO_BLOCK = ( 1 );
CONST SMTO_NORMAL = ( 0 );

{+// SetBkMode */ }
CONST OPAQUE = ( 2 );
CONST TRANSPARENT = ( 1 );

{+// SetDebugErrorLevel */ }
CONST SLE_ERROR = ( 1 );
CONST SLE_MINORERROR = ( 2 );
CONST SLE_WARNING = ( 3 );

{+// SetErrorMode */ }
CONST SEM_FAILCRITICALERRORS = ( 1 );
CONST SEM_NOALIGNMENTFAULTEXCEPT = ( 4 );
CONST SEM_NOGPFAULTERRORBOX = ( 2 );
CONST SEM_NOOPENFILEERRORBOX = ( 32768 );

{+// SetICMMode */ }
CONST ICM_ON = ( 2 );
CONST ICM_OFF = ( 1 );
CONST ICM_QUERY = ( 3 );

{+// SetJob */ }

{+// Locale Information */ }
CONST LOCALE_ILANGUAGE = ( 1 );
CONST LOCALE_SLANGUAGE = ( 2 );
CONST LOCALE_SENGLANGUAGE = ( 4097 );
CONST LOCALE_SABBREVLANGNAME = ( 3 );
CONST LOCALE_SNATIVELANGNAME = ( 4 );
CONST LOCALE_ICOUNTRY = ( 5 );
CONST LOCALE_SCOUNTRY = ( 6 );
CONST LOCALE_SENGCOUNTRY = ( 4098 );
CONST LOCALE_SABBREVCTRYNAME = ( 7 );
CONST LOCALE_SNATIVECTRYNAME = ( 8 );
CONST LOCALE_IDEFAULTLANGUAGE = ( 9 );
CONST LOCALE_IDEFAULTCOUNTRY = ( 10 );
CONST LOCALE_IDEFAULTANSICODEPAGE = ( 4100 );
CONST LOCALE_IDEFAULTCODEPAGE = ( 11 );
CONST LOCALE_SLIST = ( 12 );
CONST LOCALE_IMEASURE = ( 13 );
CONST LOCALE_SDECIMAL = ( 14 );
CONST LOCALE_STHOUSAND = ( 15 );
CONST LOCALE_SGROUPING = ( 16 );
CONST LOCALE_IDIGITS = ( 17 );
CONST LOCALE_ILZERO = ( 18 );
CONST LOCALE_INEGNUMBER = ( 4112 );
CONST LOCALE_SCURRENCY = ( 20 );
CONST LOCALE_SMONDECIMALSEP = ( 22 );
CONST LOCALE_SMONTHOUSANDSEP = ( 23 );
CONST LOCALE_SMONGROUPING = ( 24 );
CONST LOCALE_ICURRDIGITS = ( 25 );
CONST LOCALE_ICURRENCY = ( 27 );
CONST LOCALE_INEGCURR = ( 28 );
CONST LOCALE_SDATE = ( 29 );
CONST LOCALE_STIME = ( 30 );
CONST LOCALE_STIMEFORMAT = ( 4099 );
CONST LOCALE_SSHORTDATE = ( 31 );
CONST LOCALE_SLONGDATE = ( 32 );
CONST LOCALE_IDATE = ( 33 );
CONST LOCALE_ILDATE = ( 34 );
CONST LOCALE_ITIME = ( 35 );
CONST LOCALE_ITLZERO = ( 37 );
CONST LOCALE_IDAYLZERO = ( 38 );
CONST LOCALE_IMONLZERO = ( 39 );
CONST LOCALE_S1159 = ( 40 );
CONST LOCALE_S2359 = ( 41 );
CONST LOCALE_ICALENDARTYPE = ( 4105 );
CONST LOCALE_IOPTIONALCALENDAR = ( 4107 );
CONST LOCALE_IFIRSTDAYOFWEEK = ( 4108 );
CONST LOCALE_IFIRSTWEEKOFYEAR = ( 4109 );
CONST LOCALE_SDAYNAME1 = ( 42 );
CONST LOCALE_SDAYNAME2 = ( 43 );
CONST LOCALE_SDAYNAME3 = ( 44 );
CONST LOCALE_SDAYNAME4 = ( 45 );
CONST LOCALE_SDAYNAME5 = ( 46 );
CONST LOCALE_SDAYNAME6 = ( 47 );
CONST LOCALE_SDAYNAME7 = ( 48 );
CONST LOCALE_SABBREVDAYNAME1 = ( 49 );
CONST LOCALE_SABBREVDAYNAME2 = ( 50 );
CONST LOCALE_SABBREVDAYNAME3 = ( 51 );
CONST LOCALE_SABBREVDAYNAME4 = ( 52 );
CONST LOCALE_SABBREVDAYNAME5 = ( 53 );
CONST LOCALE_SABBREVDAYNAME6 = ( 54 );
CONST LOCALE_SABBREVDAYNAME7 = ( 55 );
CONST LOCALE_SMONTHNAME1 = ( 56 );
CONST LOCALE_SMONTHNAME2 = ( 57 );
CONST LOCALE_SMONTHNAME3 = ( 58 );
CONST LOCALE_SMONTHNAME4 = ( 59 );
CONST LOCALE_SMONTHNAME5 = ( 60 );
CONST LOCALE_SMONTHNAME6 = ( 61 );
CONST LOCALE_SMONTHNAME7 = ( 62 );
CONST LOCALE_SMONTHNAME8 = ( 63 );
CONST LOCALE_SMONTHNAME9 = ( 64 );
CONST LOCALE_SMONTHNAME10 = ( 65 );
CONST LOCALE_SMONTHNAME11 = ( 66 );
CONST LOCALE_SMONTHNAME12 = ( 67 );
CONST LOCALE_SMONTHNAME13 = ( 4110 );
CONST LOCALE_SABBREVMONTHNAME1 = ( 68 );
CONST LOCALE_SABBREVMONTHNAME2 = ( 69 );
CONST LOCALE_SABBREVMONTHNAME3 = ( 70 );
CONST LOCALE_SABBREVMONTHNAME4 = ( 71 );
CONST LOCALE_SABBREVMONTHNAME5 = ( 72 );
CONST LOCALE_SABBREVMONTHNAME6 = ( 73 );
CONST LOCALE_SABBREVMONTHNAME7 = ( 74 );
CONST LOCALE_SABBREVMONTHNAME8 = ( 75 );
CONST LOCALE_SABBREVMONTHNAME9 = ( 76 );
CONST LOCALE_SABBREVMONTHNAME10 = ( 77 );
CONST LOCALE_SABBREVMONTHNAME11 = ( 78 );
CONST LOCALE_SABBREVMONTHNAME12 = ( 79 );
CONST LOCALE_SABBREVMONTHNAME13 = ( 4111 );
CONST LOCALE_SPOSITIVESIGN = ( 80 );
CONST LOCALE_SNEGATIVESIGN = ( 81 );
CONST LOCALE_IPOSSIGNPOSN = ( 82 );
CONST LOCALE_INEGSIGNPOSN = ( 83 );
CONST LOCALE_IPOSSYMPRECEDES = ( 84 );
CONST LOCALE_IPOSSEPBYSPACE = ( 85 );
CONST LOCALE_INEGSYMPRECEDES = ( 86 );
CONST LOCALE_INEGSEPBYSPACE = ( 87 );
CONST LOCALE_NOUSEROVERRIDE = ( $80000000 );

{+// Calendar Type Information */ }
CONST CAL_ICALINTVALUE = ( 1 );
CONST CAL_IYEAROFFSETRANGE = ( 3 );
CONST CAL_SABBREVDAYNAME1 = ( 14 );
CONST CAL_SABBREVDAYNAME2 = ( 15 );
CONST CAL_SABBREVDAYNAME3 = ( 16 );
CONST CAL_SABBREVDAYNAME4 = ( 17 );
CONST CAL_SABBREVDAYNAME5 = ( 18 );
CONST CAL_SABBREVDAYNAME6 = ( 19 );
CONST CAL_SABBREVDAYNAME7 = ( 20 );
CONST CAL_SABBREVMONTHNAME1 = ( 34 );
CONST CAL_SABBREVMONTHNAME2 = ( 35 );
CONST CAL_SABBREVMONTHNAME3 = ( 36 );
CONST CAL_SABBREVMONTHNAME4 = ( 37 );
CONST CAL_SABBREVMONTHNAME5 = ( 38 );
CONST CAL_SABBREVMONTHNAME6 = ( 39 );
CONST CAL_SABBREVMONTHNAME7 = ( 40 );
CONST CAL_SABBREVMONTHNAME8 = ( 41 );
CONST CAL_SABBREVMONTHNAME9 = ( 42 );
CONST CAL_SABBREVMONTHNAME10 = ( 43 );
CONST CAL_SABBREVMONTHNAME11 = ( 44 );
CONST CAL_SABBREVMONTHNAME12 = ( 45 );
CONST CAL_SABBREVMONTHNAME13 = ( 46 );
CONST CAL_SCALNAME = ( 2 );
CONST CAL_SDAYNAME1 = ( 7 );
CONST CAL_SDAYNAME2 = ( 8 );
CONST CAL_SDAYNAME3 = ( 9 );
CONST CAL_SDAYNAME4 = ( 10 );
CONST CAL_SDAYNAME5 = ( 11 );
CONST CAL_SDAYNAME6 = ( 12 );
CONST CAL_SDAYNAME7 = ( 13 );
CONST CAL_SERASTRING = ( 4 );
CONST CAL_SLONGDATE = ( 6 );
CONST CAL_SMONTHNAME1 = ( 21 );
CONST CAL_SMONTHNAME2 = ( 22 );
CONST CAL_SMONTHNAME3 = ( 23 );
CONST CAL_SMONTHNAME4 = ( 24 );
CONST CAL_SMONTHNAME5 = ( 25 );
CONST CAL_SMONTHNAME6 = ( 26 );
CONST CAL_SMONTHNAME7 = ( 27 );
CONST CAL_SMONTHNAME8 = ( 28 );
CONST CAL_SMONTHNAME9 = ( 29 );
CONST CAL_SMONTHNAME10 = ( 30 );
CONST CAL_SMONTHNAME11 = ( 31 );
CONST CAL_SMONTHNAME12 = ( 32 );
CONST CAL_SMONTHNAME13 = ( 33 );
CONST CAL_SSHORTDATE = ( 5 );

{+// SetProcessWorkingSetSize */ }
CONST PROCESS_SET_QUOTA = ( 256 );

{+// SetPrinter */ }

{+// SetService */ }

{+// SetStretchBltMode */ }
CONST BLACKONWHITE = ( 1 );
CONST COLORONCOLOR = ( 3 );
CONST HALFTONE = ( 4 );
CONST STRETCH_ANDSCANS = ( 1 );
CONST STRETCH_DELETESCANS = ( 3 );
CONST STRETCH_HALFTONE = ( 4 );
CONST STRETCH_ORSCANS = ( 2 );
CONST WHITEONBLACK = ( 2 );

{+// SetSystemCursor */ }
CONST OCR_NORMAL = ( 32512 );
CONST OCR_IBEAM = ( 32513 );
CONST OCR_WAIT = ( 32514 );
CONST OCR_CROSS = ( 32515 );
CONST OCR_UP = ( 32516 );
CONST OCR_SIZE = ( 32640 );
CONST OCR_ICON = ( 32641 );
CONST OCR_SIZENWSE = ( 32642 );
CONST OCR_SIZENESW = ( 32643 );
CONST OCR_SIZEWE = ( 32644 );
CONST OCR_SIZENS = ( 32645 );
CONST OCR_SIZEALL = ( 32646 );
CONST OCR_NO = ( 32648 );
CONST OCR_APPSTARTING = ( 32650 );

{+// SetTapePosition */ }
CONST TAPE_ABSOLUTE_BLOCK = ( $1 );
CONST TAPE_LOGICAL_BLOCK = ( $2 );
CONST TAPE_REWIND = ( 0 );
CONST TAPE_SPACE_END_OF_DATA = ( $4 );
CONST TAPE_SPACE_FILEMARKS = ( $6 );
CONST TAPE_SPACE_RELATIVE_BLOCKS = ( $5 );
CONST TAPE_SPACE_SEQUENTIAL_FMKS = ( $7 );
CONST TAPE_SPACE_SEQUENTIAL_SMKS = ( $9 );
CONST TAPE_SPACE_SETMARKS = ( $8 );

{+// SetUnhandledExceptionFilter */ }
CONST EXCEPTION_EXECUTE_HANDLER = ( 1 );
CONST EXCEPTION_CONTINUE_EXECUTION = (  - 1 );
CONST EXCEPTION_CONTINUE_SEARCH = ( 0 );

{+// SetWindowPos, DeferWindowPos */ }
CONST HWND_BOTTOM = ( 1 );
CONST HWND_NOTOPMOST = (  - 2 );
CONST HWND_TOP = ( 0 );
CONST HWND_TOPMOST = (  - 1 );
CONST SWP_DRAWFRAME = ( 32 );
CONST SWP_FRAMECHANGED = ( 32 );
CONST SWP_HIDEWINDOW = ( 128 );
CONST SWP_NOACTIVATE = ( 16 );
CONST SWP_NOCOPYBITS = ( 256 );
CONST SWP_NOMOVE = ( 2 );
CONST SWP_NOSIZE = ( 1 );
CONST SWP_NOREDRAW = ( 8 );
CONST SWP_NOZORDER = ( 4 );
CONST SWP_SHOWWINDOW = ( 64 );
CONST SWP_NOOWNERZORDER = ( 512 );
CONST SWP_NOREPOSITION = ( 512 );
CONST SWP_NOSENDCHANGING = ( 1024 );

{+// SHAddToRecentDocs */ }

{+// SHAppBarMessage */ }

{+// SHChangeNotify */ }

{+// ShellProc */ }
CONST HSHELL_ACTIVATESHELLWINDOW = ( 3 );
CONST HSHELL_GETMINRECT = ( 5 );
CONST HSHELL_LANGUAGE = ( 8 );
CONST HSHELL_REDRAW = ( 6 );
CONST HSHELL_TASKMAN = ( 7 );
CONST HSHELL_WINDOWACTIVATED = ( 4 );
CONST HSHELL_WINDOWCREATED = ( 1 );
CONST HSHELL_WINDOWDESTROYED = ( 2 );

{+// SHGetFileInfo */ }

{+// SHGetSpecialFolderLocation */ }

{+// ShowWindow */ }
CONST SW_HIDE = ( 0 );
CONST SW_MAXIMIZE = ( 3 );
CONST SW_MINIMIZE = ( 6 );
CONST SW_NORMAL = ( 1 );
CONST SW_RESTORE = ( 9 );
CONST SW_SHOW = ( 5 );
CONST SW_SHOWDEFAULT = ( 10 );
CONST SW_SHOWMAXIMIZED = ( 3 );
CONST SW_SHOWMINIMIZED = ( 2 );
CONST SW_SHOWMINNOACTIVE = ( 7 );
CONST SW_SHOWNA = ( 8 );
CONST SW_SHOWNOACTIVATE = ( 4 );
CONST SW_SHOWNORMAL = ( 1 );
CONST WPF_RESTORETOMAXIMIZED = ( 2 );
CONST WPF_SETMINPOSITION = ( 1 );

{+// Sleep */ }
CONST INFINITE = $FFFFFFF;

{+// SystemParametersInfo */ }
CONST SPI_GETACCESSTIMEOUT = ( 60 );
CONST SPI_GETANIMATION = ( 72 );
CONST SPI_GETBEEP = ( 1 );
CONST SPI_GETBORDER = ( 5 );
CONST SPI_GETDEFAULTINPUTLANG = ( 89 );
CONST SPI_GETDRAGFULLWINDOWS = ( 38 );
CONST SPI_GETFASTTASKSWITCH = ( 35 );
CONST SPI_GETFILTERKEYS = ( 50 );
CONST SPI_GETFONTSMOOTHING = ( 74 );
CONST SPI_GETGRIDGRANULARITY = ( 18 );
CONST SPI_GETHIGHCONTRAST = ( 66 );
CONST SPI_GETICONMETRICS = ( 45 );
CONST SPI_GETICONTITLELOGFONT = ( 31 );
CONST SPI_GETICONTITLEWRAP = ( 25 );
CONST SPI_GETKEYBOARDDELAY = ( 22 );
CONST SPI_GETKEYBOARDPREF = ( 68 );
CONST SPI_GETKEYBOARDSPEED = ( 10 );
CONST SPI_GETLOWPOWERACTIVE = ( 83 );
CONST SPI_GETLOWPOWERTIMEOUT = ( 79 );
CONST SPI_GETMENUDROPALIGNMENT = ( 27 );
CONST SPI_GETMINIMIZEDMETRICS = ( 43 );
CONST SPI_GETMOUSE = ( 3 );
CONST SPI_GETMOUSEKEYS = ( 54 );
CONST SPI_GETMOUSETRAILS = ( 94 );
CONST SPI_GETNONCLIENTMETRICS = ( 41 );
CONST SPI_GETPOWEROFFACTIVE = ( 84 );
CONST SPI_GETPOWEROFFTIMEOUT = ( 80 );
CONST SPI_GETSCREENREADER = ( 70 );
CONST SPI_GETSCREENSAVEACTIVE = ( 16 );
CONST SPI_GETSCREENSAVETIMEOUT = ( 14 );
CONST SPI_GETSERIALKEYS = ( 62 );
CONST SPI_GETSHOWSOUNDS = ( 56 );
CONST SPI_GETSOUNDSENTRY = ( 64 );
CONST SPI_GETSTICKYKEYS = ( 58 );
CONST SPI_GETTOGGLEKEYS = ( 52 );
CONST SPI_GETWINDOWSEXTENSION = ( 92 );
CONST SPI_GETWORKAREA = ( 48 );
CONST SPI_ICONHORIZONTALSPACING = ( 13 );
CONST SPI_ICONVERTICALSPACING = ( 24 );
CONST SPI_LANGDRIVER = ( 12 );
CONST SPI_SCREENSAVERRUNNING = ( 97 );
CONST SPI_SETACCESSTIMEOUT = ( 61 );
CONST SPI_SETANIMATION = ( 73 );
CONST SPI_SETBEEP = ( 2 );
CONST SPI_SETBORDER = ( 6 );
CONST SPI_SETDEFAULTINPUTLANG = ( 90 );
CONST SPI_SETDESKPATTERN = ( 21 );
CONST SPI_SETDESKWALLPAPER = ( 20 );
CONST SPI_SETDOUBLECLICKTIME = ( 32 );
CONST SPI_SETDOUBLECLKHEIGHT = ( 30 );
CONST SPI_SETDOUBLECLKWIDTH = ( 29 );
CONST SPI_SETDRAGFULLWINDOWS = ( 37 );
CONST SPI_SETDRAGHEIGHT = ( 77 );
CONST SPI_SETDRAGWIDTH = ( 76 );
CONST SPI_SETFASTTASKSWITCH = ( 36 );
CONST SPI_SETFILTERKEYS = ( 51 );
CONST SPI_SETFONTSMOOTHING = ( 75 );
CONST SPI_SETGRIDGRANULARITY = ( 19 );
CONST SPI_SETHANDHELD = ( 78 );
CONST SPI_SETHIGHCONTRAST = ( 67 );
CONST SPI_SETICONMETRICS = ( 46 );
CONST SPI_SETICONTITLELOGFONT = ( 34 );
CONST SPI_SETICONTITLEWRAP = ( 26 );
CONST SPI_SETKEYBOARDDELAY = ( 23 );
CONST SPI_SETKEYBOARDPREF = ( 69 );
CONST SPI_SETKEYBOARDSPEED = ( 11 );
CONST SPI_SETLANGTOGGLE = ( 91 );
CONST SPI_SETLOWPOWERACTIVE = ( 85 );
CONST SPI_SETLOWPOWERTIMEOUT = ( 81 );
CONST SPI_SETMENUDROPALIGNMENT = ( 28 );
CONST SPI_SETMINIMIZEDMETRICS = ( 44 );
CONST SPI_SETMOUSE = ( 4 );
CONST SPI_SETMOUSEBUTTONSWAP = ( 33 );
CONST SPI_SETMOUSEKEYS = ( 55 );
CONST SPI_SETMOUSETRAILS = ( 93 );
CONST SPI_SETNONCLIENTMETRICS = ( 42 );
CONST SPI_SETPENWINDOWS = ( 49 );
CONST SPI_SETPOWEROFFACTIVE = ( 86 );
CONST SPI_SETPOWEROFFTIMEOUT = ( 82 );
CONST SPI_SETSCREENREADER = ( 71 );
CONST SPI_SETSCREENSAVEACTIVE = ( 17 );
CONST SPI_SETSCREENSAVETIMEOUT = ( 15 );
CONST SPI_SETSERIALKEYS = ( 63 );
CONST SPI_SETSHOWSOUNDS = ( 57 );
CONST SPI_SETSOUNDSENTRY = ( 65 );
CONST SPI_SETSTICKYKEYS = ( 59 );
CONST SPI_SETTOGGLEKEYS = ( 53 );
CONST SPI_SETWORKAREA = ( 47 );
CONST SPIF_UPDATEINIFILE = ( 1 );
CONST SPIF_SENDWININICHANGE = ( 2 );
CONST SPIF_SENDCHANGE = ( 2 );

{+// TrackPopupMenu, TrackPopMenuEx */ }
CONST TPM_CENTERALIGN = ( $4 );
CONST TPM_LEFTALIGN = ( 0 );
CONST TPM_RIGHTALIGN = ( $8 );
CONST TPM_LEFTBUTTON = ( 0 );
CONST TPM_RIGHTBUTTON = ( $2 );
CONST TPM_HORIZONTAL = ( 0 );
CONST TPM_VERTICAL = ( $40 );

{+// TranslateCharsetInfo */ }
CONST TCI_SRCCHARSET = ( 1 );
CONST TCI_SRCCODEPAGE = ( 2 );
CONST TCI_SRCFONTSIG = ( 3 );

{+// VerFindFile */ }
CONST VFFF_ISSHAREDFILE = ( 1 );
CONST VFF_CURNEDEST = ( 1 );
CONST VFF_FILEINUSE = ( 2 );
CONST VFF_BUFFTOOSMALL = ( 4 );

{+// VerInstallFile */ }
CONST VIFF_FORCEINSTALL = ( 1 );
CONST VIFF_DONTDELETEOLD = ( 2 );
CONST VIF_TEMPFILE = ( $1 );
CONST VIF_MISMATCH = ( $2 );
CONST VIF_SRCOLD = ( $4 );
CONST VIF_DIFFLANG = ( $8 );
CONST VIF_DIFFCODEPG = ( $10 );
CONST VIF_DIFFTYPE = ( $20 );
CONST VIF_WRITEPROT = ( $40 );
CONST VIF_FILEINUSE = ( $80 );
CONST VIF_OUTOFSPACE = ( $100 );
CONST VIF_ACCESSVIOLATION = ( $200 );
CONST VIF_SHARINGVIOLATION = ( $400 );
CONST VIF_CANNOTCREATE = ( $800 );
CONST VIF_CANNOTDELETE = ( $1000 );
CONST VIF_CANNOTDELETECUR = ( $4000 );
CONST VIF_CANNOTRENAME = ( $2000 );
CONST VIF_OUTOFMEMORY = ( $8000 );
CONST VIF_CANNOTREADSRC = ( $10000 );
CONST VIF_CANNOTREADDST = ( $20000 );
CONST VIF_BUFFTOOSMALL = ( $40000 );

{+// WideCharToMultiByte */ }
CONST WC_COMPOSITECHECK = ( 512 );
CONST WC_DISCARDNS = ( 16 );
CONST WC_SEPCHARS = ( 32 );
CONST WC_DEFAULTCHAR = ( 64 );

{+// WinHelp */ }
CONST HELP_COMMAND = ( $102 );
CONST HELP_CONTENTS = ( $3 );
CONST HELP_CONTEXT = ( $1 );
CONST HELP_CONTEXTPOPUP = ( $8 );
CONST HELP_FORCEFILE = ( $9 );
CONST HELP_HELPONHELP = ( $4 );
CONST HELP_INDEX = ( $3 );
CONST HELP_KEY = ( $101 );
CONST HELP_MULTIKEY = ( $201 );
CONST HELP_PARTIALKEY = ( $105 );
CONST HELP_QUIT = ( $2 );
CONST HELP_SETCONTENTS = ( $5 );
CONST HELP_SETINDEX = ( $5 );
CONST HELP_CONTEXTMENU = ( $a );
CONST HELP_FINDER = ( $b );
CONST HELP_WM_HELP = ( $c );
CONST HELP_TCARD = ( $8000 );
CONST HELP_TCARD_DATA = ( $10 );
CONST HELP_TCARD_OTHER_CALLER = ( $11 );

{+// WNetAddConnectino2 */ }
CONST CONNECT_UPDATE_PROFILE = ( 1 );

{+// WNetConnectionDialog, WNetDisconnectDialog, WNetOpenEnum */ }
CONST RESOURCETYPE_DISK = ( 1 );
CONST RESOURCETYPE_PRINT = ( 2 );
CONST RESOURCETYPE_ANY = ( 0 );
CONST RESOURCE_CONNECTED = ( 1 );
CONST RESOURCE_GLOBALNET = ( 2 );
CONST RESOURCE_REMEMBERED = ( 3 );
CONST RESOURCEUSAGE_CONNECTABLE = ( 1 );
CONST RESOURCEUSAGE_CONTAINER = ( 2 );

{+// WNetGetResourceInformation, WNetGetResourceParent */ }
CONST WN_BAD_NETNAME = ( $43 );
CONST WN_EXTENDED_ERROR = ( $4b8 );
CONST WN_MORE_DATA = ( $ea );
CONST WN_NO_NETWORK = ( $4c6 );
CONST WN_SUCCESS = ( 0 );
CONST WN_ACCESS_DENIED = ( $5 );
CONST WN_BAD_PROVIDER = ( $4b4 );
CONST WN_NOT_AUTHENTICATED = ( $4dc );

{+// WNetGetUniversalName */ }
CONST UNIVERSAL_NAME_INFO_LEVEL = ( 1 );
CONST REMOTE_NAME_INFO_LEVEL = ( 2 );

{+// GetExitCodeThread */ }
CONST STILL_ACTIVE = ( $103 );

{+// COMMPROP structure */ }
CONST SP_SERIALCOMM = ( $1 );
CONST BAUD_075 = ( $1 );
CONST BAUD_110 = ( $2 );
CONST BAUD_134_5 = ( $4 );
CONST BAUD_150 = ( $8 );
CONST BAUD_300 = ( $10 );
CONST BAUD_600 = ( $20 );
CONST BAUD_1200 = ( $40 );
CONST BAUD_1800 = ( $80 );
CONST BAUD_2400 = ( $100 );
CONST BAUD_4800 = ( $200 );
CONST BAUD_7200 = ( $400 );
CONST BAUD_9600 = ( $800 );
CONST BAUD_14400 = ( $1000 );
CONST BAUD_19200 = ( $2000 );
CONST BAUD_38400 = ( $4000 );
CONST BAUD_56K = ( $8000 );
CONST BAUD_57600 = ( $40000 );
CONST BAUD_115200 = ( $20000 );
CONST BAUD_128K = ( $10000 );
CONST BAUD_USER = ( $10000000 );
CONST PST_FAX = ( $21 );
CONST PST_LAT = ( $101 );
CONST PST_MODEM = ( $6 );
CONST PST_NETWORK_BRIDGE = ( $100 );
CONST PST_PARALLELPORT = ( $2 );
CONST PST_RS232 = ( $1 );
CONST PST_RS422 = ( $3 );
CONST PST_RS423 = ( $4 );
CONST PST_RS449 = ( $5 );
CONST PST_SCANNER = ( $22 );
CONST PST_TCPIP_TELNET = ( $102 );
CONST PST_UNSPECIFIED = ( 0 );
CONST PST_X25 = ( $103 );
CONST PCF_16BITMODE = ( $200 );
CONST PCF_DTRDSR = ( $1 );
CONST PCF_INTTIMEOUTS = ( $80 );
CONST PCF_PARITY_CHECK = ( $8 );
CONST PCF_RLSD = ( $4 );
CONST PCF_RTSCTS = ( $2 );
CONST PCF_SETXCHAR = ( $20 );
CONST PCF_SPECIALCHARS = ( $100 );
CONST PCF_TOTALTIMEOUTS = ( $40 );
CONST PCF_XONXOFF = ( $10 );
CONST SP_BAUD = ( $2 );
CONST SP_DATABITS = ( $4 );
CONST SP_HANDSHAKING = ( $10 );
CONST SP_PARITY = ( $1 );
CONST SP_PARITY_CHECK = ( $20 );
CONST SP_RLSD = ( $40 );
CONST SP_STOPBITS = ( $8 );
CONST DATABITS_5 = ( 1 );
CONST DATABITS_6 = ( 2 );
CONST DATABITS_7 = ( 4 );
CONST DATABITS_8 = ( 8 );
CONST DATABITS_16 = ( 16 );
CONST DATABITS_16X = ( 32 );
CONST STOPBITS_10 = ( 1 );
CONST STOPBITS_15 = ( 2 );
CONST STOPBITS_20 = ( 4 );
CONST PARITY_NONE = ( 256 );
CONST PARITY_ODD = ( 512 );
CONST PARITY_EVEN = ( 1024 );
CONST PARITY_MARK = ( 2048 );
CONST PARITY_SPACE = ( 4096 );
CONST COMMPROP_INITIALIZED = ( $e73cf52e );

{+// DCB structure */ }
CONST CBR_110 = ( 110 );
CONST CBR_300 = ( 300 );
CONST CBR_600 = ( 600 );
CONST CBR_1200 = ( 1200 );
CONST CBR_2400 = ( 2400 );
CONST CBR_4800 = ( 4800 );
CONST CBR_9600 = ( 9600 );
CONST CBR_14400 = ( 14400 );
CONST CBR_19200 = ( 19200 );
CONST CBR_38400 = ( 38400 );
CONST CBR_56000 = ( 56000 );
CONST CBR_57600 = ( 57600 );
CONST CBR_115200 = ( 115200 );
CONST CBR_128000 = ( 128000 );
CONST CBR_256000 = ( 256000 );
CONST DTR_CONTROL_DISABLE = ( 0 );
CONST DTR_CONTROL_ENABLE = ( 1 );
CONST DTR_CONTROL_HANDSHAKE = ( 2 );
CONST RTS_CONTROL_DISABLE = ( 0 );
CONST RTS_CONTROL_ENABLE = ( 1 );
CONST RTS_CONTROL_HANDSHAKE = ( 2 );
CONST RTS_CONTROL_TOGGLE = ( 3 );
CONST EVENPARITY = ( 2 );
CONST MARKPARITY = ( 3 );
CONST NOPARITY = ( 0 );
CONST ODDPARITY = ( 1 );
CONST SPACEPARITY = ( 4 );
CONST ONESTOPBIT = ( 0 );
CONST ONE5STOPBITS = ( 1 );
CONST TWOSTOPBITS = ( 2 );

{+// Debugging events */ }
CONST CREATE_PROCESS_DEBUG_EVENT = ( 3 );
CONST CREATE_THREAD_DEBUG_EVENT = ( 2 );
CONST EXCEPTION_DEBUG_EVENT = ( 1 );
CONST EXIT_PROCESS_DEBUG_EVENT = ( 5 );
CONST EXIT_THREAD_DEBUG_EVENT = ( 4 );
CONST LOAD_DLL_DEBUG_EVENT = ( 6 );
CONST OUTPUT_DEBUG_STRING_EVENT = ( 8 );
CONST UNLOAD_DLL_DEBUG_EVENT = ( 7 );
CONST RIP_EVENT = ( 9 );

{+// PROCESS_HEAP_ENTRY structure */ }
CONST PROCESS_HEAP_REGION = ( 1 );
CONST PROCESS_HEAP_UNCOMMITTED_RANGE = ( 2 );
CONST PROCESS_HEAP_ENTRY_BUSY = ( 4 );
CONST PROCESS_HEAP_ENTRY_MOVEABLE = ( 16 );
CONST PROCESS_HEAP_ENTRY_DDESHARE = ( 32 );

{+// Win32s */ }
CONST HINSTANCE_ERROR = ( 32 );

{+// WIN32_STREAM_ID structure */ }
CONST BACKUP_DATA = ( 1 );
CONST BACKUP_EA_DATA = ( 2 );
CONST BACKUP_SECURITY_DATA = ( 3 );
CONST BACKUP_ALTERNATE_DATA = ( 4 );
CONST BACKUP_LINK = ( 5 );
CONST STREAM_MODIFIED_WHEN_READ = ( 1 );
CONST STREAM_CONTAINS_SECURITY = ( 2 );

{+// STARTUPINFO structure */ }
CONST STARTF_USESHOWWINDOW = ( 1 );
CONST STARTF_USEPOSITION = ( 4 );
CONST STARTF_USESIZE = ( 2 );
CONST STARTF_USECOUNTCHARS = ( 8 );
CONST STARTF_USEFILLATTRIBUTE = ( 16 );
CONST STARTF_RUNFULLSCREEN = ( 32 );
CONST STARTF_FORCEONFEEDBACK = ( 64 );
CONST STARTF_FORCEOFFFEEDBACK = ( 128 );
CONST STARTF_USESTDHANDLES = ( 256 );
CONST STARTF_USEHOTKEY = ( 512 );

{+// OSVERSIONINFO structure */ }
CONST VER_PLATFORM_WIN32s = ( 0 );
CONST VER_PLATFORM_WIN32_WINDOWS = ( 1 );
CONST VER_PLATFORM_WIN32_NT = ( 2 );

{+// PROPSHEETPAGE structure */ }
CONST MAXPROPPAGES = ( 100 );
CONST PSP_DEFAULT = ( 0 );
CONST PSP_DLGINDIRECT = ( 1 );
CONST PSP_HASHELP = ( 32 );
CONST PSP_USECALLBACK = ( 128 );
CONST PSP_USEHICON = ( 2 );
CONST PSP_USEICONID = ( 4 );
CONST PSP_USEREFPARENT = ( 64 );
CONST PSP_USETITLE = ( 8 );
CONST PSP_RTLREADING = ( 16 );

{+// PROPSHEETHEADER structure */ }
CONST PSH_DEFAULT = ( 0 );
CONST PSH_HASHELP = ( 512 );
CONST PSH_MODELESS = ( 1024 );
CONST PSH_NOAPPLYNOW = ( 128 );
CONST PSH_PROPSHEETPAGE = ( 8 );
CONST PSH_PROPTITLE = ( 1 );
CONST PSH_USECALLBACK = ( 256 );
CONST PSH_USEHICON = ( 2 );
CONST PSH_USEICONID = ( 4 );
CONST PSH_USEPSTARTPAGE = ( 64 );
CONST PSH_WIZARD = ( 32 );
CONST PSH_RTLREADING = ( 2048 );
CONST PSCB_INITIALIZED = ( 1 );
CONST PSCB_PRECREATE = ( 2 );

{+// PSN_APPLY message */ }
CONST PSNRET_NOERROR = ( 0 );
CONST PSNRET_INVALID_NOCHANGEPAGE = ( 2 );

{+// Property Sheet */ }
CONST PSBTN_APPLYNOW = ( 4 );
CONST PSBTN_BACK = ( 0 );
CONST PSBTN_CANCEL = ( 5 );
CONST PSBTN_FINISH = ( 2 );
CONST PSBTN_HELP = ( 6 );
CONST PSBTN_NEXT = ( 1 );
CONST PSBTN_OK = ( 3 );
CONST PSWIZB_BACK = ( 1 );
CONST PSWIZB_NEXT = ( 2 );
CONST PSWIZB_FINISH = ( 4 );
CONST PSWIZB_DISABLEDFINISH = ( 8 );
CONST ID_PSREBOOTSYSTEM = ( 3 );
CONST ID_PSRESTARTWINDOWS = ( 2 );
CONST WIZ_BODYCX = ( 184 );
CONST WIZ_BODYX = ( 92 );
CONST WIZ_CXBMP = ( 80 );
CONST WIZ_CXDLG = ( 276 );
CONST WIZ_CYDLG = ( 140 );

{+// VX_FIXEDFILEINFO structure */ }
CONST VS_FILE_INFO = ( MAKEINTRESOURCE ( 16 ) );
CONST VS_VERSION_INFO = ( 1 );
CONST VS_FF_DEBUG = ( $1 );
CONST VS_FF_INFOINFERRED = ( $10 );
CONST VS_FF_PATCHED = ( $4 );
CONST VS_FF_PRERELEASE = ( $2 );
CONST VS_FF_PRIVATEBUILD = ( $8 );
CONST VS_FF_SPECIALBUILD = ( $20 );
CONST VOS_UNKNOWN = ( 0 );
CONST VOS_DOS = ( $10000 );
CONST VOS_OS216 = ( $20000 );
CONST VOS_OS232 = ( $30000 );
CONST VOS_NT = ( $40000 );
CONST VOS_DOS_WINDOWS16 = ( $10001 );
CONST VOS_DOS_WINDOWS32 = ( $10004 );
CONST VOS_OS216_PM16 = ( $20002 );
CONST VOS_OS232_PM32 = ( $30003 );
CONST VOS_NT_WINDOWS32 = ( $40004 );
CONST VFT_UNKNOWN = ( 0 );
CONST VFT_APP = ( $1 );
CONST VFT_DLL = ( $2 );
CONST VFT_DRV = ( $3 );
CONST VFT_FONT = ( $4 );
CONST VFT_VXD = ( $5 );
CONST VFT_STATIC_LIB = ( $7 );
CONST VFT2_UNKNOWN = ( 0 );
CONST VFT2_DRV_PRINTER = ( $1 );
CONST VFT2_DRV_KEYBOARD = ( $2 );
CONST VFT2_DRV_LANGUAGE = ( $3 );
CONST VFT2_DRV_DISPLAY = ( $4 );
CONST VFT2_DRV_MOUSE = ( $5 );
CONST VFT2_DRV_NETWORK = ( $6 );
CONST VFT2_DRV_SYSTEM = ( $7 );
CONST VFT2_DRV_INSTALLABLE = ( $8 );
CONST VFT2_DRV_SOUND = ( $9 );
CONST VFT2_FONT_RASTER = ( $1 );
CONST VFT2_FONT_VECTOR = ( $2 );
CONST VFT2_FONT_TRUETYPE = ( $3 );

{+// PANOSE structure */ }
CONST PAN_ANY = ( 0 );
CONST PAN_NO_FIT = ( 1 );
CONST PAN_FAMILY_TEXT_DISPLAY = ( 2 );
CONST PAN_FAMILY_SCRIPT = ( 3 );
CONST PAN_FAMILY_DECORATIVE = ( 4 );
CONST PAN_FAMILY_PICTORIAL = ( 5 );
CONST PAN_SERIF_COVE = ( 2 );
CONST PAN_SERIF_OBTUSE_COVE = ( 3 );
CONST PAN_SERIF_SQUARE_COVE = ( 4 );
CONST PAN_SERIF_OBTUSE_SQUARE_COVE = ( 5 );
CONST PAN_SERIF_SQUARE = ( 6 );
CONST PAN_SERIF_THIN = ( 7 );
CONST PAN_SERIF_BONE = ( 8 );
CONST PAN_SERIF_EXAGGERATED = ( 9 );
CONST PAN_SERIF_TRIANGLE = ( 10 );
CONST PAN_SERIF_NORMAL_SANS = ( 11 );
CONST PAN_SERIF_OBTUSE_SANS = ( 12 );
CONST PAN_SERIF_PERP_SANS = ( 13 );
CONST PAN_SERIF_FLARED = ( 14 );
CONST PAN_SERIF_ROUNDED = ( 15 );
CONST PAN_WEIGHT_VERY_LIGHT = ( 2 );
CONST PAN_WEIGHT_LIGHT = ( 3 );
CONST PAN_WEIGHT_THIN = ( 4 );
CONST PAN_WEIGHT_BOOK = ( 5 );
CONST PAN_WEIGHT_MEDIUM = ( 6 );
CONST PAN_WEIGHT_DEMI = ( 7 );
CONST PAN_WEIGHT_BOLD = ( 8 );
CONST PAN_WEIGHT_HEAVY = ( 9 );
CONST PAN_WEIGHT_BLACK = ( 10 );
CONST PAN_WEIGHT_NORD = ( 11 );
CONST PAN_PROP_OLD_STYLE = ( 2 );
CONST PAN_PROP_MODERN = ( 3 );
CONST PAN_PROP_EVEN_WIDTH = ( 4 );
CONST PAN_PROP_EXPANDED = ( 5 );
CONST PAN_PROP_CONDENSED = ( 6 );
CONST PAN_PROP_VERY_EXPANDED = ( 7 );
CONST PAN_PROP_VERY_CONDENSED = ( 8 );
CONST PAN_PROP_MONOSPACED = ( 9 );
CONST PAN_CONTRAST_NONE = ( 2 );
CONST PAN_CONTRAST_VERY_LOW = ( 3 );
CONST PAN_CONTRAST_LOW = ( 4 );
CONST PAN_CONTRAST_MEDIUM_LOW = ( 5 );
CONST PAN_CONTRAST_MEDIUM = ( 6 );
CONST PAN_CONTRAST_MEDIUM_HIGH = ( 7 );
CONST PAN_CONTRAST_HIGH = ( 8 );
CONST PAN_CONTRAST_VERY_HIGH = ( 9 );
CONST PAN_STROKE_GRADUAL_DIAG = ( 2 );
CONST PAN_STROKE_GRADUAL_TRAN = ( 3 );
CONST PAN_STROKE_GRADUAL_VERT = ( 4 );
CONST PAN_STROKE_GRADUAL_HORZ = ( 5 );
CONST PAN_STROKE_RAPID_VERT = ( 6 );
CONST PAN_STROKE_RAPID_HORZ = ( 7 );
CONST PAN_STROKE_INSTANT_VERT = ( 8 );
CONST PAN_STRAIGHT_ARMS_HORZ = ( 2 );
CONST PAN_STRAIGHT_ARMS_WEDGE = ( 3 );
CONST PAN_STRAIGHT_ARMS_VERT = ( 4 );
CONST PAN_STRAIGHT_ARMS_SINGLE_SERIF = ( 5 );
CONST PAN_STRAIGHT_ARMS_DOUBLE_SERIF = ( 6 );
CONST PAN_BENT_ARMS_HORZ = ( 7 );
CONST PAN_BENT_ARMS_VERT = ( 9 );
CONST PAN_BENT_ARMS_WEDGE = ( 8 );
CONST PAN_BENT_ARMS_SINGLE_SERIF = ( 10 );
CONST PAN_BENT_ARMS_DOUBLE_SERIF = ( 11 );
CONST PAN_LETT_NORMAL_CONTACT = ( 2 );
CONST PAN_LETT_NORMAL_WEIGHTED = ( 3 );
CONST PAN_LETT_NORMAL_BOXED = ( 4 );
CONST PAN_LETT_NORMAL_FLATTENED = ( 5 );
CONST PAN_LETT_NORMAL_ROUNDED = ( 6 );
CONST PAN_LETT_NORMAL_OFF_CENTER = ( 7 );
CONST PAN_LETT_NORMAL_SQUARE = ( 8 );
CONST PAN_LETT_OBLIQUE_CONTACT = ( 9 );
CONST PAN_LETT_OBLIQUE_WEIGHTED = ( 10 );
CONST PAN_LETT_OBLIQUE_BOXED = ( 11 );
CONST PAN_LETT_OBLIQUE_FLATTENED = ( 12 );
CONST PAN_LETT_OBLIQUE_ROUNDED = ( 13 );
CONST PAN_LETT_OBLIQUE_OFF_CENTER = ( 14 );
CONST PAN_LETT_OBLIQUE_SQUARE = ( 15 );
CONST PAN_MIDLINE_STANDARD_TRIMMED = ( 2 );
CONST PAN_MIDLINE_STANDARD_POINTED = ( 3 );
CONST PAN_MIDLINE_STANDARD_SERIFED = ( 4 );
CONST PAN_MIDLINE_HIGH_TRIMMED = ( 5 );
CONST PAN_MIDLINE_HIGH_POINTED = ( 6 );
CONST PAN_MIDLINE_HIGH_SERIFED = ( 7 );
CONST PAN_MIDLINE_CONSTANT_TRIMMED = ( 8 );
CONST PAN_MIDLINE_CONSTANT_POINTED = ( 9 );
CONST PAN_MIDLINE_CONSTANT_SERIFED = ( 10 );
CONST PAN_MIDLINE_LOW_TRIMMED = ( 11 );
CONST PAN_MIDLINE_LOW_POINTED = ( 12 );
CONST PAN_MIDLINE_LOW_SERIFED = ( 13 );
CONST PAN_XHEIGHT_CONSTANT_SMALL = ( 2 );
CONST PAN_XHEIGHT_CONSTANT_STD = ( 3 );
CONST PAN_XHEIGHT_CONSTANT_LARGE = ( 4 );
CONST PAN_XHEIGHT_DUCKING_SMALL = ( 5 );
CONST PAN_XHEIGHT_DUCKING_STD = ( 6 );
CONST PAN_XHEIGHT_DUCKING_LARGE = ( 7 );

{+// PALETTENTRY structure */ }
CONST PC_EXPLICIT = ( 2 );
CONST PC_NOCOLLAPSE = ( 4 );
CONST PC_RESERVED = ( 1 );

{+// LOGBRUSH structure */ }
CONST BS_DIBPATTERN = ( 5 );
CONST BS_DIBPATTERN8X8 = ( 8 );
CONST BS_DIBPATTERNPT = ( 6 );
CONST BS_HATCHED = ( 2 );
CONST BS_HOLLOW = ( 1 );
CONST BS_NULL = ( 1 );
CONST BS_PATTERN = ( 3 );
CONST BS_PATTERN8X8 = ( 7 );
CONST BS_SOLID = ( 0 );

{+// DEVMODE structure */ }
CONST DM_ORIENTATION = ( $1 );
CONST DM_PAPERSIZE = ( $2 );
CONST DM_PAPERLENGTH = ( $4 );
CONST DM_PAPERWIDTH = ( $8 );
CONST DM_SCALE = ( $10 );
CONST DM_COPIES = ( $100 );
CONST DM_DEFAULTSOURCE = ( $200 );
CONST DM_PRINTQUALITY = ( $400 );
CONST DM_COLOR = ( $800 );
CONST DM_DUPLEX = ( $1000 );
CONST DM_YRESOLUTION = ( $2000 );
CONST DM_TTOPTION = ( $4000 );
CONST DM_COLLATE = ( $8000 );
CONST DM_FORMNAME = ( $10000 );
CONST DM_LOGPIXELS = ( $20000 );
{Const DM_BITSPERPEL = ($40000);
Const DM_PELSWIDTH = ($80000);
Const DM_PELSHEIGHT = ($100000);
Const DM_DISPLAYFLAGS = ($200000);
Const DM_DISPLAYFREQUENCY = ($400000);}
CONST DM_ICMMETHOD = ( $800000 );
CONST DM_ICMINTENT = ( $1000000 );
CONST DM_MEDIATYPE = ( $2000000 );
CONST DM_DITHERTYPE = ( $4000000 );
CONST DMORIENT_LANDSCAPE = ( 2 );
CONST DMORIENT_PORTRAIT = ( 1 );
CONST DMPAPER_LETTER = ( 1 );
CONST DMPAPER_LEGAL = ( 5 );
CONST DMPAPER_A4 = ( 9 );
CONST DMPAPER_CSHEET = ( 24 );
CONST DMPAPER_DSHEET = ( 25 );
CONST DMPAPER_ESHEET = ( 26 );
CONST DMPAPER_LETTERSMALL = ( 2 );
CONST DMPAPER_TABLOID = ( 3 );
CONST DMPAPER_LEDGER = ( 4 );
CONST DMPAPER_STATEMENT = ( 6 );
CONST DMPAPER_EXECUTIVE = ( 7 );
CONST DMPAPER_A3 = ( 8 );
CONST DMPAPER_A4SMALL = ( 10 );
CONST DMPAPER_A5 = ( 11 );
CONST DMPAPER_B4 = ( 12 );
CONST DMPAPER_B5 = ( 13 );
CONST DMPAPER_FOLIO = ( 14 );
CONST DMPAPER_QUARTO = ( 15 );
// CONST DMPAPER_1$14 = ( 16 );
CONST DMPAPER_11X17 = ( 17 );
CONST DMPAPER_NOTE = ( 18 );
CONST DMPAPER_ENV_9 = ( 19 );
CONST DMPAPER_ENV_10 = ( 20 );
CONST DMPAPER_ENV_11 = ( 21 );
CONST DMPAPER_ENV_12 = ( 22 );
CONST DMPAPER_ENV_14 = ( 23 );
CONST DMPAPER_ENV_DL = ( 27 );
CONST DMPAPER_ENV_C5 = ( 28 );
CONST DMPAPER_ENV_C3 = ( 29 );
CONST DMPAPER_ENV_C4 = ( 30 );
CONST DMPAPER_ENV_C6 = ( 31 );
CONST DMPAPER_ENV_C65 = ( 32 );
CONST DMPAPER_ENV_B4 = ( 33 );
CONST DMPAPER_ENV_B5 = ( 34 );
CONST DMPAPER_ENV_B6 = ( 35 );
CONST DMPAPER_ENV_ITALY = ( 36 );
CONST DMPAPER_ENV_MONARCH = ( 37 );
CONST DMPAPER_ENV_PERSONAL = ( 38 );
CONST DMPAPER_FANFOLD_US = ( 39 );
CONST DMPAPER_FANFOLD_STD_GERMAN = ( 40 );
CONST DMPAPER_FANFOLD_LGL_GERMAN = ( 41 );
CONST DMRES_HIGH = (  - 4 );
CONST DMRES_MEDIUM = (  - 3 );
CONST DMRES_LOW = (  - 2 );
CONST DMRES_DRAFT = (  - 1 );
CONST DMCOLOR_COLOR = ( 2 );
CONST DMCOLOR_MONOCHROME = ( 1 );
CONST DMDUP_SIMPLEX = ( 1 );
CONST DMDUP_HORIZONTAL = ( 3 );
CONST DMDUP_VERTICAL = ( 2 );
CONST DMTT_BITMAP = ( 1 );
CONST DMTT_DOWNLOAD = ( 2 );
CONST DMTT_SUBDEV = ( 3 );
CONST DMCOLLATE_TRUE = ( 1 );
CONST DMCOLLATE_FALSE = ( 0 );
CONST DM_GRAYSCALE = ( 1 );
CONST DM_INTERLACED = ( 2 );
CONST DMICMMETHOD_NONE = ( 1 );
CONST DMICMMETHOD_SYSTEM = ( 2 );
CONST DMICMMETHOD_DRIVER = ( 3 );
CONST DMICMMETHOD_DEVICE = ( 4 );
CONST DMICMMETHOD_USER = ( 256 );
CONST DMICM_SATURATE = ( 1 );
CONST DMICM_CONTRAST = ( 2 );
CONST DMICM_COLORMETRIC = ( 3 );
CONST DMICM_USER = ( 256 );
CONST DMMEDIA_STANDARD = ( 1 );
CONST DMMEDIA_GLOSSY = ( 3 );
CONST DMMEDIA_TRANSPARENCY = ( 2 );
CONST DMMEDIA_USER = ( 256 );
CONST DMDITHER_NONE = ( 1 );
CONST DMDITHER_COARSE = ( 2 );
CONST DMDITHER_FINE = ( 3 );
CONST DMDITHER_LINEART = ( 4 );
CONST DMDITHER_GRAYSCALE = ( 10 );
CONST DMDITHER_USER = ( 256 );

{+// RGNDATAHEADER structure */ }
CONST RDH_RECTANGLES = ( 1 );

{+// TTPOLYGONHEADER structure */ }
CONST TT_POLYGON_TYPE = ( 24 );

{+// TTPOLYCURVE structure */ }
CONST TT_PRIM_LINE = ( 1 );
CONST TT_PRIM_QSPLINE = ( 2 );

{+// GCP_RESULTS structure */ }
CONST GCPCLASS_ARABIC = ( 2 );
CONST GCPCLASS_HEBREW = ( 2 );
CONST GCPCLASS_LATIN = ( 1 );
CONST GCPCLASS_LATINNUMBER = ( 5 );
CONST GCPCLASS_LOCALNUMBER = ( 4 );
CONST GCPCLASS_LATINNUMERICSEPARATOR = ( 7 );
CONST GCPCLASS_LATINNUMERICTERMINATOR = ( 6 );
CONST GCPCLASS_NEUTRAL = ( 3 );
CONST GCPCLASS_NUMERICSEPARATOR = ( 8 );
CONST GCPCLASS_PREBOUNDLTR = ( 128 );
CONST GCPCLASS_PREBOUNDRTL = ( 64 );
CONST GCPCLASS_POSTBOUNDLTR = ( 32 );
CONST GCPCLASS_POSTBOUNDRTL = ( 16 );
CONST GCPGLYPH_LINKBEFORE = ( 32768 );
CONST GCPGLYPH_LINKAFTER = ( 16384 );

{+// RASTERIZER_STATUS structure */ }
CONST TT_AVAILABLE = ( 1 );
CONST TT_ENABLED = ( 2 );

{+// COLORADJUSTMENT structure */ }
CONST CA_NEGATIVE = ( 1 );
CONST CA_LOG_FILTER = ( 2 );
CONST ILLUMINANT_DEVICE_DEFAULT = ( 0 );
CONST ILLUMINANT_A = ( 1 );
CONST ILLUMINANT_B = ( 2 );
CONST ILLUMINANT_C = ( 3 );
CONST ILLUMINANT_D50 = ( 4 );
CONST ILLUMINANT_D55 = ( 5 );
CONST ILLUMINANT_D65 = ( 6 );
CONST ILLUMINANT_D75 = ( 7 );
CONST ILLUMINANT_F2 = ( 8 );
CONST ILLUMINANT_TUNGSTEN = ( 1 );
CONST ILLUMINANT_DAYLIGHT = ( 3 );
CONST ILLUMINANT_FLUORESCENT = ( 8 );
CONST ILLUMINANT_NTSC = ( 3 );

{+// DOCINFO structure */ }
CONST DI_APPBANDING = ( 1 );

{+// EMRMETAHEADER structure */ }
CONST EMR_HEADER = ( 1 );
CONST ENHMETA_SIGNATURE = ( 1179469088 );

{+// RTF event masks */ }
CONST ENM_CHANGE = ( 1 );
CONST ENM_CORRECTTEXT = ( 4194304 );
CONST ENM_DROPFILES = ( 1048576 );
CONST ENM_KEYEVENTS = ( 65536 );
CONST ENM_MOUSEEVENTS = ( 131072 );
CONST ENM_PROTECTED = ( 2097152 );
CONST ENM_REQUESTRESIZE = ( 262144 );
CONST ENM_SCROLL = ( 4 );
CONST ENM_SELCHANGE = ( 524288 );
CONST ENM_UPDATE = ( 2 );
CONST ENM_NONE = ( 0 );

{+// RTF styles */ }
CONST ES_DISABLENOSCROLL = ( 8192 );
CONST ES_EX_NOCALLOLEINIT = ( 16777216 );
CONST ES_NOIME = ( 524288 );
CONST ES_SAVESEL = ( 32768 );
CONST ES_SELFIME = ( 262144 );
CONST ES_SUNKEN = ( 16384 );
CONST ES_VERTICAL = ( 4194304 );
CONST ES_SELECTIONBAR = ( 16777216 );

{+// EM_SETOPTIONS message */ }
CONST ECOOP_SET = ( 1 );
CONST ECOOP_OR = ( 2 );
CONST ECOOP_AND = ( 3 );
CONST ECOOP_XOR = ( 4 );
CONST ECO_AUTOWORDSELECTION = ( 1 );
CONST ECO_AUTOVSCROLL = ( 64 );
CONST ECO_AUTOHSCROLL = ( 128 );
CONST ECO_NOHIDESEL = ( 256 );
CONST ECO_READONLY = ( 2048 );
CONST ECO_WANTRETURN = ( 4096 );
CONST ECO_SAVESEL = ( 32768 );
CONST ECO_SELECTIONBAR = ( 16777216 );
CONST ECO_VERTICAL = ( 4194304 );

{+// EM_SETCHARFORMAT message */ }
CONST SCF_WORD = ( 2 );
CONST SCF_SELECTION = ( 1 );

{+// EM_STREAMOUT message */ }
CONST SF_TEXT = ( 1 );
CONST SF_RTF = ( 2 );
CONST SF_RTFNOOBJS = ( 3 );
CONST SF_TEXTIZED = ( 4 );
CONST SFF_SELECTION = ( 32768 );
CONST SFF_PLAINRTF = ( 16384 );

{+// EM_FINDWORDBREAK message */ }
CONST WB_CLASSIFY = ( 3 );
{Const WB_ISDELIMITER = (2);
Const WB_LEFT = (0);}
CONST WB_LEFTBREAK = ( 6 );
CONST WB_PREVBREAK = ( 6 );
CONST WB_MOVEWORDLEFT = ( 4 );
CONST WB_MOVEWORDPREV = ( 4 );
CONST WB_MOVEWORDRIGHT = ( 5 );
CONST WB_MOVEWORDNEXT = ( 5 );
{Const WB_RIGHT = (1);}
CONST WB_RIGHTBREAK = ( 7 );
CONST WB_NEXTBREAK = ( 7 );

{+// EM_GETPUNCTUATION message */ }
CONST PC_LEADING = ( 2 );
CONST PC_FOLLOWING = ( 1 );
CONST PC_DELIMITER = ( 4 );
CONST PC_OVERFLOW = ( 3 );

{+// EM_SETWORDWRAPMODE message */ }
CONST WBF_WORDWRAP = ( 16 );
CONST WBF_WORDBREAK = ( 32 );
CONST WBF_OVERFLOW = ( 64 );
CONST WBF_LEVEL1 = ( 128 );
CONST WBF_LEVEL2 = ( 256 );
CONST WBF_CUSTOM = ( 512 );
CONST WBF_BREAKAFTER = ( 64 );
CONST WBF_BREAKLINE = ( 32 );
CONST WBF_ISWHITE = ( 16 );

{+// CHARFORMAT structure */ }
CONST CFM_BOLD = ( 1 );
CONST CFM_COLOR = ( 1073741824 );
CONST CFM_FACE = ( 536870912 );
CONST CFM_ITALIC = ( 2 );
CONST CFM_OFFSET = ( 268435456 );
CONST CFM_PROTECTED = ( 16 );
CONST CFM_SIZE = ( $80000000 );
CONST CFM_STRIKEOUT = ( 8 );
CONST CFM_UNDERLINE = ( 4 );
CONST CFE_AUTOCOLOR = ( 1073741824 );
CONST CFE_BOLD = ( 1 );
CONST CFE_ITALIC = ( 2 );
CONST CFE_STRIKEOUT = ( 8 );
CONST CFE_UNDERLINE = ( 4 );
CONST CFE_PROTECTED = ( 16 );

{+// PARAFORMAT structure */ }
CONST PFM_ALIGNMENT = ( 8 );
CONST PFM_NUMBERING = ( 32 );
CONST PFM_OFFSET = ( 4 );
CONST PFM_OFFSETINDENT = ( $80000000 );
CONST PFM_RIGHTINDENT = ( 2 );
CONST PFM_STARTINDENT = ( 1 );
CONST PFM_TABSTOPS = ( 16 );
CONST PFN_BULLET = ( 1 );
CONST PFA_LEFT = ( 1 );
CONST PFA_RIGHT = ( 2 );
CONST PFA_CENTER = ( 3 );

{+// SELCHANGE structure */ }
CONST SEL_EMPTY = ( 0 );
CONST SEL_TEXT = ( 1 );
CONST SEL_OBJECT = ( 2 );
CONST SEL_MULTICHAR = ( 4 );
CONST SEL_MULTIOBJECT = ( 8 );

{+// RTF clipboard formats */ }
CONST CF_RTF = 'Rich Text Format';
CONST CF_RETEXTOBJ = 'RichEdit Text and Objects';

{+// DRAWITEMSTRUCT structure */ }
CONST ODT_BUTTON = ( 4 );
CONST ODT_COMBOBOX = ( 3 );
CONST ODT_LISTBOX = ( 2 );
CONST ODT_LISTVIEW = ( 102 );
CONST ODT_MENU = ( 1 );
CONST ODT_STATIC = ( 5 );
CONST ODT_TAB = ( 101 );
CONST ODT_HEADER = ( 100 );
CONST ODA_DRAWENTIRE = ( 1 );
CONST ODA_FOCUS = ( 4 );
CONST ODA_SELECT = ( 2 );
CONST ODS_CHECKED = ( 8 );
CONST ODS_COMBOBOXEDIT = ( 4096 );
CONST ODS_DEFAULT = ( 32 );
CONST ODS_DISABLED = ( 4 );
CONST ODS_FOCUS = ( 16 );
CONST ODS_GRAYED = ( 2 );
CONST ODS_SELECTED = ( 1 );

{+// Common control window classes */ }
CONST ANIMATE_CLASSW : WideChar = ( 'SysAnimate32' );
CONST HOTKEY_CLASSW : WideChar = ( 'msctls_hotkey32' );
CONST PROGRESS_CLASSW : WideChar = ( 'msctls_progress32' );
CONST STATUSCLASSNAMEW : WideChar = ( 'msctls_statusbar32' );
CONST TOOLBARCLASSNAMEW : WideChar = ( 'ToolbarWindow32' );
CONST TOOLTIPS_CLASSW : WideChar = ( 'tooltips_class32' );
CONST TRACKBAR_CLASSW : WideChar = ( 'msctls_trackbar32' );
CONST UPDOWN_CLASSW : WideChar = ( 'msctls_updown32' );
CONST WC_HEADERW : WideChar = ( 'SysHeader32' );
CONST WC_LISTVIEWW : WideChar = ( 'SysListView32' );
CONST WC_TABCONTROLW : WideChar = ( 'SysTabControl32' );
CONST WC_TREEVIEWW : WideChar = ( 'SysTreeView32' );

{+// Common control styles */ }
CONST CCS_ADJUSTABLE = ( $20 );
CONST CCS_BOTTOM = ( $3 );
CONST CCS_NODIVIDER = ( $40 );
CONST CCS_NOMOVEY = ( $2 );
CONST CCS_NOPARENTALIGN = ( $8 );
CONST CCS_NORESIZE = ( $4 );
CONST CCS_TOP = ( $1 );
CONST ANIMATE_CLASSA = 'SysAnimate32';
CONST HOTKEY_CLASSA = 'msctls_hotkey32';
CONST PROGRESS_CLASSA = 'msctls_progress32';
CONST STATUSCLASSNAMEA = 'msctls_statusbar32';
CONST TOOLBARCLASSNAMEA = 'ToolbarWindow32';
CONST TOOLTIPS_CLASSA = 'tooltips_class32';
CONST TRACKBAR_CLASSA = 'msctls_trackbar32';
CONST UPDOWN_CLASSA = 'msctls_updown32';
CONST WC_HEADERA = 'SysHeader32';
CONST WC_LISTVIEWA = 'SysListView32';
CONST WC_TABCONTROLA = 'SysTabControl32';
CONST WC_TREEVIEWA = 'SysTreeView32';
{$IFDEF UNICODE}
CONST ANIMATE_CLASS = ANIMATE_CLASSW;
CONST HOTKEY_CLASS = HOTKEY_CLASSW;
CONST PROGRESS_CLASS = PROGRESS_CLASSW;
CONST STATUSCLASSNAME = STATUSCLASSNAMEW;
CONST TOOLBARCLASSNAME = TOOLBARCLASSNAMEW;
CONST TOOLTIPS_CLASS = TOOLTIPS_CLASSW;
CONST TRACKBAR_CLASS = TRACKBAR_CLASSW;
CONST UPDOWN_CLASS = UPDOWN_CLASSW;
CONST WC_HEADER = WC_HEADERW;
CONST WC_LISTVIEW = WC_LISTVIEWW;
CONST WC_TABCONTROL = WC_TABCONTROLW;
CONST WC_TREEVIEW = WC_TREEVIEWW;
{$ELSE}
CONST ANIMATE_CLASS = ANIMATE_CLASSA;
CONST HOTKEY_CLASS = HOTKEY_CLASSA;
CONST PROGRESS_CLASS = PROGRESS_CLASSA;
CONST STATUSCLASSNAME = STATUSCLASSNAMEA;
CONST TOOLBARCLASSNAME = TOOLBARCLASSNAMEA;
CONST TOOLTIPS_CLASS = TOOLTIPS_CLASSA;
CONST TRACKBAR_CLASS = TRACKBAR_CLASSA;
CONST UPDOWN_CLASS = UPDOWN_CLASSA;
CONST WC_HEADER = WC_HEADERA;
CONST WC_LISTVIEW = WC_LISTVIEWA;
CONST WC_TABCONTROL = WC_TABCONTROLA;
CONST WC_TREEVIEW = WC_TREEVIEWA;
{$ENDIF /* UNICODE */}

{+// Header control styles */ }
CONST HDS_BUTTONS = ( 2 );
CONST HDS_HIDDEN = ( 8 );
CONST HDS_HORZ = ( 0 );

{+// HD_ITEM structure */ }
CONST HDI_BITMAP = ( 16 );
CONST HDI_FORMAT = ( 4 );
CONST HDI_HEIGHT = ( 1 );
CONST HDI_LPARAM = ( 8 );
CONST HDI_TEXT = ( 2 );
CONST HDI_WIDTH = ( 1 );
CONST HDF_CENTER = ( 2 );
CONST HDF_LEFT = ( 0 );
CONST HDF_RIGHT = ( 1 );
CONST HDF_RTLREADING = ( 4 );
CONST HDF_BITMAP = ( 8192 );
CONST HDF_OWNERDRAW = ( 32768 );
CONST HDF_STRING = ( 16384 );
CONST HDF_JUSTIFYMASK = ( 3 );

{+// HD_HITTESTINFO structure */ }
CONST HHT_NOWHERE = ( 1 );
CONST HHT_ONDIVIDER = ( 4 );
CONST HHT_ONDIVOPEN = ( 8 );
CONST HHT_ONHEADER = ( 2 );
CONST HHT_TOLEFT = ( 2048 );
CONST HHT_TORIGHT = ( 1024 );

{+// TBADDBITMAP structure */ }
CONST HINST_COMMCTRL = (  - 1 );
CONST IDB_STD_LARGE_COLOR = ( 1 );
CONST IDB_STD_SMALL_COLOR = ( 0 );
CONST IDB_VIEW_LARGE_COLOR = ( 5 );
CONST IDB_VIEW_SMALL_COLOR = ( 4 );
CONST STD_COPY = ( 1 );
CONST STD_CUT = ( 0 );
CONST STD_DELETE = ( 5 );
CONST STD_FILENEW = ( 6 );
CONST STD_FILEOPEN = ( 7 );
CONST STD_FILESAVE = ( 8 );
CONST STD_FIND = ( 12 );
CONST STD_HELP = ( 11 );
CONST STD_PASTE = ( 2 );
CONST STD_PRINT = ( 14 );
CONST STD_PRINTPRE = ( 9 );
CONST STD_PROPERTIES = ( 10 );
CONST STD_REDOW = ( 4 );
CONST STD_REPLACE = ( 13 );
CONST STD_UNDO = ( 3 );
CONST VIEW_LARGEICONS = ( 0 );
CONST VIEW_SMALLICONS = ( 1 );
CONST VIEW_LIST = ( 2 );
CONST VIEW_DETAILS = ( 3 );
CONST VIEW_SORTNAME = ( 4 );
CONST VIEW_SORTSIZE = ( 5 );
CONST VIEW_SORTDATE = ( 6 );
CONST VIEW_SORTTYPE = ( 7 );

{+// Toolbar styles */ }
CONST TBSTYLE_ALTDRAG = ( 1024 );
CONST TBSTYLE_TOOLTIPS = ( 256 );
CONST TBSTYLE_WRAPABLE = ( 512 );
CONST TBSTYLE_BUTTON = ( 0 );
CONST TBSTYLE_CHECK = ( 2 );
CONST TBSTYLE_CHECKGROUP = ( 6 );
CONST TBSTYLE_GROUP = ( 4 );
CONST TBSTYLE_SEP = ( 1 );

{+// Toolbar states */ }
CONST TBSTATE_CHECKED = ( 1 );
CONST TBSTATE_ENABLED = ( 4 );
CONST TBSTATE_HIDDEN = ( 8 );
CONST TBSTATE_INDETERMINATE = ( 16 );
CONST TBSTATE_PRESSED = ( 2 );
CONST TBSTATE_WRAP = ( 32 );

{+// Tooltip styles */ }
CONST TTS_ALWAYSTIP = ( 1 );
CONST TTS_NOPREFIX = ( 2 );

{+// TOOLINFO structure */ }
CONST TTF_IDISHWND = ( 1 );
CONST TTF_CENTERTIP = ( 2 );
CONST TTF_RTLREADING = ( 4 );
CONST TTF_SUBCLASS = ( 16 );
      TTF_TRACK = 32;
      TTF_ABSOLUTE = 128;
      TTF_TRANSPARENT = 256;
      TTF_DI_SETITEM = 32768;

{+// TTM_SETDELAYTIME message */ }
CONST TTDT_AUTOMATIC = ( 0 );
CONST TTDT_AUTOPOP = ( 2 );
CONST TTDT_INITIAL = ( 3 );
CONST TTDT_RESHOW = ( 1 );

{+// Status window */ }
CONST SBARS_SIZEGRIP = ( 256 );
{Const SBARS_SIZEGRIP = (256);}

{+// DL_DRAGGING message */ }
CONST DL_MOVECURSOR = ( 3 );
CONST DL_COPYCURSOR = ( 2 );
CONST DL_STOPCURSOR = ( 1 );

{+// Up-down control styles */ }
CONST UDS_ALIGNLEFT = ( 8 );
CONST UDS_ALIGNRIGHT = ( 4 );
CONST UDS_ARROWKEYS = ( 32 );
CONST UDS_AUTOBUDDY = ( 16 );
CONST UDS_HORZ = ( 64 );
CONST UDS_NOTHOUSANDS = ( 128 );
CONST UDS_SETBUDDYINT = ( 2 );
CONST UDS_WRAP = ( 1 );

{+// UDM_SETRANGE message */ }
CONST UD_MAXVAL = ( 32767 );
CONST UD_MINVAL = (  - 32767 );

{+// HKM_GETHOTKEY message */ }
CONST HOTKEYF_ALT = ( 4 );
CONST HOTKEYF_CONTROL = ( 2 );
CONST HOTKEYF_EXT = ( 8 );
CONST HOTKEYF_SHIFT = ( 1 );

{+// HKM_SETRULES message */ }
CONST HKCOMB_A = ( 8 );
CONST HKCOMB_C = ( 4 );
CONST HKCOMB_CA = ( 64 );
CONST HKCOMB_NONE = ( 1 );
CONST HKCOMB_S = ( 2 );
CONST HKCOMB_SA = ( 32 );
CONST HKCOMB_SC = ( 16 );
CONST HKCOMB_SCA = ( 128 );

{+// Trackbar styles */ }
CONST TBS_HORZ = ( 0 );
CONST TBS_VERT = ( 2 );
CONST TBS_AUTOTICKS = ( 1 );
CONST TBS_NOTICKS = ( 16 );
CONST TBS_TOP = ( 4 );
CONST TBS_BOTTOM = ( 0 );
CONST TBS_LEFT = ( 4 );
CONST TBS_RIGHT = ( 0 );
CONST TBS_BOTH = ( 8 );
CONST TBS_ENABLESELRANGE = ( 32 );
CONST TBS_FIXEDLENGTH = ( 64 );
CONST TBS_NOTHUMB = ( 128 );
CONST TB_BOTTOM = ( 7 );
CONST TB_ENDTRACK = ( 8 );
CONST TB_LINEDOWN = ( 1 );
CONST TB_LINEUP = ( 0 );
CONST TB_PAGEDOWN = ( 3 );
CONST TB_PAGEUP = ( 2 );
CONST TB_THUMBPOSITION = ( 4 );
CONST TB_THUMBTRACK = ( 5 );
CONST TB_TOP = ( 6 );

{+// List view styles */ }
CONST LVS_ALIGNLEFT = ( 2048 );
CONST LVS_ALIGNTOP = ( 0 );
CONST LVS_AUTOARRANGE = ( 256 );
CONST LVS_EDITLABELS = ( 512 );
CONST LVS_ICON = ( 0 );
CONST LVS_LIST = ( 3 );
CONST LVS_NOCOLUMNHEADER = ( 16384 );
CONST LVS_NOLABELWRAP = ( 128 );
CONST LVS_NOSCROLL = ( 8192 );
CONST LVS_NOSORTHEADER = ( 32768 );
CONST LVS_OWNERDRAWFIXED = ( 1024 );
CONST LVS_REPORT = ( 1 );
CONST LVS_SHAREIMAGELISTS = ( 64 );
CONST LVS_SHOWSELALWAYS = ( 8 );
CONST LVS_SINGLESEL = ( 4 );
CONST LVS_SMALLICON = ( 2 );
CONST LVS_SORTASCENDING = ( 16 );
CONST LVS_SORTDESCENDING = ( 32 );
CONST LVS_TYPESTYLEMASK = ( 64512 );
CONST LVSIL_NORMAL = ( 0 );
CONST LVSIL_SMALL = ( 1 );
CONST LVSIL_STATE = ( 2 );
CONST LVIS_CUT = ( 4 );
CONST LVIS_DROPHILITED = ( 8 );
CONST LVIS_FOCUSED = ( 1 );
CONST LVIS_SELECTED = ( 2 );
CONST LVIS_OVERLAYMASK = ( 3840 );
CONST LVIS_STATEIMAGEMASK = ( 61440 );
CONST LPSTR_TEXTCALLBACKW = pWideChar (  - 1 );
CONST LPSTR_TEXTCALLBACKA = pChar ( 1 );
{$IFDEF UNICODE}
CONST LPSTR_TEXTCALLBACK = LPSTR_TEXTCALLBACKW;
{$ELSE}
CONST LPSTR_TEXTCALLBACK = LPSTR_TEXTCALLBACKA;
{$ENDIF /* UNICODE */}

{+// LV_ITEM structure */ }
CONST LVIF_TEXT = ( 1 );
CONST LVIF_IMAGE = ( 2 );
CONST LVIF_PARAM = ( 4 );
CONST LVIF_STATE = ( 8 );
CONST LVIF_DI_SETITEM = ( 4096 );

{+// LVM_GETNEXTITEM structure */ }
CONST LVNI_ABOVE = ( 256 );
CONST LVNI_ALL = ( 0 );
CONST LVNI_BELOW = ( 512 );
CONST LVNI_TOLEFT = ( 1024 );
CONST LVNI_TORIGHT = ( 2048 );
CONST LVNI_CUT = ( 4 );
CONST LVNI_DROPHILITED = ( 8 );
CONST LVNI_FOCUSED = ( 1 );
CONST LVNI_SELECTED = ( 2 );

{+// LV_FINDINFO structure */ }
CONST LVFI_PARAM = ( 1 );
CONST LVFI_PARTIAL = ( 8 );
CONST LVFI_STRING = ( 2 );
CONST LVFI_WRAP = ( 32 );
CONST LVFI_NEARESTXY = ( 64 );

{+// LV_HITTESTINFO structure */ }
CONST LVHT_ABOVE = ( 8 );
CONST LVHT_BELOW = ( 16 );
CONST LVHT_NOWHERE = ( 1 );
CONST LVHT_ONITEMICON = ( 2 );
CONST LVHT_ONITEMLABEL = ( 4 );
CONST LVHT_ONITEMSTATEICON = ( 8 );
CONST LVHT_TOLEFT = ( 64 );
CONST LVHT_TORIGHT = ( 32 );

{+// LV_COLUMN structure */ }
CONST LVCF_FMT = ( 1 );
CONST LVCF_SUBITEM = ( 8 );
CONST LVCF_TEXT = ( 4 );
CONST LVCF_WIDTH = ( 2 );
CONST LVCFMT_CENTER = ( 2 );
CONST LVCFMT_LEFT = ( 0 );
CONST LVCFMT_RIGHT = ( 1 );

{+// ListView_GetItemRect */ }
CONST LVIR_BOUNDS = ( 0 );
CONST LVIR_ICON = ( 1 );
CONST LVIR_LABEL = ( 2 );
CONST LVIR_SELECTBOUNDS = ( 3 );

{+// LVM_ARRANGE message */ }
CONST LVA_ALIGNLEFT = ( 1 );
CONST LVA_ALIGNTOP = ( 2 );
CONST LVA_DEFAULT = ( 0 );
CONST LVA_SNAPTOGRID = ( 5 );

{+// LVM_SETCOLUMNWIDTH message */ }
CONST LVSCW_AUTOSIZE = (  - 1 );
CONST LVSCW_AUTOSIZE_USEHEADER = (  - 2 );

{+// Tree View styles */ }
CONST TVS_DISABLEDRAGDROP = ( 16 );
CONST TVS_EDITLABELS = ( 8 );
CONST TVS_HASBUTTONS = ( 1 );
CONST TVS_HASLINES = ( 2 );
CONST TVS_LINESATROOT = ( 4 );
CONST TVS_SHOWSELALWAYS = ( 32 );

{+// Tree View states */ }
CONST TVIS_BOLD = ( 16 );
CONST TVIS_CUT = ( 4 );
CONST TVIS_DROPHILITED = ( 8 );
CONST TVIS_EXPANDED = ( 32 );
CONST TVIS_EXPANDEDONCE = ( 64 );
CONST TVIS_FOCUSED = ( 1 );
CONST TVIS_OVERLAYMASK = ( 3840 );
CONST TVIS_SELECTED = ( 2 );
CONST TVIS_STATEIMAGEMASK = ( 61440 );
CONST TVIS_USERMASK = ( 61440 );

{+// TV_ITEM structure */ }
CONST TVIF_CHILDREN = ( 64 );
CONST TVIF_HANDLE = ( 16 );
CONST TVIF_IMAGE = ( 2 );
CONST TVIF_PARAM = ( 4 );
CONST TVIF_SELECTEDIMAGE = ( 32 );
CONST TVIF_STATE = ( 8 );
CONST TVIF_TEXT = ( 1 );
CONST I_CHILDRENCALLBACK = (  - 1 );
CONST I_IMAGECALLBACK = (  - 1 );

{+// TV_INSERTSTRUCT structure */ }
CONST TVI_ROOT  {: HTREEITEM}  = ( $FFFF0000 );
CONST TVI_FIRST {: HTREEITEM} = ( $FFFF0001 );
CONST TVI_LAST  {: HTREEITEM}  = ( $FFFF0002 );
CONST TVI_SORT  {: HTREEITEM}  = ( $FFFF0003 );

{+// TV_HITTESTINFO structure */ }
CONST TVHT_ABOVE = ( 256 );
CONST TVHT_BELOW = ( 512 );
CONST TVHT_NOWHERE = ( 1 );
CONST TVHT_ONITEM = ( 70 );
CONST TVHT_ONITEMBUTTON = ( 16 );
CONST TVHT_ONITEMICON = ( 2 );
CONST TVHT_ONITEMINDENT = ( 8 );
CONST TVHT_ONITEMLABEL = ( 4 );
CONST TVHT_ONITEMRIGHT = ( 32 );
CONST TVHT_ONITEMSTATEICON = ( 64 );
CONST TVHT_TOLEFT = ( 2048 );
CONST TVHT_TORIGHT = ( 1024 );

{+// TVM_EXPAND message */ }
CONST TVE_COLLAPSE = ( 1 );
CONST TVE_COLLAPSERESET = ( 32768 );
CONST TVE_EXPAND = ( 2 );
CONST TVE_TOGGLE = ( 3 );

{+// TVM_GETIMAGELIST message */ }
CONST TVSIL_NORMAL = ( 0 );
CONST TVSIL_STATE = ( 2 );

{+// TVM_GETNEXTITEM message */ }
CONST TVGN_CARET = ( 9 );
CONST TVGN_CHILD = ( 4 );
CONST TVGN_DROPHILITE = ( 8 );
CONST TVGN_FIRSTVISIBLE = ( 5 );
CONST TVGN_NEXT = ( 1 );
CONST TVGN_NEXTVISIBLE = ( 6 );
CONST TVGN_PARENT = ( 3 );
CONST TVGN_PREVIOUS = ( 2 );
CONST TVGN_PREVIOUSVISIBLE = ( 7 );
CONST TVGN_ROOT = ( 0 );

{+// TVN_SELCHANGED message */ }
CONST TVC_BYKEYBOARD = ( 2 );
CONST TVC_BYMOUSE = ( 1 );
CONST TVC_UNKNOWN = ( 0 );

{+// Tab control styles */ }
CONST TCS_BUTTONS = ( 256 );
CONST TCS_FIXEDWIDTH = ( 1024 );
CONST TCS_FOCUSNEVER = ( 32768 );
CONST TCS_FOCUSONBUTTONDOWN = ( 4096 );
CONST TCS_FORCEICONLEFT = ( 16 );
CONST TCS_FORCELABELLEFT = ( 32 );
CONST TCS_MULTILINE = ( 512 );
CONST TCS_OWNERDRAWFIXED = ( 8192 );
CONST TCS_RAGGEDRIGHT = ( 2048 );
CONST TCS_RIGHTJUSTIFY = ( 0 );
CONST TCS_SINGLELINE = ( 0 );
CONST TCS_TABS = ( 0 );
CONST TCS_TOOLTIPS = ( 16384 );

{+// TC_ITEM structure */ }
CONST TCIF_TEXT = ( 1 );
CONST TCIF_IMAGE = ( 2 );
CONST TCIF_PARAM = ( 8 );
CONST TCIF_RTLREADING = ( 4 );

{+// TC_HITTESTINFO structure */ }
CONST TCHT_NOWHERE = ( 1 );
CONST TCHT_ONITEM = ( 6 );
CONST TCHT_ONITEMICON = ( 2 );
CONST TCHT_ONITEMLABEL = ( 4 );

{+// Animation control styles */ }
CONST ACS_AUTOPLAY = ( 4 );
CONST ACS_CENTER = ( 1 );
CONST ACS_TRANSPARENT = ( 2 );

{+// MODEMDEVCAPS structure */ }
CONST DIALOPTION_BILLING = ( 64 );
CONST DIALOPTION_QUIET = ( 128 );
CONST DIALOPTION_DIALTONE = ( 256 );
CONST MDMVOLFLAG_LOW = ( 1 );
CONST MDMVOLFLAG_MEDIUM = ( 2 );
CONST MDMVOLFLAG_HIGH = ( 4 );
CONST MDMVOL_LOW = ( 0 );
CONST MDMVOL_MEDIUM = ( 1 );
CONST MDMVOL_HIGH = ( 2 );
CONST MDMSPKRFLAG_OFF = ( 1 );
CONST MDMSPKRFLAG_DIAL = ( 2 );
CONST MDMSPKRFLAG_ON = ( 4 );
CONST MDMSPKRFLAG_CALLSETUP = ( 8 );
CONST MDMSPKR_OFF = ( 0 );
CONST MDMSPKR_DIAL = ( 1 );
CONST MDMSPKR_ON = ( 2 );
CONST MDMSPKR_CALLSETUP = ( 3 );
CONST MDM_BLIND_DIAL = ( 512 );
CONST MDM_CCITT_OVERRIDE = ( 64 );
CONST MDM_CELLULAR = ( 8 );
CONST MDM_COMPRESSION = ( 1 );
CONST MDM_ERROR_CONTROL = ( 2 );
CONST MDM_FLOWCONTROL_HARD = ( 16 );
CONST MDM_FLOWCONTROL_SOFT = ( 32 );
CONST MDM_FORCED_EC = ( 4 );
CONST MDM_SPEED_ADJUST = ( 128 );
CONST MDM_TONE_DIAL = ( 256 );
CONST MDM_V23_OVERRIDE = ( 1024 );

{+// Languages */ }
CONST LANG_BULGARIAN = ( 2 );
CONST LANG_CHINESE = ( 4 );
CONST LANG_CROATIAN = ( 26 );
CONST LANG_CZECH = ( 5 );
CONST LANG_DANISH = ( 6 );
CONST LANG_DUTCH = ( 19 );
CONST LANG_ENGLISH = ( 9 );
CONST LANG_FINNISH = ( 11 );
CONST LANG_FRENCH = ( 12 );
CONST LANG_GERMAN = ( 7 );
CONST LANG_GREEK = ( 8 );
CONST LANG_HUNGARIAN = ( 14 );
CONST LANG_ICELANDIC = ( 15 );
CONST LANG_ITALIAN = ( 16 );
CONST LANG_JAPANESE = ( 17 );
CONST LANG_KOREAN = ( 18 );
CONST LANG_NEUTRAL = ( 0 );
CONST LANG_NORWEGIAN = ( 20 );
CONST LANG_POLISH = ( 21 );
CONST LANG_PORTUGUESE = ( 22 );
CONST LANG_ROMANIAN = ( 24 );
CONST LANG_RUSSIAN = ( 25 );
CONST LANG_SLOVAK = ( 27 );
CONST LANG_SLOVENIAN = ( 36 );
CONST LANG_SPANISH = ( 10 );
CONST LANG_SWEDISH = ( 29 );
CONST LANG_TURKISH = ( 31 );
CONST SUBLANG_CHINESE_SIMPLIFIED = ( 2 );
CONST SUBLANG_CHINESE_TRADITIONAL = ( 1 );
CONST SUBLANG_CHINESE_HONGKONG = ( 3 );
CONST SUBLANG_CHINESE_SINGAPORE = ( 4 );
CONST SUBLANG_DEFAULT = ( 1 );
CONST SUBLANG_DUTCH = ( 1 );
CONST SUBLANG_DUTCH_BELGIAN = ( 2 );
CONST SUBLANG_ENGLISH_AUS = ( 3 );
CONST SUBLANG_ENGLISH_CAN = ( 4 );
CONST SUBLANG_ENGLISH_EIRE = ( 6 );
CONST SUBLANG_ENGLISH_NZ = ( 5 );
CONST SUBLANG_ENGLISH_UK = ( 2 );
CONST SUBLANG_ENGLISH_US = ( 1 );
CONST SUBLANG_FRENCH = ( 1 );
CONST SUBLANG_FRENCH_BELGIAN = ( 2 );
CONST SUBLANG_FRENCH_CANADIAN = ( 3 );
CONST SUBLANG_FRENCH_SWISS = ( 4 );
CONST SUBLANG_GERMAN = ( 1 );
CONST SUBLANG_GERMAN_AUSTRIAN = ( 3 );
CONST SUBLANG_GERMAN_SWISS = ( 2 );
CONST SUBLANG_ITALIAN = ( 1 );
CONST SUBLANG_ITALIAN_SWISS = ( 2 );
CONST SUBLANG_NEUTRAL = ( 0 );
CONST SUBLANG_NORWEGIAN_BOKMAL = ( 1 );
CONST SUBLANG_NORWEGIAN_NYNORSK = ( 2 );
CONST SUBLANG_PORTUGUESE = ( 2 );
CONST SUBLANG_PORTUGUESE_BRAZILIAN = ( 1 );
CONST SUBLANG_SPANISH = ( 1 );
CONST SUBLANG_SPANISH_MEXICAN = ( 2 );
CONST SUBLANG_SPANISH_MODERN = ( 3 );
CONST SUBLANG_SYS_DEFAULT = ( 2 );
CONST NLS_VALID_LOCALE_MASK = ( 1048575 );
CONST SORT_DEFAULT = ( 0 );
CONST SORT_JAPANESE_XJIS = ( 0 );
CONST SORT_JAPANESE_UNICODE = ( 1 );
CONST SORT_CHINESE_BIG5 = ( 0 );
CONST SORT_CHINESE_UNICODE = ( 1 );
CONST SORT_KOREAN_KSC = ( 0 );
CONST SORT_KOREAN_UNICODE = ( 1 );

{+// SYSTEM_INFO structure */ }
CONST PROCESSOR_INTEL_386 = ( 386 );
CONST PROCESSOR_INTEL_486 = ( 486 );
CONST PROCESSOR_INTEL_PENTIUM = ( 586 );
CONST PROCESSOR_MIPS_R4000 = ( 4000 );
CONST PROCESSOR_ALPHA_21064 = ( 21064 );

{+// FSCTL_SET_COMPRESSION */ }
CONST COMPRESSION_FORMAT_NONE = ( 0 );
CONST COMPRESSION_FORMAT_DEFAULT = ( 1 );
CONST COMPRESSION_FORMAT_LZNT1 = ( 2 );

{+// TAPE_GET_DRIVE_PARAMETERS structure */ }
CONST TAPE_DRIVE_COMPRESSION = ( 131072 );
CONST TAPE_DRIVE_ECC = ( 65536 );
CONST TAPE_DRIVE_ERASE_BOP_ONLY = ( 64 );
CONST TAPE_DRIVE_ERASE_LONG = ( 32 );
CONST TAPE_DRIVE_ERASE_IMMEDIATE = ( 128 );
CONST TAPE_DRIVE_ERASE_SHORT = ( 16 );
CONST TAPE_DRIVE_FIXED = ( 1 );
CONST TAPE_DRIVE_FIXED_BLOCK = ( 1024 );
CONST TAPE_DRIVE_INITIATOR = ( 4 );
CONST TAPE_DRIVE_PADDING = ( 262144 );
CONST TAPE_DRIVE_GET_ABSOLUTE_BLK = ( 1048576 );
CONST TAPE_DRIVE_GET_LOGICAL_BLK = ( 2097152 );
CONST TAPE_DRIVE_REPORT_SMKS = ( 524288 );
CONST TAPE_DRIVE_SELECT = ( 2 );
CONST TAPE_DRIVE_SET_EOT_WZ_SIZE = ( 4194304 );
CONST TAPE_DRIVE_TAPE_CAPACITY = ( 256 );
CONST TAPE_DRIVE_TAPE_REMAINING = ( 512 );
CONST TAPE_DRIVE_VARIABLE_BLOCK = ( 2048 );
CONST TAPE_DRIVE_WRITE_PROTECT = ( 4096 );
CONST TAPE_DRIVE_ABS_BLK_IMMED = (  - 2147475456 );
CONST TAPE_DRIVE_ABSOLUTE_BLK = (  - 2147479552 );
CONST TAPE_DRIVE_END_OF_DATA = (  - 2147418112 );
CONST TAPE_DRIVE_FILEMARKS = (  - 2147221504 );
CONST TAPE_DRIVE_LOAD_UNLOAD = (  - 2147483647 );
CONST TAPE_DRIVE_LOAD_UNLD_IMMED = (  - 2147483616 );
CONST TAPE_DRIVE_LOCK_UNLOCK = (  - 2147483644 );
CONST TAPE_DRIVE_LOCK_UNLK_IMMED = (  - 2147483520 );
CONST TAPE_DRIVE_LOG_BLK_IMMED = (  - 2147450880 );
CONST TAPE_DRIVE_LOGICAL_BLK = (  - 2147467264 );
CONST TAPE_DRIVE_RELATIVE_BLKS = (  - 2147352576 );
CONST TAPE_DRIVE_REVERSE_POSITION = (  - 2143289344 );
CONST TAPE_DRIVE_REWIND_IMMEDIATE = (  - 2147483640 );
CONST TAPE_DRIVE_SEQUENTIAL_FMKS = (  - 2146959360 );
CONST TAPE_DRIVE_SEQUENTIAL_SMKS = (  - 2145386496 );
CONST TAPE_DRIVE_SET_BLOCK_SIZE = (  - 2147483632 );
CONST TAPE_DRIVE_SET_COMPRESSION = (  - 2147483136 );
CONST TAPE_DRIVE_SET_ECC = (  - 2147483392 );
CONST TAPE_DRIVE_SET_PADDING = (  - 2147482624 );
CONST TAPE_DRIVE_SET_REPORT_SMKS = (  - 2147481600 );
CONST TAPE_DRIVE_SETMARKS = (  - 2146435072 );
CONST TAPE_DRIVE_SPACE_IMMEDIATE = (  - 2139095040 );
CONST TAPE_DRIVE_TENSION = (  - 2147483646 );
CONST TAPE_DRIVE_TENSION_IMMED = (  - 2147483584 );
CONST TAPE_DRIVE_WRITE_FILEMARKS = (  - 2113929216 );
CONST TAPE_DRIVE_WRITE_LONG_FMKS = (  - 2013265920 );
CONST TAPE_DRIVE_WRITE_MARK_IMMED = (  - 1879048192 );
CONST TAPE_DRIVE_WRITE_SETMARKS = (  - 2130706432 );
CONST TAPE_DRIVE_WRITE_SHORT_FMKS = (  - 2080374784 );

{+// Standard rights */ }
CONST STANDARD_RIGHTS_REQUIRED = ( $f0000 );
CONST STANDARD_RIGHTS_WRITE = ( $20000 );
CONST STANDARD_RIGHTS_READ = ( $20000 );
CONST STANDARD_RIGHTS_EXECUTE = ( $20000 );
CONST STANDARD_RIGHTS_ALL = ( $1f0000 );
CONST SPECIFIC_RIGHTS_ALL = ( $ffff );

{+// ACCESS_MASK */ }
CONST MAXIMUM_ALLOWED = ( $2000000 );
CONST GENERIC_ALL = ( $10000000 );

{+// SID */ }
CONST SECURITY_NULL_RID = ( 0 );
CONST SECURITY_WORLD_RID = ( 0 );
CONST SECURITY_LOCAL_RID = ( 0 );
CONST SECURITY_CREATOR_OWNER_RID = ( 0 );
CONST SECURITY_CREATOR_GROUP_RID = ( $1 );
CONST SECURITY_DIALUP_RID = ( $1 );
CONST SECURITY_NETWORK_RID = ( $2 );
CONST SECURITY_BATCH_RID = ( $3 );
CONST SECURITY_INTERACTIVE_RID = ( $4 );
CONST SECURITY_LOGON_IDS_RID = ( $5 );
CONST SECURITY_LOGON_IDS_RID_COUNT = ( $3 );
CONST SECURITY_SERVICE_RID = ( $6 );
CONST SECURITY_LOCAL_SYSTEM_RID = ( $12 );
CONST SECURITY_BUILTIN_DOMAIN_RID = ( $20 );
CONST DOMAIN_USER_RID_ADMIN = ( $1f4 );
CONST DOMAIN_USER_RID_GUEST = ( $1f5 );
CONST DOMAIN_GROUP_RID_ADMINS = ( $200 );
CONST DOMAIN_GROUP_RID_USERS = ( $201 );
CONST DOMAIN_ALIAS_RID_ADMINS = ( $220 );
CONST DOMAIN_ALIAS_RID_USERS = ( $221 );
CONST DOMAIN_ALIAS_RID_GUESTS = ( $222 );
CONST DOMAIN_ALIAS_RID_POWER_USERS = ( $223 );
CONST DOMAIN_ALIAS_RID_ACCOUNT_OPS = ( $224 );
CONST DOMAIN_ALIAS_RID_SYSTEM_OPS = ( $225 );
CONST DOMAIN_ALIAS_RID_PRINT_OPS = ( $226 );
CONST DOMAIN_ALIAS_RID_BACKUP_OPS = ( $227 );
CONST DOMAIN_ALIAS_RID_REPLICATOR = ( $228 );

{+// TOKEN_GROUPS structure */ }
CONST SE_GROUP_MANDATORY = ( $1 );
CONST SE_GROUP_ENABLED_BY_DEFAULT = ( $2 );
CONST SE_GROUP_ENABLED = ( $4 );
CONST SE_GROUP_OWNER = ( $8 );
CONST SE_GROUP_LOGON_ID = ( $c0000000 );

{+// ACL Defines */ }
CONST ACL_REVISION = ( 2 );

{+// ACE_HEADER structure */ }
CONST ACCESS_ALLOWED_ACE_TYPE = ( $0 );
CONST ACCESS_DENIED_ACE_TYPE = ( $1 );
CONST SYSTEM_AUDIT_ACE_TYPE = ( $2 );
CONST SYSTEM_ALARM_ACE_TYPE = ( $3 );

{+// ACE flags in the ACE_HEADER structure */ }
CONST OBJECT_INHERIT_ACE = ( $1 );
CONST CONTAINER_INHERIT_ACE = ( $2 );
CONST NO_PROPAGATE_INHERIT_ACE = ( $4 );
CONST INHERIT_ONLY_ACE = ( $8 );
CONST SUCCESSFUL_ACCESS_ACE_FLAG = ( $40 );
CONST FAILED_ACCESS_ACE_FLAG = ( $80 );

{+// SECURITY_DESCRIPTOR_CONTROL */ }
{Const SECURITY_DESCRIPTOR_REVISION = (1);}
CONST SECURITY_DESCRIPTOR_MIN_LENGTH = ( 20 );
CONST SE_OWNER_DEFAULTED = ( 1 );
CONST SE_GROUP_DEFAULTED = ( 2 );
CONST SE_DACL_PRESENT = ( 4 );
CONST SE_DACL_DEFAULTED = ( 8 );
CONST SE_SACL_PRESENT = ( 16 );
CONST SE_SACL_DEFAULTED = ( 32 );
CONST SE_SELF_RELATIVE = ( 32768 );

{+// PRIVILEGE_SET */ }
CONST SE_PRIVILEGE_ENABLED_BY_DEFAULT = ( $1 );
CONST SE_PRIVILEGE_ENABLED = ( $2 );
CONST SE_PRIVILEGE_USED_FOR_ACCESS = ( $80000000 );
CONST PRIVILEGE_SET_ALL_NECESSARY = ( $1 );

{+// OPENFILENAME structure */ }
CONST OFN_ALLOWMULTISELECT = ( $200 );
CONST OFN_CREATEPROMPT = ( $2000 );
CONST OFN_ENABLEHOOK = ( $20 );
CONST OFN_ENABLETEMPLATE = ( $40 );
CONST OFN_ENABLETEMPLATEHANDLE = ( $80 );
CONST OFN_EXPLORER = ( $80000 );
CONST OFN_EXTENSIONDIFFERENT = ( $400 );
CONST OFN_FILEMUSTEXIST = ( $1000 );
CONST OFN_HIDEREADONLY = ( $4 );
CONST OFN_LONGNAMES = ( $200000 );
CONST OFN_NOCHANGEDIR = ( $8 );
CONST OFN_NODEREFERENCELINKS = ( $100000 );
CONST OFN_NOLONGNAMES = ( $40000 );
CONST OFN_NONETWORKBUTTON = ( $20000 );
CONST OFN_NOREADONLYRETURN = ( $8000 );
CONST OFN_NOTESTFILECREATE = ( $10000 );
CONST OFN_NOVALIDATE = ( $100 );
CONST OFN_OVERWRITEPROMPT = ( $2 );
CONST OFN_PATHMUSTEXIST = ( $800 );
CONST OFN_READONLY = ( $1 );
CONST OFN_SHAREAWARE = ( $4000 );
CONST OFN_SHOWHELP = ( $10 );

{+// SHAREVISTRING message */ }
CONST OFN_SHAREFALLTHROUGH = ( $2 );
CONST OFN_SHARENOWARN = ( $1 );
CONST OFN_SHAREWARN = ( 0 );

{+// Open/Save notifications */ }
CONST CDN_INITDONE = ( $fffffda7 );
CONST CDN_SELCHANGE = ( $fffffda6 );
CONST CDN_FOLDERCHANGE = ( $fffffda5 );
CONST CDN_SHAREVIOLATION = ( $fffffda4 );
CONST CDN_HELP = ( $fffffda3 );
CONST CDN_FILEOK = ( $fffffda2 );
CONST CDN_TYPECHANGE = ( $fffffda1 );

{+// Open/Save messages */ }
CONST CDM_GETFILEPATH = ( $465 );
CONST CDM_GETFOLDERIDLIST = ( $467 );
CONST CDM_GETFOLDERPATH = ( $466 );
CONST CDM_GETSPEC = ( $464 );
CONST CDM_HIDECONTROL = ( $469 );
CONST CDM_SETCONTROLTEXT = ( $468 );
CONST CDM_SETDEFEXT = ( $46a );

{+// CHOOSECOLOR structure */ }
CONST CC_ENABLEHOOK = ( $10 );
CONST CC_ENABLETEMPLATE = ( $20 );
CONST CC_ENABLETEMPLATEHANDLE = ( $40 );
CONST CC_FULLOPEN = ( $2 );
CONST CC_PREVENTFULLOPEN = ( $4 );
CONST CC_RGBINIT = ( $1 );
CONST CC_SHOWHELP = ( $8 );
CONST CC_SOLIDCOLOR = ( $80 );

{+// FINDREPLACE structure */ }
CONST FR_DIALOGTERM = ( $40 );
CONST FR_DOWN = ( $1 );
CONST FR_ENABLEHOOK = ( $100 );
CONST FR_ENABLETEMPLATE = ( $200 );
CONST FR_ENABLETEMPLATEHANDLE = ( $2000 );
CONST FR_FINDNEXT = ( $8 );
CONST FR_HIDEUPDOWN = ( $4000 );
CONST FR_HIDEMATCHCASE = ( $8000 );
CONST FR_HIDEWHOLEWORD = ( $10000 );
CONST FR_MATCHCASE = ( $4 );
CONST FR_NOMATCHCASE = ( $800 );
CONST FR_NOUPDOWN = ( $400 );
CONST FR_NOWHOLEWORD = ( $1000 );
CONST FR_REPLACE = ( $10 );
CONST FR_REPLACEALL = ( $20 );
CONST FR_SHOWHELP = ( $80 );
CONST FR_WHOLEWORD = ( $2 );

{+// CHOOSEFONT structure */ }
CONST CF_APPLY = ( $200 );
CONST CF_ANSIONLY = ( $400 );
CONST CF_BOTH = ( $3 );
CONST CF_TTONLY = ( $40000 );
CONST CF_EFFECTS = ( $100 );
CONST CF_ENABLEHOOK = ( $8 );
CONST CF_ENABLETEMPLATE = ( $10 );
CONST CF_ENABLETEMPLATEHANDLE = ( $20 );
CONST CF_FIXEDPITCHONLY = ( $4000 );
CONST CF_FORCEFONTEXIST = ( $10000 );
CONST CF_INITTOLOGFONTSTRUCT = ( $40 );
CONST CF_LIMITSIZE = ( $2000 );
CONST CF_NOOEMFONTS = ( $800 );
CONST CF_NOFACESEL = ( $80000 );
CONST CF_NOSCRIPTSEL = ( $800000 );
CONST CF_NOSTYLESEL = ( $100000 );
CONST CF_NOSIZESEL = ( $200000 );
CONST CF_NOSIMULATIONS = ( $1000 );
CONST CF_NOVECTORFONTS = ( $800 );
CONST CF_NOVERTFONTS = ( $1000000 );
CONST CF_PRINTERFONTS = ( $2 );
CONST CF_SCALABLEONLY = ( $20000 );
CONST CF_SCREENFONTS = ( $1 );
CONST CF_SCRIPTSONLY = ( $400 );
CONST CF_SELECTSCRIPT = ( $400000 );
CONST CF_SHOWHELP = ( $4 );
CONST CF_USESTYLE = ( $80 );
CONST CF_WYSIWYG = ( $8000 );
CONST BOLD_FONTTYPE = ( $100 );
CONST ITALIC_FONTTYPE = ( $200 );
CONST PRINTER_FONTTYPE = ( $4000 );
CONST REGULAR_FONTTYPE = ( $400 );
CONST SCREEN_FONTTYPE = ( $2000 );
CONST SIMULATED_FONTTYPE = ( $8000 );

{+// Common dialog messages */ }
CONST COLOROKSTRINGW{:pWideChar =} = 'commdlg_ColorOK';
CONST FILEOKSTRINGW{:pWideChar =} = 'commdlg_FileNameOK';
CONST FINDMSGSTRINGW{:pWideChar =} = 'commdlg_FindReplace';
CONST HELPMSGSTRINGW{:pWideChar =} = 'commdlg_help';
CONST LBSELCHSTRINGW{:pWideChar =} = 'commdlg_LBSelChangedNotify';
CONST SETRGBSTRINGW{:pWideChar =} = 'commdlg_SetRGBColor';
CONST SHAREVISTRINGW{:pWideChar =} = 'commdlg_ShareViolation';

CONST COLOROKSTRINGA{:pChar =} = 'commdlg_ColorOK';
CONST FILEOKSTRINGA{:pChar =} = 'commdlg_FileNameOK';
CONST FINDMSGSTRINGA{:pChar =} = 'commdlg_FindReplace';
CONST HELPMSGSTRINGA{:pChar =} = 'commdlg_help';
CONST LBSELCHSTRINGA{:pChar =} = 'commdlg_LBSelChangedNotify';
CONST SETRGBSTRINGA{:pChar =} = 'commdlg_SetRGBColor';
CONST SHAREVISTRINGA{:pChar =} = 'commdlg_ShareViolation';
{$IFDEF UNICODE}
CONST COLOROKSTRING = COLOROKSTRINGW;
CONST FILEOKSTRING  = FILEOKSTRINGW;
CONST FINDMSGSTRING = FINDMSGSTRINGW;
CONST HELPMSGSTRING = HELPMSGSTRINGW;
CONST LBSELCHSTRING = LBSELCHSTRINGW;
CONST SETRGBSTRING  = SETRGBSTRINGW;
CONST SHAREVISTRING = SHAREVISTRINGW;
{$ELSE}
CONST COLOROKSTRING = COLOROKSTRINGA;
CONST FILEOKSTRING  = FILEOKSTRINGA;
CONST FINDMSGSTRING = FINDMSGSTRINGA;
CONST HELPMSGSTRING = HELPMSGSTRINGA;
CONST LBSELCHSTRING = LBSELCHSTRINGA;
CONST SETRGBSTRING  = SETRGBSTRINGA;
CONST SHAREVISTRING = SHAREVISTRINGA;
{$ENDIF}

{+// LBSELCHSTRING message */ }
CONST CD_LBSELCHANGE = ( 0 );
CONST CD_LBSELADD = ( 2 );
CONST CD_LBSELSUB = ( 1 );
CONST CD_LBSELNOITEMS = (  - 1 );

{+// DEVNAMES structure */ }
CONST DN_DEFAULTPRN = ( 1 );

{+// PRINTDLG structure */ }
CONST PD_ALLPAGES = ( 0 );
CONST PD_COLLATE = ( 16 );
CONST PD_DISABLEPRINTTOFILE = ( 524288 );
CONST PD_ENABLEPRINTHOOK = ( 4096 );
CONST PD_ENABLEPRINTTEMPLATE = ( 16384 );
CONST PD_ENABLEPRINTTEMPLATEHANDLE = ( 65536 );
CONST PD_ENABLESETUPHOOK = ( 8192 );
CONST PD_ENABLESETUPTEMPLATE = ( 32768 );
CONST PD_ENABLESETUPTEMPLATEHANDLE = ( 131072 );
CONST PD_HIDEPRINTTOFILE = ( 1048576 );
CONST PD_NOPAGENUMS = ( 8 );
CONST PD_NOSELECTION = ( 4 );
CONST PD_NOWARNING = ( 128 );
CONST PD_PAGENUMS = ( 2 );
CONST PD_PRINTSETUP = ( 64 );
CONST PD_PRINTTOFILE = ( 32 );
CONST PD_RETURNDC = ( 256 );
CONST PD_RETURNDEFAULT = ( 1024 );
CONST PD_RETURNIC = ( 512 );
CONST PD_SELECTION = ( 1 );
CONST PD_SHOWHELP = ( 2048 );
CONST PD_USEDEVMODECOPIES = ( 262144 );
CONST PD_USEDEVMODECOPIESANDCOLLATE = ( 262144 );

{+// PAGESETUPDLG structure */ }
CONST PSD_DEFAULTMINMARGINS = ( 0 );
CONST PSD_DISABLEMARGINS = ( 16 );
CONST PSD_DISABLEORIENTATION = ( 256 );
CONST PSD_DISABLEPAGEPAINTING = ( 524288 );
CONST PSD_DISABLEPAPER = ( 512 );
CONST PSD_DISABLEPRINTER = ( 32 );
CONST PSD_ENABLEPAGEPAINTHOOK = ( 262144 );
CONST PSD_ENABLEPAGESETUPHOOK = ( 8192 );
CONST PSD_ENABLEPAGESETUPTEMPLATE = ( 32768 );
CONST PSD_ENABLEPAGESETUPTEMPLATEHANDLE = ( 131072 );
CONST PSD_INHUNDREDTHSOFMILLIMETERS = ( 8 );
CONST PSD_INTHOUSANDTHSOFINCHES = ( 4 );
CONST PSD_INWININIINTLMEASURE = ( 0 );
CONST PSD_MARGINS = ( 2 );
CONST PSD_MINMARGINS = ( 1 );
CONST PSD_NOWARNING = ( 128 );
CONST PSD_RETURNDEFAULT = ( 1024 );
CONST PSD_SHOWHELP = ( 2048 );

{+// WM_SHOWWINDOW message */ }
CONST SW_OTHERUNZOOM = ( 4 );
CONST SW_OTHERZOOM = ( 2 );
CONST SW_PARENTCLOSING = ( 1 );
CONST SW_PARENTOPENING = ( 3 );

{+// Virtual Key codes */ }
CONST VK_LBUTTON = ( 1 );
CONST VK_RBUTTON = ( 2 );
CONST VK_CANCEL = ( 3 );
CONST VK_MBUTTON = ( 4 );
CONST VK_BACK = ( 8 );
CONST VK_TAB = ( 9 );
CONST VK_CLEAR = ( 12 );
CONST VK_RETURN = ( 13 );
CONST VK_SHIFT = ( 16 );
CONST VK_CONTROL = ( 17 );
CONST VK_MENU = ( 18 );
CONST VK_PAUSE = ( 19 );
CONST VK_CAPITAL = ( 20 );
CONST VK_ESCAPE = ( 27 );
CONST VK_SPACE = ( 32 );
CONST VK_PRIOR = ( 33 );
CONST VK_NEXT = ( 34 );
CONST VK_END = ( 35 );
CONST VK_HOME = ( 36 );
CONST VK_LEFT = ( 37 );
CONST VK_UP = ( 38 );
CONST VK_RIGHT = ( 39 );
CONST VK_DOWN = ( 40 );
CONST VK_SELECT = ( 41 );
CONST VK_PRINT = ( 42 );
CONST VK_EXECUTE = ( 43 );
CONST VK_SNAPSHOT = ( 44 );
CONST VK_INSERT = ( 45 );
CONST VK_DELETE = ( 46 );
CONST VK_HELP = ( 47 );
CONST VK_0 = ( 48 );
CONST VK_1 = ( 49 );
CONST VK_2 = ( 50 );
CONST VK_3 = ( 51 );
CONST VK_4 = ( 52 );
CONST VK_5 = ( 53 );
CONST VK_6 = ( 54 );
CONST VK_7 = ( 55 );
CONST VK_8 = ( 56 );
CONST VK_9 = ( 57 );
CONST VK_A = ( 65 );
CONST VK_B = ( 66 );
CONST VK_C = ( 67 );
CONST VK_D = ( 68 );
CONST VK_E = ( 69 );
CONST VK_F = ( 70 );
CONST VK_G = ( 71 );
CONST VK_H = ( 72 );
CONST VK_I = ( 73 );
CONST VK_J = ( 74 );
CONST VK_K = ( 75 );
CONST VK_L = ( 76 );
CONST VK_M = ( 77 );
CONST VK_N = ( 78 );
CONST VK_O = ( 79 );
CONST VK_P = ( 80 );
CONST VK_Q = ( 81 );
CONST VK_R = ( 82 );
CONST VK_S = ( 83 );
CONST VK_T = ( 84 );
CONST VK_U = ( 85 );
CONST VK_V = ( 86 );
CONST VK_W = ( 87 );
CONST VK_X = ( 88 );
CONST VK_Y = ( 89 );
CONST VK_Z = ( 90 );
CONST VK_NUMPAD0 = ( 96 );
CONST VK_NUMPAD1 = ( 97 );
CONST VK_NUMPAD2 = ( 98 );
CONST VK_NUMPAD3 = ( 99 );
CONST VK_NUMPAD4 = ( 100 );
CONST VK_NUMPAD5 = ( 101 );
CONST VK_NUMPAD6 = ( 102 );
CONST VK_NUMPAD7 = ( 103 );
CONST VK_NUMPAD8 = ( 104 );
CONST VK_NUMPAD9 = ( 105 );
CONST VK_MULTIPLY = ( 106 );
CONST VK_ADD = ( 107 );
CONST VK_SEPARATOR = ( 108 );
CONST VK_SUBTRACT = ( 109 );
CONST VK_DECIMAL = ( 110 );
CONST VK_DIVIDE = ( 111 );
CONST VK_F1 = ( 112 );
CONST VK_F2 = ( 113 );
CONST VK_F3 = ( 114 );
CONST VK_F4 = ( 115 );
CONST VK_F5 = ( 116 );
CONST VK_F6 = ( 117 );
CONST VK_F7 = ( 118 );
CONST VK_F8 = ( 119 );
CONST VK_F9 = ( 120 );
CONST VK_F10 = ( 121 );
CONST VK_F11 = ( 122 );
CONST VK_F12 = ( 123 );
CONST VK_F13 = ( 124 );
CONST VK_F14 = ( 125 );
CONST VK_F15 = ( 126 );
CONST VK_F16 = ( 127 );
CONST VK_F17 = ( 128 );
CONST VK_F18 = ( 129 );
CONST VK_F19 = ( 130 );
CONST VK_F20 = ( 131 );
CONST VK_F21 = ( 132 );
CONST VK_F22 = ( 133 );
CONST VK_F23 = ( 134 );
CONST VK_F24 = ( 135 );

{+// GetAsyncKeyState */ }
CONST VK_NUMLOCK = ( 144 );
CONST VK_SCROLL = ( 145 );
CONST VK_LSHIFT = ( 160 );
CONST VK_LCONTROL = ( 162 );
CONST VK_LMENU = ( 164 );
CONST VK_RSHIFT = ( 161 );
CONST VK_RCONTROL = ( 163 );
CONST VK_RMENU = ( 165 );

{+// ImmGetVirtualKey */ }
CONST VK_PROCESSKEY = ( 229 );

{+// Keystroke Message Flags */ }
CONST KF_ALTDOWN = ( 8192 );
CONST KF_DLGMODE = ( 2048 );
CONST KF_EXTENDED = ( 256 );
CONST KF_MENUMODE = ( 4096 );
CONST KF_REPEAT = ( 16384 );
CONST KF_UP = ( 32768 );

{+// GetKeyboardLayoutName */ }
CONST KL_NAMELENGTH = ( 9 );

{+// WM_ACTIVATE message */ }
CONST WA_ACTIVE = ( 1 );
CONST WA_CLICKACTIVE = ( 2 );
CONST WA_INACTIVE = ( 0 );

{+// WM_ACTIVATE message */ }
CONST PWR_CRITICALRESUME = ( 3 );
CONST PWR_SUSPENDREQUEST = ( 1 );
CONST PWR_SUSPENDRESUME = ( 2 );
CONST PWR_FAIL = (  - 1 );
CONST PWR_OK = ( 1 );

{+// WM_NOTIFYFORMAT message */ }
CONST NF_QUERY = ( 3 );
CONST NF_REQUERY = ( 4 );
CONST NFR_ANSI = ( 1 );
CONST NFR_UNICODE = ( 2 );

{+// WM_SIZING message */ }
CONST WMSZ_BOTTOM = ( 6 );
CONST WMSZ_BOTTOMLEFT = ( 7 );
CONST WMSZ_BOTTOMRIGHT = ( 8 );
CONST WMSZ_LEFT = ( 1 );
CONST WMSZ_RIGHT = ( 2 );
CONST WMSZ_TOP = ( 3 );
CONST WMSZ_TOPLEFT = ( 4 );
CONST WMSZ_TOPRIGHT = ( 5 );

{+// WM_MOUSEACTIVATE message */ }
CONST MA_ACTIVATE = ( 1 );
CONST MA_ACTIVATEANDEAT = ( 2 );
CONST MA_NOACTIVATE = ( 3 );
CONST MA_NOACTIVATEANDEAT = ( 4 );

{+// WM_SIZE message */ }
CONST SIZE_MAXHIDE = ( 4 );
CONST SIZE_MAXIMIZED = ( 2 );
CONST SIZE_MAXSHOW = ( 3 );
CONST SIZE_MINIMIZED = ( 1 );
CONST SIZE_RESTORED = ( 0 );

{+// WM_NCCALCSIZE message */ }
CONST WVR_ALIGNTOP = ( 16 );
CONST WVR_ALIGNLEFT = ( 32 );
CONST WVR_ALIGNBOTTOM = ( 64 );
CONST WVR_ALIGNRIGHT = ( 128 );
CONST WVR_HREDRAW = ( 256 );
CONST WVR_VREDRAW = ( 512 );
CONST WVR_REDRAW = ( 768 );
CONST WVR_VALIDRECTS = ( 1024 );

{+// WM_NCHITTEST message */ }
CONST HTBOTTOM = ( 15 );
CONST HTBOTTOMLEFT = ( 16 );
CONST HTBOTTOMRIGHT = ( 17 );
CONST HTCAPTION = ( 2 );
CONST HTCLIENT = ( 1 );
CONST HTERROR = (  - 2 );
CONST HTGROWBOX = ( 4 );
CONST HTHSCROLL = ( 6 );
CONST HTLEFT = ( 10 );
CONST HTMENU = ( 5 );
CONST HTNOWHERE = ( 0 );
CONST HTREDUCE = ( 8 );
CONST HTRIGHT = ( 11 );
CONST HTSIZE = ( 4 );
CONST HTSYSMENU = ( 3 );
CONST HTTOP = ( 12 );
CONST HTTOPLEFT = ( 13 );
CONST HTTOPRIGHT = ( 14 );
CONST HTTRANSPARENT = (  - 1 );
CONST HTVSCROLL = ( 7 );
CONST HTZOOM = ( 9 );

{+// Mouse messages */ }
CONST MK_CONTROL = ( 8 );
CONST MK_LBUTTON = ( 1 );
CONST MK_MBUTTON = ( 16 );
CONST MK_RBUTTON = ( 2 );
CONST MK_SHIFT = ( 4 );

{+// WNDCLASS structure */ }
CONST CS_BYTEALIGNCLIENT = ( 4096 );
CONST CS_BYTEALIGNWINDOW = ( 8192 );
CONST CS_CLASSDC = ( 64 );
CONST CS_DBLCLKS = ( 8 );
CONST CS_GLOBALCLASS = ( 16384 );
CONST CS_HREDRAW = ( 2 );
CONST CS_KEYCVTWINDOW = ( 4 );
CONST CS_NOCLOSE = ( 512 );
CONST CS_NOKEYCVT = ( 256 );
CONST CS_OWNDC = ( 32 );
CONST CS_PARENTDC = ( 128 );
CONST CS_SAVEBITS = ( 2048 );
CONST CS_VREDRAW = ( 1 );
CONST DLGWINDOWEXTRA = ( 30 );

{+// ACCEL structure */ }
CONST FALT = ( 16 );
CONST FCONTROL = ( 8 );
CONST FNOINVERT = ( 2 );
CONST FSHIFT = ( 4 );
CONST FVIRTKEY = ( 1 );

{+// MENUITEMINFO structure */ }
CONST MIIM_CHECKMARKS = ( 8 );
CONST MIIM_DATA = ( 32 );
CONST MIIM_ID = ( 2 );
CONST MIIM_STATE = ( 1 );
CONST MIIM_SUBMENU = ( 4 );
CONST MIIM_TYPE = ( 16 );
CONST MFT_BITMAP = ( $4 );
CONST MFT_MENUBARBREAK = ( $20 );
CONST MFT_MENUBREAK = ( $40 );
CONST MFT_OWNERDRAW = ( $100 );
CONST MFT_RADIOCHECK = ( $200 );
CONST MFT_RIGHTJUSTIFY = ( $4000 );
CONST MFT_SEPARATOR = ( $800 );
CONST MFT_STRING = ( 0 );
CONST MFS_CHECKED = ( $8 );
CONST MFS_DEFAULT = ( $1000 );
CONST MFS_DISABLED = ( $3 );
CONST MFS_ENABLED = ( 0 );
CONST MFS_GRAYED = ( $3 );
CONST MFS_HILITE = ( $80 );
CONST MFS_UNCHECKED = ( 0 );
CONST MFS_UNHILITE = ( 0 );

{+// SERIALKEYS structure */ }
CONST SERKF_AVAILABLE = ( 2 );
CONST SERKF_INDICATOR = ( 4 );
CONST SERKF_SERIALKEYSON = ( 1 );

{+// FILTERKEYS structure */ }
CONST FKF_AVAILABLE = ( 2 );
CONST FKF_CLICKON = ( 64 );
CONST FKF_FILTERKEYSON = ( 1 );
CONST FKF_HOTKEYACTIVE = ( 4 );
CONST FKF_HOTKEYSOUND = ( 16 );
CONST FKF_CONFIRMHOTKEY = ( 8 );
CONST FKF_INDICATOR = ( 32 );

{+// HELPINFO structure */ }
CONST HELPINFO_MENUITEM = ( 2 );
CONST HELPINFO_WINDOW = ( 1 );

{+// WM_PRINT message */ }
CONST PRF_CHECKVISIBLE = ( $1 );
CONST PRF_CHILDREN = ( $10 );
CONST PRF_CLIENT = ( $4 );
CONST PRF_ERASEBKGND = ( $8 );
CONST PRF_NONCLIENT = ( $2 );
CONST PRF_OWNED = ( $20 );

{+// MapWindowPoints */ }
CONST HWND_DESKTOP : HWND = ( 0 );

{+// WM_SYSCOMMAND message */ }
CONST SC_CLOSE = ( 61536 );
CONST SC_CONTEXTHELP = ( 61824 );
CONST SC_DEFAULT = ( 61792 );
CONST SC_HOTKEY = ( 61776 );
CONST SC_HSCROLL = ( 61568 );
CONST SC_KEYMENU = ( 61696 );
CONST SC_MAXIMIZE = ( 61488 );
CONST SC_ZOOM = ( 61488 );
CONST SC_MINIMIZE = ( 61472 );
CONST SC_ICON = ( 61472 );
CONST SC_MONITORPOWER = ( 61808 );
CONST SC_MOUSEMENU = ( 61584 );
CONST SC_MOVE = ( 61456 );
CONST SC_NEXTWINDOW = ( 61504 );
CONST SC_PREVWINDOW = ( 61520 );
CONST SC_RESTORE = ( 61728 );
CONST SC_SCREENSAVE = ( 61760 );
CONST SC_SIZE = ( 61440 );
CONST SC_TASKLIST = ( 61744 );
CONST SC_VSCROLL = ( 61552 );

{+// DM_GETDEFID message */ }
CONST DC_HASDEFID = ( 21323 );

{+// WM_GETDLGCODE message */ }
CONST DLGC_BUTTON = ( 8192 );
CONST DLGC_DEFPUSHBUTTON = ( 16 );
CONST DLGC_HASSETSEL = ( 8 );
CONST DLGC_RADIOBUTTON = ( 64 );
CONST DLGC_STATIC = ( 256 );
CONST DLGC_UNDEFPUSHBUTTON = ( 32 );
CONST DLGC_WANTALLKEYS = ( 4 );
CONST DLGC_WANTARROWS = ( 1 );
CONST DLGC_WANTCHARS = ( 128 );
CONST DLGC_WANTMESSAGE = ( 4 );
CONST DLGC_WANTTAB = ( 2 );

{+// EM_SETMARGINS message */ }
CONST EC_LEFTMARGIN = ( 1 );
CONST EC_RIGHTMARGIN = ( 2 );
CONST EC_USEFONTINFO = ( 65535 );

{+// LB_SETCOUNT message */ }
CONST LB_ERR = (  - 1 );
CONST LB_ERRSPACE = (  - 2 );
CONST LB_OKAY = ( 0 );

{+// CB_DIR message */ }
CONST CB_ERR = (  - 1 );
CONST CB_ERRSPACE = (  - 2 );

{+// WM_IME_CONTROL message */ }
CONST IMC_GETCANDIDATEPOS = ( 7 );
CONST IMC_GETCOMPOSITIONFONT = ( 9 );
CONST IMC_GETCOMPOSITIONWINDOW = ( 11 );
CONST IMC_GETSTATUSWINDOWPOS = ( 15 );
CONST IMC_CLOSESTATUSWINDOW = ( 33 );
CONST IMC_OPENSTATUSWINDOW = ( 34 );
CONST IMC_SETCANDIDATEPOS = ( 8 );
CONST IMC_SETCOMPOSITIONFONT = ( 10 );
CONST IMC_SETCOMPOSITIONWINDOW = ( 12 );
CONST IMC_SETSTATUSWINDOWPOS = ( 16 );

{+// WM_IME_CONTROL message */ }
CONST IMN_CHANGECANDIDATE = ( 3 );
CONST IMN_CLOSECANDIDATE = ( 4 );
CONST IMN_CLOSESTATUSWINDOW = ( 1 );
CONST IMN_GUIDELINE = ( 13 );
CONST IMN_OPENCANDIDATE = ( 5 );
CONST IMN_OPENSTATUSWINDOW = ( 2 );
CONST IMN_SETCANDIDATEPOS = ( 9 );
CONST IMN_SETCOMPOSITIONFONT = ( 10 );
CONST IMN_SETCOMPOSITIONWINDOW = ( 11 );
CONST IMN_SETCONVERSIONMODE = ( 6 );
CONST IMN_SETOPENSTATUS = ( 8 );
CONST IMN_SETSENTENCEMODE = ( 7 );
CONST IMN_SETSTATUSWINDOWPOS = ( 12 );
CONST IMN_PRIVATE = ( 14 );

{+// STICKYKEYS structure */ }
CONST SKF_AUDIBLEFEEDBACK = ( 64 );
CONST SKF_AVAILABLE = ( 2 );
CONST SKF_CONFIRMHOTKEY = ( 8 );
CONST SKF_HOTKEYACTIVE = ( 4 );
CONST SKF_HOTKEYSOUND = ( 16 );
CONST SKF_INDICATOR = ( 32 );
CONST SKF_STICKYKEYSON = ( 1 );
CONST SKF_TRISTATE = ( 128 );
CONST SKF_TWOKEYSOFF = ( 256 );

{+// MOUSEKEYS structure */ }
CONST MKF_AVAILABLE = ( 2 );
CONST MKF_CONFIRMHOTKEY = ( 8 );
CONST MKF_HOTKEYACTIVE = ( 4 );
CONST MKF_HOTKEYSOUND = ( 16 );
CONST MKF_INDICATOR = ( 32 );
CONST MKF_MOUSEKEYSON = ( 1 );
CONST MKF_MODIFIERS = ( 64 );
CONST MKF_REPLACENUMBERS = ( 128 );

{+// SOUNDSENTRY structure */ }
CONST SSF_AVAILABLE = ( 2 );
CONST SSF_SOUNDSENTRYON = ( 1 );
CONST SSTF_BORDER = ( 2 );
CONST SSTF_CHARS = ( 1 );
CONST SSTF_DISPLAY = ( 3 );
CONST SSTF_NONE = ( 0 );
CONST SSGF_DISPLAY = ( 3 );
CONST SSGF_NONE = ( 0 );
CONST SSWF_CUSTOM = ( 4 );
CONST SSWF_DISPLAY = ( 3 );
CONST SSWF_NONE = ( 0 );
CONST SSWF_TITLE = ( 1 );
CONST SSWF_WINDOW = ( 2 );

{+// ACCESSTIMEOUT structure */ }
CONST ATF_ONOFFFEEDBACK = ( 2 );
CONST ATF_TIMEOUTON = ( 1 );

{+// HIGHCONTRAST structure */ }
CONST HCF_AVAILABLE = ( 2 );
CONST HCF_CONFIRMHOTKEY = ( 8 );
CONST HCF_HIGHCONTRASTON = ( 1 );
CONST HCF_HOTKEYACTIVE = ( 4 );
CONST HCF_HOTKEYAVAILABLE = ( 64 );
CONST HCF_HOTKEYSOUND = ( 16 );
CONST HCF_INDICATOR = ( 32 );

{+// TOGGLEKEYS structure */ }
CONST TKF_AVAILABLE = ( 2 );
CONST TKF_CONFIRMHOTKEY = ( 8 );
CONST TKF_HOTKEYACTIVE = ( 4 );
CONST TKF_HOTKEYSOUND = ( 16 );
CONST TKF_TOGGLEKEYSON = ( 1 );

{+// Installable Policy */ }
CONST PP_DISPLAYERRORS = ( 1 );

{+// SERVICE_INFO structure */ }
CONST RESOURCEDISPLAYTYPE_DOMAIN = ( 1 );
CONST RESOURCEDISPLAYTYPE_FILE = ( 4 );
CONST RESOURCEDISPLAYTYPE_GENERIC = ( 0 );
CONST RESOURCEDISPLAYTYPE_GROUP = ( 5 );
CONST RESOURCEDISPLAYTYPE_SERVER = ( 2 );
CONST RESOURCEDISPLAYTYPE_SHARE = ( 3 );

{+// KEY_EVENT_RECORD structure */ }
CONST CAPSLOCK_ON = ( 128 );
CONST ENHANCED_KEY = ( 256 );
CONST LEFT_ALT_PRESSED = ( 2 );
CONST LEFT_CTRL_PRESSED = ( 8 );
CONST NUMLOCK_ON = ( 32 );
CONST RIGHT_ALT_PRESSED = ( 1 );
CONST RIGHT_CTRL_PRESSED = ( 4 );
CONST SCROLLLOCK_ON = ( 64 );
CONST SHIFT_PRESSED = ( 16 );

{+// MOUSE_EVENT_RECORD structure */ }
CONST FROM_LEFT_1ST_BUTTON_PRESSED = ( 1 );
CONST RIGHTMOST_BUTTON_PRESSED = ( 2 );
CONST FROM_LEFT_2ND_BUTTON_PRESSED = ( 4 );
CONST FROM_LEFT_3RD_BUTTON_PRESSED = ( 8 );
CONST FROM_LEFT_4TH_BUTTON_PRESSED = ( 16 );
CONST DOUBLE_CLICK = ( 2 );
CONST MOUSE_MOVED = ( 1 );

{+// INPUT_RECORD structure */ }
CONST KEY_EVENT = ( 1 );
CONST TMOUSE_EVENT = ( 2 );
CONST WINDOW_BUFFER_SIZE_EVENT = ( 4 );
CONST MENU_EVENT = ( 8 );
CONST FOCUS_EVENT = ( 16 );

{+// BITMAPINFOHEADER structure */ }
CONST BI_RGB = ( 0 );
CONST BI_RLE8 = ( 1 );
CONST BI_RLE4 = ( 2 );
CONST BI_BITFIELDS = ( 3 );

{+// Extensions to OpenGL */ }

{+// ChoosePixelFormat */ }
CONST PFD_DRAW_TO_WINDOW = ( $4 );
CONST PFD_DRAW_TO_BITMAP = ( $8 );
CONST PFD_SUPPORT_GDI = ( $10 );
CONST PFD_SUPPORT_OPENGL = ( $20 );
CONST PFD_DOUBLEBUFFER = ( $1 );
CONST PFD_STEREO = ( $2 );
CONST PFD_DOUBLEBUFFER_DONTCARE = ( $40000000 );
CONST PFD_STEREO_DONTCARE = ( $80000000 );
CONST PFD_TYPE_RGBA = ( 0 );
CONST PFD_TYPE_COLORINDEX = ( 1 );
CONST PFD_MAIN_PLANE = ( 0 );
CONST PFD_OVERLAY_PLANE = ( 1 );
CONST PFD_UNDERLAY_PLANE = (  - 1 );

{+// wglUseFontOutlines */ }
CONST WGL_FONT_LINES = ( 0 );
CONST WGL_FONT_POLYGONS = ( 1 );

{+// LAYERPLANEDESCRIPTOR structure */ }

{+// PIXELFORMATDESCRIPTOR structure */ }
CONST PFD_GENERIC_FORMAT = ( $40 );
CONST PFD_NEED_PALETTE = ( $80 );
CONST PFD_NEED_SYSTEM_PALETTE = ( $100 );
CONST PFD_SWAP_COPY = ( $400 );
CONST PFD_SWAP_EXCHANGE = ( $200 );

(* !!!!!!!
{+// --------------------- old stuff, need to organize! --------------- */ }

{+// BEGINNING of windowsx.h stuff from old headers: */ }
Const __CRACK_VOID_F(fn,args) = (void)(fn args);
Const __CRACK_BOOL_F(fn,args) = (WinBool)(fn args);
Const __CRACK_HMENU_F(fn,args) = (HMENU)(fn args);
Const __CRACK_HWND_F(fn,args) = (HWND)(fn args);
Const __CRACK_LONG_F(fn, = args) (LRESULT)(fn args);
Const __CRACK_ZERO_F(fn, = args) (fn args,0);
Const GetFirstChild(h) = GetTopWindow(h);
Const GetNextSibling(h) = GetWindow(h, GW_HWNDNEXT);
Const GetWindowID(h) = GetDlgCtrlID(h);
Const SubclassWindow(h, = p) (SetWindowLong(h, GWL_WNDPROC, p));

Const GET_WM_COMMAND_CMD(w, = l) HIWORD(w);
Const GET_WM_COMMAND_ID(w, = l) LOWORD(w);
Const GET_WM_CTLCOLOR_HDC(w, = l, msg) (HDC)(w);
Const GET_WM_CTLCOLOR_HWND(w, = l, msg) (HWND)(l);
Const GET_WM_HSCROLL_CODE(w, = l) LOWORD(w);
Const GET_WM_HSCROLL_HWND(w, = l) (HWND)(l);
Const GET_WM_HSCROLL_POS(w, = l) HIWORD(w);
Const GET_WM_MDIACTIVATE_FACTIVATE(h, = a, b) (b == (Longint)h);
Const GET_WM_MDIACTIVATE_HWNDACTIVATE(a, = b) (HWND)(b);
Const GET_WM_MDIACTIVATE_HWNDDEACT(a, = b) (HWND)(a);
Const GET_WM_VSCROLL_CODE(w, = l) LOWORD(w);
Const GET_WM_VSCROLL_HWND(w, = l) (HWND)(l);
Const GET_WM_VSCROLL_POS(w, = l) HIWORD(w);

Const FORWARD_WM_CLOSE(h, = fn) __CRACK_VOID_F(fn,(h, WM_CLOSE, 0, 0));
Const FORWARD_WM_COMMAND(h, = id, c, n, fn) __CRACK_VOID_F(fn,(h, WM_COMMAND, MAKEWPARAM(id,n), (LPARAM32)c));
Const FORWARD_WM_CREATE(h, = p, fn) __CRACK_BOOL_F(fn,(h, WM_CREATE, 0, (LPARAM32)p));
Const FORWARD_WM_DESTROY(h, = fn) __CRACK_VOID_F(fn,(h, WM_DESTROY, 0, 0));
Const FORWARD_WM_ENABLE(h, = e, fn) __CRACK_VOID_F(fn,(h, WM_ENABLE, (UINT)e, 0));
Const FORWARD_WM_INITDIALOG(h, = c, l, fn) __CRACK_BOOL_F(fn,(h, WM_INITDIALOG, (UINT)c, l));
Const FORWARD_WM_MDICASCADE(h, = c, fn) __CRACK_BOOL_F(fn,(h, WM_MDICASCADE, (UINT)c, 0));
Const FORWARD_WM_MDIDESTROY(h, = d, fn) __CRACK_VOID_F(fn,(h, WM_MDIDESTROY, (UINT)d, 0));
Const FORWARD_WM_MDIGETACTIVE(h, = fn) __CRACK_HWND_F(fn,(h, WM_MDIGETACTIVE, 0, 0));
Const FORWARD_WM_MDIICONARRANGE(h, = fn) __CRACK_VOID_F(fn,(h, WM_MDIICONARRANGE, 0, 0));
Const FORWARD_WM_MDISETMENU(h, = fr, hf, hw, fn) __CRACK_HMENU_F(fn,(h, WM_MDISETMENU, (UINT)((fr) ? (hf) : 0), (LPARAM32)(hw)));
Const FORWARD_WM_MDITILE(h, = c, fn) __CRACK_BOOL_F(fn,(h, WM_MDITILE, (UINT)(c), 0));
Const FORWARD_WM_PAINT(h, = fn) __CRACK_VOID_F(fn,(h, WM_PAINT, 0, 0));
Const FORWARD_WM_QUERYENDSESSION(h, = fn) __CRACK_BOOL_F(fn,(h, WM_QUERYENDSESSION, 0, 0));
Const FORWARD_WM_SIZE(h, = state, cx, cy, fn) __CRACK_VOID_F(fn,(h, WM_SIZE, (UINT)state, MAKELPARAM(cx, cy)));
Const FORWARD_WM_SYSCOMMAND(h, = c, x, y, fn) __CRACK_VOID_F(fn,(h, WM_SYSCOMMAND, (UINT)c, MAKELPARAM(x, y)));

Const HANDLE_WM_CLOSE(h, = w, l, fn) __CRACK_ZERO_F(fn,(h));;
Const HANDLE_WM_COMMAND(h, = w, l, fn) __CRACK_ZERO_F(fn,(h, SEXT_LOWORD(w), (HWND)l, HIWORD(w)));
Const HANDLE_WM_CREATE(h, = w, l, fn) (LRESULT)((fn(h, (CREATESTRUCT * )l)) ? 0 : -1);
Const HANDLE_WM_DESTROY(h, = w, l, fn) __CRACK_ZERO_F(fn,(h));
Const HANDLE_WM_ENABLE(h, = w, l, fn) __CRACK_ZERO_F(fn,(h, (WinBool)w));
Const HANDLE_WM_INITDIALOG(h, = w, l, fn) __CRACK_LONG_F(fn,(h, (HWND)w, l));
Const HANDLE_WM_MDICASCADE(h, = w, l, fn) __CRACK_LONG_F(fn, (h, (UINT)w);
Const HANDLE_WM_MDIDESTROY(h, = w, l, fn) __CRACK_ZERO_F(fn,(h, (HWND)w));
Const HANDLE_WM_MDIGETACTIVE(h, = w, l, fn) __CRACK_LONG_F(fn,(h));
Const HANDLE_WM_MDIICONARRANGE(h, = w, l, fn) __CRACK_ZERO_F(fn,(h));
Const HANDLE_WM_MDISETMENU(h, = w, l, fn) __CRACK_LONG_F(fn,(h, (WinBool)w, (HMENU)w, (HMENU)l);
Const HANDLE_WM_MDITILE(h, = w, l, fn) __CRACK_LONG_F(fn,(h, (UINT)w));
Const HANDLE_WM_PAINT(h, = w, l, fn) __CRACK_ZERO_F(fn,(h));
Const HANDLE_WM_QUERYENDSESSION(h, = w, l, fn) MAKELRESULT(fn(h), 0);
Const HANDLE_WM_SIZE(h, = w, l, fn) __CRACK_ZERO_F(fn,(h, (UINT)w, SEXT_LOWORD(l), SEXT_HIWORD(l)));
Const HANDLE_WM_SYSCOMMAND(h, = w, l, fn) __CRACK_ZERO_F(fn,(h, (UINT)w, SEXT_LOWORD(l), SEXT_HIWORD(l)));

{+// Totally disgusting! get wParam and lParam from the environment ! */ }
Const HANDLE_MSG(h, = message, fn) case message: return HANDLE_##message(h, wParam, lParam, fn);

{+// END OF windowsx.h stuff from old headers */ }

!!!!!
**)

{+// ------------------------------------------------------------------ */ }
{+// BEGINNING of shellapi.h stuff from old headers */ }

CONST SE_ERR_SHARE = 26;
CONST SE_ERR_ASSOCINCOMPLETE = 27;
CONST SE_ERR_DDETIMEOUT = 28;
CONST SE_ERR_DDEFAIL = 29;
CONST SE_ERR_DDEBUSY = 30;
CONST SE_ERR_NOASSOC = 31;

{+// END OF shellapi.h stuff from old headers */ }
{+// ------------------------------------------------------------------ */ }
{+// From ddeml.h in old Cygnus headers */ }

CONST XCLASS_BOOL = $1000;
CONST XCLASS_DATA = $2000;
CONST XCLASS_FLAGS = $4000;
CONST XCLASS_MASK = $fc00;
CONST XCLASS_NOTIFICATION = $8000;
CONST XTYPF_NOBLOCK = $0002;
CONST XTYP_ADVDATA = $4010;
CONST XTYP_ADVREQ = $2022;
CONST XTYP_ADVSTART = $1030;
CONST XTYP_ADVSTOP = $8040;
CONST XTYP_CONNECT = $1062;
CONST XTYP_CONNECT_CONFIRM = $8072;
CONST XTYP_DISCONNECT = $80c2;
CONST XTYP_EXECUTE = $4050;
CONST XTYP_POKE = $4090;
CONST XTYP_REQUEST = $20b0;
CONST XTYP_WILDCONNECT = $20E2;
CONST XTYP_REGISTER = $80A2;
CONST XTYP_ERROR = $8002;
CONST XTYP_XACT_COMPLETE = $8080;
CONST XTYP_UNREGISTER = $80D2;

CONST DMLERR_DLL_USAGE = $4004;
CONST DMLERR_INVALIDPARAMETER = $4006;
CONST DMLERR_NOTPROCESSED = $4009;
CONST DMLERR_POSTMSG_FAILED = $400c;
CONST DMLERR_SERVER_DIED = $400e;
CONST DMLERR_SYS_ERROR = $400;
CONST DMLERR_BUSY = $4001;
CONST DMLERR_DATAACKTIMEOUT = $4002;
CONST DMLERR_ADVACKTIMEOUT = $4000;
CONST DMLERR_DLL_NOT_INITIALIZED = $4003;
CONST DMLERR_LOW_MEMORY = $4007;
CONST DMLERR_MEMORY_ERROR = $4008;
CONST DMLERR_POKEACKTIMEOUT = $400b;
CONST DMLERR_NO_CONV_ESTABLISHED = $400a;
CONST DMLERR_REENTRANCY = $400d;
CONST DMLERR_UNFOUND_QUEUE_ID = $4011;
CONST DMLERR_UNADVACKTIMEOUT = $4010;
CONST DMLERR_EXECACKTIMEOUT = $4005;
CONST DDE_FACK = $8000;
CONST DDE_FNOTPROCESSED = $0000;

CONST DNS_REGISTER = $0001;
CONST DNS_UNREGISTER = $0002;
CONST CP_WINANSI = 1004;
CONST CP_WINUNICODE = 1200;
CONST APPCLASS_STANDARD = $00000000;

{+// End of stuff from ddeml.h in old Cygnus headers */ }
{+// ----------------------------------------------- */ }

CONST BKMODE_LAST = ( 2 );

CONST CTLCOLOR_MSGBOX = ( 0 );
CONST CTLCOLOR_EDIT = ( 1 );
CONST CTLCOLOR_LISTBOX = ( 2 );
CONST CTLCOLOR_BTN = ( 3 );
CONST CTLCOLOR_DLG = ( 4 );
CONST CTLCOLOR_SCROLLBAR = ( 5 );
CONST CTLCOLOR_STATIC = ( 6 );
CONST CTLCOLOR_MAX = ( 7 );

CONST META_SETMAPMODE = ( $0103 );
CONST META_SETWINDOWORG = ( $020B );
CONST META_SETWINDOWEXT = ( $020C );

CONST POLYFILL_LAST = ( 2 );

CONST STATUS_WAIT_0 = ( $00000000 );
CONST STATUS_ABANDONED_WAIT_0 = ( $00000080 );
CONST STATUS_USER_APC = ( $000000C0 );
CONST STATUS_TIMEOUT = ( $00000102 );
CONST STATUS_PENDING = ( $00000103 );
CONST STATUS_GUARD_PAGE_VIOLATION = ( $80000001 );
CONST STATUS_DATATYPE_MISALIGNMENT = ( $80000002 );
CONST STATUS_BREAKPOINT = ( $80000003 );
CONST STATUS_SINGLE_STEP = ( $80000004 );
CONST STATUS_IN_PAGE_ERROR = ( $C0000006 );
CONST STATUS_ILLEGAL_INSTRUCTION = ( $C000001D );
CONST STATUS_NONCONTINUABLE_EXCEPTION = ( $C0000025 );
CONST STATUS_INVALID_DISPOSITION = ( $C0000026 );
CONST STATUS_ARRAY_BOUNDS_EXCEEDED = ( $C000008C );
CONST STATUS_FLOAT_DENORMAL_OPERAND = ( $C000008D );
CONST STATUS_FLOAT_DIVIDE_BY_ZERO = ( $C000008E );
CONST STATUS_FLOAT_INEXACT_RESULT = ( $C000008F );
CONST STATUS_FLOAT_INVALID_OPERATION = ( $C0000090 );
CONST STATUS_FLOAT_OVERFLOW = ( $C0000091 );
CONST STATUS_FLOAT_STACK_CHECK = ( $C0000092 );
CONST STATUS_FLOAT_UNDERFLOW = ( $C0000093 );
CONST STATUS_INTEGER_DIVIDE_BY_ZERO = ( $C0000094 );
CONST STATUS_INTEGER_OVERFLOW = ( $C0000095 );
CONST STATUS_PRIVILEGED_INSTRUCTION = ( $C0000096 );
CONST STATUS_STACK_OVERFLOW = ( $C00000FD );
CONST STATUS_CONTROL_C_EXIT = ( $C000013A );

{$DEFINE EXCEPTION_CTRL_C}

CONST PROCESSOR_ARCHITECTURE_INTEL = 0;
CONST PROCESSOR_ARCHITECTURE_MIPS = 1;
CONST PROCESSOR_ARCHITECTURE_ALPHA = 2;
CONST PROCESSOR_ARCHITECTURE_PPC = 3;

{+// Used by wxwindows. */ }
CONST SIZEFULLSCREEN = SIZE_MAXIMIZED;
CONST SIZENORMAL = SIZE_RESTORED;
CONST SIZEICONIC = SIZE_MINIMIZED;

{$IFDEF __PPC__}
CONST CONTEXT_CONTROL = 1;
CONST CONTEXT_FLOATING_POINT = 2;
CONST CONTEXT_INTEGER = 4;
CONST CONTEXT_DEBUG_REGISTERS = 8;

CONST CONTEXT_FULL = ( CONTEXT_CONTROL OR CONTEXT_FLOATING_POINT OR CONTEXT_INTEGER );
CONST CONTEXT_DEBUGGER = CONTEXT_FULL;

{$ELSE /* x86 */}
{+// The doc refered me to winnt.h, so I had to look... */ }
CONST SIZE_OF_80387_REGISTERS = 80;

{+// Values for contextflags */ }
CONST CONTEXT_i386 = $10000;
CONST CONTEXT_CONTROL = ( CONTEXT_i386 OR 1 );
CONST CONTEXT_INTEGER = ( CONTEXT_i386 OR 2 );
CONST CONTEXT_SEGMENTS = ( CONTEXT_i386 OR 4 );
CONST CONTEXT_FLOATING_POINT = ( CONTEXT_i386 OR 8 );
CONST CONTEXT_DEBUG_REGISTERS = ( CONTEXT_i386 OR $10 );
CONST CONTEXT_FULL = ( CONTEXT_CONTROL OR CONTEXT_INTEGER OR CONTEXT_SEGMENTS );

{+// our own invention */ }
CONST FLAG_TRACE_BIT = $100;
CONST CONTEXT_DEBUGGER = ( CONTEXT_FULL OR CONTEXT_FLOATING_POINT );

{$ENDIF}

{$DEFINE FAR}

CONST FILTER_TEMP_DUPLICATE_ACCOUNT = ( $0001 );
CONST FILTER_NORMAL_ACCOUNT = ( $0002 );
CONST FILTER_INTERDOMAIN_TRUST_ACCOUNT = ( $0008 );
CONST FILTER_WORKSTATION_TRUST_ACCOUNT = ( $0010 );
CONST FILTER_SERVER_TRUST_ACCOUNT = ( $0020 );

CONST LOGON32_LOGON_INTERACTIVE = ( $02 );
CONST LOGON32_LOGON_BATCH = ( $04 );
CONST LOGON32_LOGON_SERVICE = ( $05 );
CONST LOGON32_PROVIDER_DEFAULT = ( $00 );
CONST LOGON32_PROVIDER_WINNT35 = ( $01 );

CONST QID_SYNC = $FFFFFFF;

{$ifdef IS_UNIT}
{FUNCTION  FreeModule ( h : THandle ) : WinBool;
FUNCTION  MakeProcInstance ( TProc : TFARPROC; Instance : THandle ) : TFARPROC;
PROCEDURE FreeProcInstance ( TProc : TFARPROC );
}
{$endif}{ IS_UNIT}

{//// structs1.pas ////}
{+// }
{-Structures.h }

{-Declarations for all the Windows32 API Structures }

{-Copyright (C) 1996 Free Software Foundation, Inc. }

{-Author: Scott Christley <scottc@net-community.com> }
{-Date: 1996 }

{- Structs1.Pas }
{-Translated to GNU Pascal: Prof. Abimbola Olowofoyeku <African_Chief@bigfoot.com> }


{-This file is part of the Windows32 API Library. }

{-This library is free software; you can redistribute it and/or }
{-modify it under the terms of the GNU Library General Public }
{-License as published by the Free Software Foundation; either }
{-version 2 of the License, or (at your option) any later version. }

{-This library is distributed in the hope that it will be useful, }
{-but WITHOUT ANY WARRANTY; without even the implied warranty of }
{-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU }
{-Library General Public License for more details. }

{-If you are interested in a warranty or support for this source code, }
{-contact Scott Christley <scottc@net-community.com> for more information. }

{-You should have received a copy of the GNU Library General Public }
{-License along with this library; see the file COPYING.LIB. }
{-If not, write to the Free Software Foundation, }
{-59 Temple Place - Suite 330, Boston, MA 02110307, USA. }
{= }

{$DEFINE _GNU_H_WINDOWS32_STRUCTURES}
TYPE _ABC = RECORD
              abcA : Integer;
              abcB : Word;
              abcC : Integer;
            END {  ABC};
ABC   = _ABC;
TABC  = _ABC;
PABC  = ^_ABC;
LPABC = ^_ABC;

TYPE _ABCFLOAT = RECORD
                   abcfA : Single;
                   abcfB : Single;
                   abcfC : Single;
                 END {  ABCFLOAT};
ABCFLOAT   = _ABCFLOAT;
TABCFLOAT  = _ABCFLOAT;
PABCFLOAT  = ^_ABCFLOAT;
LPABCFLOAT = ^_ABCFLOAT;

TYPE tagACCEL = RECORD
                  fVirt : BYTE;
                  key : Word;
                  cmd : Word;
                END {tagACCEL};
ACCEL   = tagACCEL;
TACCEL  = tagACCEL;
PACCEL  = ^tagACCEL;
LPACCEL = ^tagACCEL;

TYPE _ACE_HEADER = RECORD
                     AceType : BYTE;
                     AceFlags : BYTE;
                     AceSize : Word;
                   END {  ACE_HEADER};
ACE_HEADER   = _ACE_HEADER;
TACE_HEADER  = _ACE_HEADER;
PACE_HEADER  = ^_ACE_HEADER;
LPACE_HEADER = ^_ACE_HEADER;

TYPE ACCESS_MASK = DWord;

TYPE _ACCESS_ALLOWED_ACE = RECORD
                             Header : ACE_HEADER;
                             Mask : ACCESS_MASK;
                             SidStart : DWord;
                           END {  ACCESS_ALLOWED_ACE};
ACCESS_ALLOWED_ACE   = _ACCESS_ALLOWED_ACE;
TACCESS_ALLOWED_ACE  = _ACCESS_ALLOWED_ACE;
PACCESS_ALLOWED_ACE  = ^_ACCESS_ALLOWED_ACE;
LPACCESS_ALLOWED_ACE = ^_ACCESS_ALLOWED_ACE;

TYPE _ACCESS_DENIED_ACE = RECORD
                            Header : ACE_HEADER;
                            Mask : ACCESS_MASK;
                            SidStart : DWord;
                          END {  ACCESS_DENIED_ACE};
ACCESS_DENIED_ACE   = _ACCESS_DENIED_ACE;
TACCESS_DENIED_ACE  = _ACCESS_DENIED_ACE;
PACCESS_DENIED_ACE  = ^_ACCESS_DENIED_ACE;
LPACCESS_DENIED_ACE = ^_ACCESS_DENIED_ACE;

TYPE tagACCESSTIMEOUT = RECORD
                          cbSize : Word;
                          dwFlags : DWord;
                          iTimeOutMSec : DWord;
                        END {tagACCESSTIMEOUT};
ACCESSTIMEOUT   = tagACCESSTIMEOUT;
TACCESSTIMEOUT  = tagACCESSTIMEOUT;
PACCESSTIMEOUT  = ^tagACCESSTIMEOUT;
LPACCESSTIMEOUT = ^tagACCESSTIMEOUT;

TYPE _ACL = RECORD
              AclRevision : BYTE;
              Sbz1 : BYTE;
              AclSize : Word;
              AceCount : Word;
              Sbz2 : Word;
            END {  ACL};
ACL   = _ACL;
TACL  = _ACL;
PACL  = ^_ACL;
LPACL = ^_ACL;

TYPE _ACL_REVISION_INFORMATION = RECORD
                                   AclRevision : DWord;
                                 END {  ACL_REVISION_INFORMATION};
ACL_REVISION_INFORMATION   = _ACL_REVISION_INFORMATION;
TACL_REVISION_INFORMATION  = _ACL_REVISION_INFORMATION;
PACL_REVISION_INFORMATION  = ^_ACL_REVISION_INFORMATION;
LPACL_REVISION_INFORMATION = ^_ACL_REVISION_INFORMATION;

TYPE _ACL_SIZE_INFORMATION = RECORD
                               AceCount : DWord;
                               AclBytesInUse : DWord;
                               AclBytesFree : DWord;
                             END {  ACL_SIZE_INFORMATION};
ACL_SIZE_INFORMATION   = _ACL_SIZE_INFORMATION;
TACL_SIZE_INFORMATION  = _ACL_SIZE_INFORMATION;
PACL_SIZE_INFORMATION  = ^_ACL_SIZE_INFORMATION;
LPACL_SIZE_INFORMATION = ^_ACL_SIZE_INFORMATION;

TYPE _ACTION_HEADER = RECORD
                        transport_id : ULONG;
                        action_code : USHORT;
                        reserved : USHORT;
                      END {  ACTION_HEADER};
ACTION_HEADER   = _ACTION_HEADER;
TACTION_HEADER  = _ACTION_HEADER;
PACTION_HEADER  = ^_ACTION_HEADER;
LPACTION_HEADER = ^_ACTION_HEADER;

TYPE _ADAPTER_STATUS = RECORD
                         adapter_address : ARRAY [0..5] OF Byte;
                         rev_major : Byte;
                         reserved0 : Byte;
                         adapter_type : Byte;
                         rev_minor : Byte;
                         duration : Word;
                         frmr_recv : Word;
                         frmr_xmit : Word;
                         iframe_recv_err : Word;
                         xmit_aborts : Word;
                         xmit_success : DWord;
                         recv_success : DWord;
                         iframe_xmit_err : Word;
                         recv_buff_unavail : Word;
                         t1_timeouts : Word;
                         ti_timeouts : Word;
                         reserved1 : DWord;
                         free_ncbs : Word;
                         max_cfg_ncbs : Word;
                         max_ncbs : Word;
                         xmit_buf_unavail : Word;
                         max_dgram_size : Word;
                         pending_sess : Word;
                         max_cfg_sess : Word;
                         max_sess : Word;
                         max_sess_pkt_size : Word;
                         name_count : Word;
                       END {  ADAPTER_STATUS};
ADAPTER_STATUS   = _ADAPTER_STATUS;
TADAPTER_STATUS  = _ADAPTER_STATUS;
PADAPTER_STATUS  = ^_ADAPTER_STATUS;
LPADAPTER_STATUS = ^_ADAPTER_STATUS;

TYPE _ADDJOB_INFO_1 = RECORD
                        Path : PTSTR;
                        JobId : DWord;
                      END {  ADDJOB_INFO_1};
ADDJOB_INFO_1   = _ADDJOB_INFO_1;
TADDJOB_INFO_1  = _ADDJOB_INFO_1;
PADDJOB_INFO_1  = ^_ADDJOB_INFO_1;
LPADDJOB_INFO_1 = ^_ADDJOB_INFO_1;

TYPE tagANIMATIONINFO = RECORD
                          cbSize : Word;
                          iMinAnimate : Integer;
                        END {tagANIMATIONINFO};
ANIMATIONINFO   = tagANIMATIONINFO;
TANIMATIONINFO  = tagANIMATIONINFO;
PANIMATIONINFO  = ^tagANIMATIONINFO;
LPANIMATIONINFO = ^tagANIMATIONINFO;

TYPE _RECT = RECORD
               left : LongInt;
               top : LongInt;
               right : LongInt;
               bottom : LongInt;
             END {  RECT};
RECT   = _RECT;
TRECT  = _RECT;
LTRECT  = _RECT;
PRECT  = ^_RECT;
LPRECT = ^_RECT;

TYPE _RECTL = RECORD
                left : LongInt;
                top : LongInt;
                right : LongInt;
                bottom : LongInt;
              END {  RECTL};
RECTL   = _RECTL;
TRECTL  = _RECTL;
PRECTL  = ^_RECTL;
LPRECTL = ^_RECTL;

TYPE _AppBarData = RECORD
                     cbSize : DWord;
                     hWnd : HWND;
                     uCallbackMessage : Word;
                     uEdge : Word;
                     rc : RECT;
                     lParam : LPARAM32;
                   END {  AppBarData};
AppBarData   = _AppBarData;
TAppBarData  = _AppBarData;
PAppBarData  = ^_AppBarData;
LPAppBarData = ^_AppBarData;

TYPE tagBITMAP = RECORD
                   bmType : LongInt;
                   bmWidth : LongInt;
                   bmHeight : LongInt;
                   bmWidthBytes : LongInt;
                   bmPlanes : Word;
                   bmBitsPixel : Word;
                   bmBits : POINTER;
                 END {tagBITMAP};
BITMAP   = tagBITMAP;
TBITMAP  = tagBITMAP;
PBITMAP  = ^tagBITMAP;
LPBITMAP = ^tagBITMAP;
NPBITMAP = ^tagBITMAP;


TYPE tagBITMAPCOREHEADER = RECORD
                             bcSize : DWord;
                             bcWidth : Word;
                             bcHeight : Word;
                             bcPlanes : Word;
                             bcBitCount : Word;
                           END {tagBITMAPCOREHEADER};
BITMAPCOREHEADER   = tagBITMAPCOREHEADER;
TBITMAPCOREHEADER  = tagBITMAPCOREHEADER;
PBITMAPCOREHEADER  = ^tagBITMAPCOREHEADER;
LPBITMAPCOREHEADER = ^tagBITMAPCOREHEADER;

TYPE tagRGBTRIPLE = RECORD
                      rgbtBlue : BYTE;
                      rgbtGreen : BYTE;
                      rgbtRed : BYTE;
                    END {tagRGBTRIPLE};
RGBTRIPLE   = tagRGBTRIPLE;
TRGBTRIPLE  = tagRGBTRIPLE;
PRGBTRIPLE  = ^tagRGBTRIPLE;
LPRGBTRIPLE = ^tagRGBTRIPLE;

TYPE _BITMAPCOREINFO = RECORD
                         bmciHeader : BITMAPCOREHEADER;
                         bmciColors : ARRAY [0..0] OF RGBTRIPLE;
                       END {  BITMAPCOREINFO};
BITMAPCOREINFO   = _BITMAPCOREINFO;
TBITMAPCOREINFO  = _BITMAPCOREINFO;
PBITMAPCOREINFO  = ^_BITMAPCOREINFO;
LPBITMAPCOREINFO = ^_BITMAPCOREINFO;

TYPE tagBITMAPFILEHEADER = PACKED RECORD
                             bfType : Word;
                             bfSize : DWord;
                             bfReserved1 : Word;
                             bfReserved2 : Word;
                             bfOffBits : DWord;
                           END {tagBITMAPFILEHEADER};
BITMAPFILEHEADER   = tagBITMAPFILEHEADER;
TBITMAPFILEHEADER  = tagBITMAPFILEHEADER;
PBITMAPFILEHEADER  = ^tagBITMAPFILEHEADER;
LPBITMAPFILEHEADER = ^tagBITMAPFILEHEADER;

TYPE tagBITMAPINFOHEADER = RECORD
                             biSize : DWord;
                             biWidth : LongInt;
                             biHeight : LongInt;
                             biPlanes : Word;
                             biBitCount : Word;
                             biCompression : DWord;
                             biSizeImage : DWord;
                             biXPelsPerMeter : LongInt;
                             biYPelsPerMeter : LongInt;
                             biClrUsed : DWord;
                             biClrImportant : DWord;
                           END {tagBITMAPINFOHEADER};
BITMAPINFOHEADER   = tagBITMAPINFOHEADER;
TBITMAPINFOHEADER  = tagBITMAPINFOHEADER;
PBITMAPINFOHEADER  = ^tagBITMAPINFOHEADER;
LPBITMAPINFOHEADER = ^tagBITMAPINFOHEADER;


TYPE tagRGBQUAD = RECORD
                    rgbBlue : BYTE;
                    rgbGreen : BYTE;
                    rgbRed : BYTE;
                    rgbReserved : BYTE;
                  END {tagRGBQUAD};
TYPE RGBQUAD   = tagRGBQUAD;
TYPE TRGBQUAD  = tagRGBQUAD;
TYPE PRGBQUAD  = ^tagRGBQUAD;
TYPE LPRGBQUAD = ^tagRGBQUAD;

TYPE tagBITMAPINFO = RECORD
                       bmiHeader : TBITMAPINFOHEADER;
                       bmiColors : ARRAY [0..0] OF RGBQUAD;
                     END {tagBITMAPINFO};
BITMAPINFO   = tagBITMAPINFO;
TBITMAPINFO  = tagBITMAPINFO;
PBITMAPINFO  = ^tagBITMAPINFO;
LPBITMAPINFO = ^tagBITMAPINFO;

TYPE FXPT2DOT30 = Longint;
TYPE LPFXPT2DOT30 = ^FXPT2DOT30;


TYPE tagCIEXYZ = RECORD
                   ciexyzX : FXPT2DOT30;
                   ciexyzY : FXPT2DOT30;
                   ciexyzZ : FXPT2DOT30;
                 END {tagCIEXYZ};
CIEXYZ   = tagCIEXYZ;
TCIEXYZ  = tagCIEXYZ;
PCIEXYZ  = ^tagCIEXYZ;

TYPE tagCIEXYZTRIPLE = RECORD
                         ciexyzRed : CIEXYZ;
                         ciexyzGreen : CIEXYZ;
                         ciexyzBlue : CIEXYZ;
                       END {tagCIEXYZTRIPLE};
CIEXYZTRIPLE   = tagCIEXYZTRIPLE;
TCIEXYZTRIPLE  = tagCIEXYZTRIPLE;
PCIEXYZTRIPLE  = ^tagCIEXYZTRIPLE;

TYPE BITMAPV4HEADER = RECORD
            bV4Size : DWord;
            bV4Width : LongInt;
            bV4Height : LongInt;
            bV4Planes : Word;
            bV4BitCount : Word;
            bV4V4Compression : DWord;
            bV4SizeImage : DWord;
            bV4XPelsPerMeter : LongInt;
            bV4YPelsPerMeter : LongInt;
            bV4ClrUsed : DWord;
            bV4ClrImportant : DWord;
            bV4RedMask : DWord;
            bV4GreenMask : DWord;
            bV4BlueMask : DWord;
            bV4AlphaMask : DWord;
            bV4CSType : DWord;
            bV4Endpoints : CIEXYZTRIPLE;
            bV4GammaRed : DWord;
            bV4GammaGreen : DWord;
            bV4GammaBlue : DWord;
          END {  1};

LPBITMAPV4HEADER = ^BITMAPV4HEADER;
PBITMAPV4HEADER = ^BITMAPV4HEADER;


TYPE _BLOB = RECORD
               cbSize : ULONG;
               pBlobData : PBYTE;
             END {  BLOB};
BLOB   = _BLOB;
TBLOB  = _BLOB;
PBLOB  = ^_BLOB;
LPBLOB = ^_BLOB;

TYPE _SHITEMID = RECORD
                   cb : USHORT;
                   abID : ARRAY [0..0] OF BYTE;
                 END {  SHITEMID};
SHITEMID   = _SHITEMID;
TSHITEMID  = _SHITEMID;
PSHITEMID  = ^_SHITEMID;
LPSHITEMID = ^_SHITEMID;


TYPE _ITEMIDLIST = RECORD
                     mkid : SHITEMID;
                   END {  ITEMIDLIST};
TYPE ITEMIDLIST   = _ITEMIDLIST;
TYPE TITEMIDLIST  = _ITEMIDLIST;
TYPE PITEMIDLIST  = ^_ITEMIDLIST;
TYPE LPITEMIDLIST = ^_ITEMIDLIST;

TYPE _browseinfo = RECORD
                     hwndOwner : HWND;
                     pidlRoot : PITEMIDLIST;
                     pszDisplayName : PChar;
                     lpszTitle : PChar;
                     ulFlags : Word;
                     lpfn : BFFCALLBACK;
                     lParam : LPARAM32;
                     iImage : Integer;
                   END {_browseinfo};
browseinfo   = _browseinfo;
Tbrowseinfo  = _browseinfo;
Pbrowseinfo  = ^_browseinfo;
LPbrowseinfo = ^_browseinfo;


TYPE TFILETIME = RECORD
                   dwLowDateTime : DWord;
                   dwHighDateTime : DWord;
                 END {TFILETIME};
TYPE FILETIME   = TFILETIME;
TYPE PFILETIME  = ^TFILETIME;
TYPE LPFILETIME = ^TFILETIME;

TYPE _BY_HANDLE_FILE_INFORMATION = RECORD
                                     dwFileAttributes : DWord;
                                     ftCreationTime : FILETIME;
                                     ftLastAccessTime : FILETIME;
                                     ftLastWriteTime : FILETIME;
                                     dwVolumeSerialNumber : DWord;
                                     nFileSizeHigh : DWord;
                                     nFileSizeLow : DWord;
                                     nNumberOfLinks : DWord;
                                     nFileIndexHigh : DWord;
                                     nFileIndexLow : DWord;
                                   END {  BY_HANDLE_FILE_INFORMATION};
TYPE BY_HANDLE_FILE_INFORMATION   = _BY_HANDLE_FILE_INFORMATION;
TYPE TBY_HANDLE_FILE_INFORMATION   = _BY_HANDLE_FILE_INFORMATION;
TYPE TBYHANDLEFILEINFORMATION     = _BY_HANDLE_FILE_INFORMATION;
TYPE PBYHANDLEFILEINFORMATION     = ^_BY_HANDLE_FILE_INFORMATION;
TYPE LPBY_HANDLE_FILE_INFORMATION = ^_BY_HANDLE_FILE_INFORMATION;

TYPE _FIXED = RECORD
                fract : Word;
                Value : SmallInt;
              END {  FIXED};
FIXED   = _FIXED;
TFIXED  = _FIXED;
PFIXED  = ^_FIXED;
LPFIXED = ^_FIXED;

TYPE tagPOINT = RECORD
                  x : Integer;
                  y : Integer;
                END {tagPOINT};
POINT   = tagPOINT;
TPOINT  = tagPOINT;
PPOINT  = ^tagPOINT;
LPPOINT = ^tagPOINT;

TYPE tagPOINTFX = RECORD
                    x : FIXED;
                    y : FIXED;
                  END {tagPOINTFX};
POINTFX   = tagPOINTFX;
TPOINTFX  = tagPOINTFX;
PPOINTFX  = ^tagPOINTFX;
LPPOINTFX = ^tagPOINTFX;

TYPE _POINTL = RECORD
                 x : LongInt;
                 y : LongInt;
               END {  POINTL};
POINTL   = _POINTL;
TPOINTL  = _POINTL;
PPOINTL  = ^_POINTL;
LPPOINTL = ^_POINTL;

TYPE
tagPOINTS = RECORD
                   x : SmallInt;
                   y : SmallInt;
                 END {tagPOINTS};
TYPE POINTS   = tagPOINTS;
TYPE TPOINTS  = tagPOINTS;
TYPE PPOINTS  = ^tagPOINTS;
TYPE LPPOINTS = ^tagPOINTS;

TYPE _tagCANDIDATEFORM = RECORD
                           dwIndex : DWord;
                           dwStyle : DWord;
                           ptCurrentPos : POINT;
                           rcArea : RECT;
                         END {  tagCANDIDATEFORM};
TYPE tagCANDIDATEFORM   = _tagCANDIDATEFORM;
TYPE TtagCANDIDATEFORM  = _tagCANDIDATEFORM;
TYPE PtagCANDIDATEFORM  = ^_tagCANDIDATEFORM;
TYPE LPtagCANDIDATEFORM = ^_tagCANDIDATEFORM;
{!!!}
CANDIDATEFORM = _tagCANDIDATEFORM;


TYPE _tagCANDIDATELIST = RECORD
                           dwSize : DWord;
                           dwStyle : DWord;
                           dwCount : DWord;
                           dwSelection : DWord;
                           dwPageStart : DWord;
                           dwPageSize : DWord;
                           dwOffset : ARRAY [0..0] OF DWord;
                         END {  tagCANDIDATELIST};
TYPE tagCANDIDATELIST   = _tagCANDIDATELIST;
TYPE TtagCANDIDATELIST  = _tagCANDIDATELIST;
TYPE PtagCANDIDATELIST  = ^_tagCANDIDATELIST;
TYPE LPtagCANDIDATELIST = ^_tagCANDIDATELIST;
{!!!}
TYPE CANDIDATELIST = _tagCANDIDATELIST;


TYPE tagCREATESTRUCT = RECORD
                         lpCreateParams : POINTER;
                         hInstance : THANDLE;
                         hMenu : HMENU;
                         hwndParent : HWND;
                         cy : Integer;
                         cx : Integer;
                         y : Integer;
                         x : Integer;
                         style : LongInt;
                         lpszName : PWIDECHAR;
                         lpszClass : PWIDECHAR;
                         dwExStyle : DWord;
                       END {tagCREATESTRUCT};
CREATESTRUCT   = tagCREATESTRUCT;
TCREATESTRUCT  = tagCREATESTRUCT;
PCREATESTRUCT  = ^tagCREATESTRUCT;

TYPE tagCBT_CREATEWND = RECORD
                          lpcs : PCREATESTRUCT;
                          hwndInsertAfter : HWND;
                        END {tagCBT_CREATEWND};
CBT_CREATEWND   = tagCBT_CREATEWND;
TCBT_CREATEWND  = tagCBT_CREATEWND;
PCBT_CREATEWND  = ^tagCBT_CREATEWND;

TYPE tagCBTACTIVATESTRUCT = RECORD
                              fMouse : WINBOOL;
                              hWndActive : HWND;
                            END {tagCBTACTIVATESTRUCT};
CBTACTIVATESTRUCT   = tagCBTACTIVATESTRUCT;
TCBTACTIVATESTRUCT  = tagCBTACTIVATESTRUCT;
PCBTACTIVATESTRUCT  = ^tagCBTACTIVATESTRUCT;

TYPE _CHAR_INFO = RECORD
         CASE Integer OF
            0 : ( UnicodeChar : WCHAR );
            1 : ( AsciiChar : Char );
    END; {  CHAR_INFO}
CHAR_INFO   = _CHAR_INFO;
TCHAR_INFO  = _CHAR_INFO;
PCHAR_INFO  = ^_CHAR_INFO;

TYPE _charformat = RECORD
                     cbSize : Word;
                     dwMask : DWord;
                     dwEffects : DWord;
                     yHeight : LongInt;
                     yOffset : LongInt;
                     crTextColor : TColorRef;
                     bCharSet : BYTE;
                     bPitchAndFamily : BYTE;
                     szFaceName : ARRAY [0..LF_FACESIZE - 1] OF TCHAR;
                   END {  charformat};
charformat   = _charformat;
Tcharformat  = _charformat;
Pcharformat  = ^_charformat;

TYPE _charrange = RECORD
                    cpMin : LongInt;
                    cpMax : LongInt;
                  END {  charrange};
charrange   = _charrange;
Tcharrange  = _charrange;
Pcharrange  = ^_charrange;


TYPE tagCHARSET = RECORD
                    aflBlock : ARRAY [0..2] OF DWord;
                    flLang : DWord;
                  END {tagCHARSET};
CHARSET   = tagCHARSET;
TCHARSET  = tagCHARSET;
PCHARSET  = ^tagCHARSET;

TYPE tagFONTSIGNATURE = RECORD
                          fsUsb : ARRAY [0..3] OF DWord;
                          fsCsb : ARRAY [0..1] OF DWord;
                        END {tagFONTSIGNATURE};
FONTSIGNATURE   = tagFONTSIGNATURE;
TFONTSIGNATURE  = tagFONTSIGNATURE;
PFONTSIGNATURE  = ^tagFONTSIGNATURE;
LPFONTSIGNATURE = ^tagFONTSIGNATURE;

TYPE CHARSETINFO = RECORD
            ciCharset : Word;
            ciACP : Word;
            fs : FONTSIGNATURE;
          END {};
TCHARSETINFO = CHARSETINFO;
PCHARSETINFO = ^CHARSETINFO;

TYPE
tagTRACKMOUSEEVENT = RECORD
        cbSize,
        dwFlags,
        hwndTrack,
        dwHoverTime : DWORD;
END;
TTRACKMOUSEEVENT = tagTRACKMOUSEEVENT;
LPTRACKMOUSEEVENT = ^tagTRACKMOUSEEVENT;
PTRACKMOUSEEVENT = ^tagTRACKMOUSEEVENT;

TYPE TCHOOSECOLOR = RECORD
            lStructSize : DWord;
            hwndOwner : HWND;
            hInstance : HWND;
            rgbResult : TColorRef;
            lpCustColors : PCOLORREF;
            Flags : DWord;
            lCustData : LPARAM32;
            lpfnHook : PCCHOOKPROC;
            lpTemplateName : PCHAR;
          END {  3};
PCHOOSECOLOR = ^TCHOOSECOLOR;


TYPE tagLOGFONT = RECORD
                    lfHeight : LongInt;
                    lfWidth : LongInt;
                    lfEscapement : LongInt;
                    lfOrientation : LongInt;
                    lfWeight : LongInt;
                    lfItalic : BYTE;
                    lfUnderline : BYTE;
                    lfStrikeOut : BYTE;
                    lfCharSet : BYTE;
                    lfOutPrecision : BYTE;
                    lfClipPrecision : BYTE;
                    lfQuality : BYTE;
                    lfPitchAndFamily : BYTE;
                    lfFaceName : ARRAY [0..LF_FACESIZE - 1] OF TCHAR;
                  END {tagLOGFONT};
LOGFONT   = tagLOGFONT;
TLOGFONT  = tagLOGFONT;
PLOGFONT  = ^tagLOGFONT;
LPLOGFONT = ^tagLOGFONT;


TYPE TCHOOSEFONT = RECORD
            lStructSize : DWord;
            hwndOwner : HWND;
            hDC : HDC;
            lpLogFont : PLOGFONT;
            iPointSize : Integer;
            Flags : DWord;
            rgbColors : DWord;
            lCustData : LPARAM32;
            lpfnHook : PCFHOOKPROC;
            lpTemplateName : PWIDECHAR;
            hInstance : THANDLE;
            lpszStyle : PTSTR;
            nFontType : Word;
            ___MISSING_ALIGNMENT__ : Word;
            nSizeMin : Integer;
            nSizeMax : Integer;
          END {  4};
PCHOOSEFONT = ^TCHOOSEFONT;

TYPE _IDA = RECORD
              cidl : Word;
              aoffset : ARRAY [0..0] OF Word;
            END {  IDA};
IDA   = _IDA;
TIDA  = _IDA;
PIDA  = ^_IDA;
LPIDA = ^_IDA;
CIDA = _IDA;

TYPE tagCLIENTCREATESTRUCT = RECORD
                               hWindowMenu : THandle;
                               idFirstChild : Word;
                             END {tagCLIENTCREATESTRUCT};
CLIENTCREATESTRUCT   = tagCLIENTCREATESTRUCT;
TCLIENTCREATESTRUCT  = tagCLIENTCREATESTRUCT;
PCLIENTCREATESTRUCT  = ^tagCLIENTCREATESTRUCT;

TYPE _CMInvokeCommandInfo = RECORD
                              cbSize : DWord;
                              fMask : DWord;
                              hwnd : HWND;
                              lpVerb : PChar;
                              lpParameters : PChar;
                              lpDirectory : PChar;
                              nShow : Integer;
                              dwHotKey : DWord;
                              hIcon : THandle;
                            END {  CMInvokeCommandInfo};
CMInvokeCommandInfo   = _CMInvokeCommandInfo;
TCMInvokeCommandInfo  = _CMInvokeCommandInfo;
PCMInvokeCommandInfo  = ^_CMInvokeCommandInfo;

TYPE tagCOLORADJUSTMENT = RECORD
                            caSize : Word;
                            caFlags : Word;
                            caIlluminantIndex : Word;
                            caRedGamma : Word;
                            caGreenGamma : Word;
                            caBlueGamma : Word;
                            caReferenceBlack : Word;
                            caReferenceWhite : Word;
                            caContrast : SmallInt;
                            caBrightness : SmallInt;
                            caColorfulness : SmallInt;
                            caRedGreenTint : SmallInt;
                          END {tagCOLORADJUSTMENT};
COLORADJUSTMENT   = tagCOLORADJUSTMENT;
TCOLORADJUSTMENT  = tagCOLORADJUSTMENT;
PCOLORADJUSTMENT  = ^tagCOLORADJUSTMENT;

TYPE _COLORMAP = RECORD
                   afrom : TColorRef;
                   ato : TColorRef;
                 END {  COLORMAP};
COLORMAP   = _COLORMAP;
TCOLORMAP  = _COLORMAP;
PCOLORMAP  = ^_COLORMAP;

TYPE _DCB = RECORD
              DCBlength : DWord;
              BaudRate : DWord;
              FBINARY : DWord ;
              FPARITY : DWord ;
              fOutxCtsFlow : DWord;
              fOutxDsrFlow : DWord;
              fDtrControl : DWord;
              fDsrSensitivity : DWord;
              fTXContinueOnXoff : DWord;
              FOUTX : DWord ;
              FINX : DWord ;
              FERRORCHAR : DWord ;
              FNULL : DWord ;
              fRtsControl : DWord;
              fAbortOnError : DWord;
              fDummy2 : DWord;
              wReserved : Word;
              XonLim : Word;
              XoffLim : Word;
              ByteSize : BYTE;
              Parity : BYTE;
              StopBits : BYTE;
              XonChar : Char;
              XoffChar : Char;
              ErrorChar : Char;
              EofChar : Char;
              EvtChar : Char;
              wReserved1 : Word;
            END {  DCB};
DCB   = _DCB;
TDCB  = _DCB;
PDCB  = ^_DCB;

TYPE _COMM_CONFIG = RECORD
                      dwSize : DWord;
                      wVersion : Word;
                      wReserved : Word;
                      dcb : DCB;
                      dwProviderSubType : DWord;
                      dwProviderOffset : DWord;
                      dwProviderSize : DWord;
                      wcProviderData : ARRAY [0..0] OF WCHAR;
                    END {  COMM_CONFIG};
COMM_CONFIG   = _COMM_CONFIG;
TCOMM_CONFIG  = _COMM_CONFIG;
PCOMM_CONFIG  = ^_COMM_CONFIG;
PCOMMCONFIG  = ^_COMM_CONFIG;
COMMCONFIG = _COMM_CONFIG;
TCOMMCONFIG = _COMM_CONFIG;


TYPE _COMMPROP = RECORD
                   wPacketLength : Word;
                   wPacketVersion : Word;
                   dwServiceMask : DWord;
                   dwReserved1 : DWord;
                   dwMaxTxQueue : DWord;
                   dwMaxRxQueue : DWord;
                   dwMaxBaud : DWord;
                   dwProvSubType : DWord;
                   dwProvCapabilities : DWord;
                   dwSettableParams : DWord;
                   dwSettableBaud : DWord;
                   wSettableData : Word;
                   wSettableStopParity : Word;
                   dwCurrentTxQueue : DWord;
                   dwCurrentRxQueue : DWord;
                   dwProvSpec1 : DWord;
                   dwProvSpec2 : DWord;
                   wcProvChar : ARRAY [0..0] OF WCHAR;
                 END {  COMMPROP};
COMMPROP   = _COMMPROP;
TCOMMPROP  = _COMMPROP;
PCOMMPROP  = ^_COMMPROP;

TYPE _COMMTIMEOUTS = RECORD
                       ReadIntervalTimeout : DWord;
                       ReadTotalTimeoutMultiplier : DWord;
                       ReadTotalTimeoutConstant : DWord;
                       WriteTotalTimeoutMultiplier : DWord;
                       WriteTotalTimeoutConstant : DWord;
                     END {  COMMTIMEOUTS};
COMMTIMEOUTS   = _COMMTIMEOUTS;
TCOMMTIMEOUTS  = _COMMTIMEOUTS;
PCOMMTIMEOUTS  = ^_COMMTIMEOUTS;

TYPE tagCOMPAREITEMSTRUCT = RECORD
                              CtlType : Word;
                              CtlID : Word;
                              hwndItem : HWND;
                              itemID1 : Word;
                              itemData1 : DWord;
                              itemID2 : Word;
                              itemData2 : DWord;
                            END {tagCOMPAREITEMSTRUCT};
COMPAREITEMSTRUCT   = tagCOMPAREITEMSTRUCT;
TCOMPAREITEMSTRUCT  = tagCOMPAREITEMSTRUCT;
PCOMPAREITEMSTRUCT  = ^tagCOMPAREITEMSTRUCT;

TYPE COMPCOLOR = RECORD
            crText : TColorRef;
            crBackground : TColorRef;
            dwEffects : DWord;
          END {  5};


TYPE _tagCOMPOSITIONFORM = RECORD
                             dwStyle : DWord;
                             ptCurrentPos : POINT;
                             rcArea : RECT;
                           END {  tagCOMPOSITIONFORM};
tagCOMPOSITIONFORM   = _tagCOMPOSITIONFORM;
TtagCOMPOSITIONFORM  = _tagCOMPOSITIONFORM;
PtagCOMPOSITIONFORM  = ^_tagCOMPOSITIONFORM;
LPtagCOMPOSITIONFORM = ^_tagCOMPOSITIONFORM;
COMPOSITIONFORM = _tagCOMPOSITIONFORM;

TYPE _COMSTAT = RECORD
                  FCTSHOLD : DWord ;
                  FDSRHOLD : DWord ;
                  FRLSDHOLD : DWord ;
                  FXOFFHOLD : DWord ;
                  FXOFFSENT : DWord ;
                  FEOF : DWord ;
                  FTXIM : DWord ;
                  FRESERVED : DWord ;
                  cbInQue : DWord;
                  cbOutQue : DWord;
                END {  COMSTAT};
COMSTAT   = _COMSTAT;
TCOMSTAT  = _COMSTAT;
PCOMSTAT  = ^_COMSTAT;

TYPE _CONSOLE_CURSOR_INFO = RECORD
                              dwSize : DWord;
                              bVisible : WINBOOL;
                            END {  CONSOLE_CURSOR_INFO};
TCONSOLECURSORINFO    = _CONSOLE_CURSOR_INFO;
CONSOLE_CURSOR_INFO   = _CONSOLE_CURSOR_INFO;
TCONSOLE_CURSOR_INFO  = _CONSOLE_CURSOR_INFO;
PCONSOLE_CURSOR_INFO  = ^_CONSOLE_CURSOR_INFO;
LPCONSOLE_CURSOR_INFO = ^_CONSOLE_CURSOR_INFO;

TYPE _COORD = RECORD
                X : SmallInt;
                Y : SmallInt;
              END {  COORD };
COORD   = _COORD;
TCOORD  = _COORD;
PCOORD  = ^_COORD;
LPCOORD = ^_COORD;

TYPE _SMALL_RECT = RECORD
                     Left : SmallInt;
                     Top : SmallInt;
                     Right : SmallInt;
                     Bottom : SmallInt;
                   END {  SMALL_RECT};
SMALL_RECT   = _SMALL_RECT;
TSMALLRECT   = _SMALL_RECT;
TSMALL_RECT  = _SMALL_RECT;
PSMALL_RECT  = ^_SMALL_RECT;
LPSMALL_RECT = ^_SMALL_RECT;

TYPE _CONSOLE_SCREEN_BUFFER_INFO = RECORD
                                     dwSize : COORD;
                                     dwCursorPosition : COORD;
                                     wAttributes : Word;
                                     srWindow : SMALL_RECT;
                                     dwMaximumWindowSize : COORD;
                                   END {  CONSOLE_SCREEN_BUFFER_INFO};
TCONSOLESCREENBUFFERINFO     = _CONSOLE_SCREEN_BUFFER_INFO;
CONSOLE_SCREEN_BUFFER_INFO   = _CONSOLE_SCREEN_BUFFER_INFO;
TCONSOLE_SCREEN_BUFFER_INFO  = _CONSOLE_SCREEN_BUFFER_INFO;
PCONSOLE_SCREEN_BUFFER_INFO  = ^_CONSOLE_SCREEN_BUFFER_INFO;
LPCONSOLE_SCREEN_BUFFER_INFO = ^_CONSOLE_SCREEN_BUFFER_INFO;

{$IFDEF __i386__}


TYPE _FLOATING_SAVE_AREA = RECORD
                             ControlWord : DWord;
                             StatusWord : DWord;
                             TagWord : DWord;
                             ErrorOffset : DWord;
                             ErrorSelector : DWord;
                             DataOffset : DWord;
                             DataSelector : DWord;
                             RegisterArea : ARRAY [0..79] OF BYTE;
                             Cr0NpxState : DWord;
                           END {  FLOATING_SAVE_AREA};
FLOATING_SAVE_AREA   = _FLOATING_SAVE_AREA;
TFLOATING_SAVE_AREA  = _FLOATING_SAVE_AREA;
PFLOATING_SAVE_AREA  = ^_FLOATING_SAVE_AREA;
LPFLOATING_SAVE_AREA = ^_FLOATING_SAVE_AREA;

TYPE _CONTEXT = RECORD
                  ContextFlags : DWord;
                  Dr0 : DWord;
                  Dr1 : DWord;
                  Dr2 : DWord;
                  Dr3 : DWord;
                  Dr6 : DWord;
                  Dr7 : DWord;
                  FloatSave : FLOATING_SAVE_AREA;
                  SegGs : DWord;
                  SegFs : DWord;
                  SegEs : DWord;
                  SegDs : DWord;
                  Edi : DWord;
                  Esi : DWord;
                  Ebx : DWord;
                  Edx : DWord;
                  Ecx : DWord;
                  Eax : DWord;
                  Ebp : DWord;
                  Eip : DWord;
                  SegCs : DWord;
                  EFlags : DWord;
                  Esp : DWord;
                  SegSs : DWord;
                END {  CONTEXT};
CONTEXT   = _CONTEXT;
TCONTEXT  = _CONTEXT;
PCONTEXT  = ^_CONTEXT;
LPCONTEXT = ^_CONTEXT;

{$ELSE /* __ppc__ */}


TYPE _CONTEXT = RECORD
{+// Floating point registers returned when CONTEXT_FLOATING_POINT is set */ }
            Fpr0 : Double;
            Fpr1 : Double;
            Fpr2 : Double;
            Fpr3 : Double;
            Fpr4 : Double;
            Fpr5 : Double;
            Fpr6 : Double;
            Fpr7 : Double;
            Fpr8 : Double;
            Fpr9 : Double;
            Fpr10 : Double;
            Fpr11 : Double;
            Fpr12 : Double;
            Fpr13 : Double;
            Fpr14 : Double;
            Fpr15 : Double;
            Fpr16 : Double;
            Fpr17 : Double;
            Fpr18 : Double;
            Fpr19 : Double;
            Fpr20 : Double;
            Fpr21 : Double;
            Fpr22 : Double;
            Fpr23 : Double;
            Fpr24 : Double;
            Fpr25 : Double;
            Fpr26 : Double;
            Fpr27 : Double;
            Fpr28 : Double;
            Fpr29 : Double;
            Fpr30 : Double;
            Fpr31 : Double;
            Fpscr : Double;
{+// Integer registers returned when CONTEXT_INTEGER is set. */ }
            Gpr0 : DWord;
            Gpr1 : DWord;
            Gpr2 : DWord;
            Gpr3 : DWord;
            Gpr4 : DWord;
            Gpr5 : DWord;
            Gpr6 : DWord;
            Gpr7 : DWord;
            Gpr8 : DWord;
            Gpr9 : DWord;
            Gpr10 : DWord;
            Gpr11 : DWord;
            Gpr12 : DWord;
            Gpr13 : DWord;
            Gpr14 : DWord;
            Gpr15 : DWord;
            Gpr16 : DWord;
            Gpr17 : DWord;
            Gpr18 : DWord;
            Gpr19 : DWord;
            Gpr20 : DWord;
            Gpr21 : DWord;
            Gpr22 : DWord;
            Gpr23 : DWord;
            Gpr24 : DWord;
            Gpr25 : DWord;
            Gpr26 : DWord;
            Gpr27 : DWord;
            Gpr28 : DWord;
            Gpr29 : DWord;
            Gpr30 : DWord;
            Gpr31 : DWord;
            Cr : DWord;
{= Condition register }
            Xer : DWord;
{= Fixed point exception register }

{+// The following are set when CONTEXT_CONTROL is set. */ }
            Msr : DWord;
{= Machine status register }
            Iar : DWord;
{= Instruction address register }
            Lr : DWord;
{= Link register }
            Ctr : DWord;
{= Control register }

{+// Control which context values are returned */ }
            ContextFlags : DWord;
            Fill : ARRAY [0..3] OF DWord;
{+// Registers returned if CONTEXT_DEBUG_REGISTERS is set. */ }
            Dr0 : DWord;
{= Breakpoint Register 1 }
            Dr1 : DWord;
{= Breakpoint Register 2 }
            Dr2 : DWord;
{= Breakpoint Register 3 }
            Dr3 : DWord;
{= Breakpoint Register 4 }
            Dr4 : DWord;
{= Breakpoint Register 5 }
            Dr5 : DWord;
{= Breakpoint Register 6 }
            Dr6 : DWord;
{= Debug Status Register }
            Dr7 : DWord;
{= Debug Control Register }
          END {  6};
CONTEXT   = _CONTEXT;
TCONTEXT  = _CONTEXT;
PCONTEXT = ^_CONTEXT;
LPCONTEXT = ^_CONTEXT;
{$ENDIF}


TYPE PLIST_ENTRY = ^_LIST_ENTRY;
     _LIST_ENTRY = RECORD
                     Flink : PLIST_ENTRY;
                     Blink : PLIST_ENTRY;
                   END {  LIST_ENTRY};
LIST_ENTRY   = _LIST_ENTRY;
TLIST_ENTRY  = _LIST_ENTRY;
LPLIST_ENTRY = ^_LIST_ENTRY;

TYPE
PCRITICAL_SECTION_DEBUG  = ^_CRITICAL_SECTION_DEBUG;
PCRITICAL_SECTION  = ^_CRITICAL_SECTION;
_CRITICAL_SECTION_DEBUG = RECORD
                                 aType : Word;
                                 CreatorBackTraceIndex : Word;
                                 CriticalSection : PCRITICAL_SECTION;
                                 ProcessLocksList : LIST_ENTRY;
                                 EntryCount : DWord;
                                 ContentionCount : DWord;
                                 Depth : DWord;
                                 OWNERBACKTRACE : ARRAY [0..4] OF pointer;
                               END {  CRITICAL_SECTION_DEBUG};
CRITICAL_SECTION_DEBUG   = _CRITICAL_SECTION_DEBUG;
TCRITICAL_SECTION_DEBUG  = _CRITICAL_SECTION_DEBUG;
LPCRITICAL_SECTION_DEBUG = ^_CRITICAL_SECTION_DEBUG;


     _CRITICAL_SECTION = RECORD
                           DebugInfo : PCRITICAL_SECTION_DEBUG;
                           LockCount : LongInt;
                           RecursionCount : LongInt;
                           OwningThread : THandle;
                           LockSemaphore : THandle;
                           Reserved : DWord;
                         END {  CRITICAL_SECTION};
TCRITICALSECTION   = _CRITICAL_SECTION;
CRITICAL_SECTION   = _CRITICAL_SECTION;
TCRITICAL_SECTION  = _CRITICAL_SECTION;
// PCRITICAL_SECTION  = ^_CRITICAL_SECTION;
LPCRITICAL_SECTION = ^_CRITICAL_SECTION;

TYPE _SECURITY_QUALITY_OF_SERVICE = RECORD
                                      Length : DWord;
                                      ImpersonationLevel : _SECURITY_IMPERSONATION_LEVEL;
{+// SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode; */ }
                                      ContextTrackingMode : WINBOOL;
                                      EffectiveOnly : BOOLEAN;
                                    END {  SECURITY_QUALITY_OF_SERVICE};
SECURITY_QUALITY_OF_SERVICE   = _SECURITY_QUALITY_OF_SERVICE;
TSECURITY_QUALITY_OF_SERVICE  = _SECURITY_QUALITY_OF_SERVICE;
PSECURITY_QUALITY_OF_SERVICE  = ^_SECURITY_QUALITY_OF_SERVICE;
LPSECURITY_QUALITY_OF_SERVICE = ^_SECURITY_QUALITY_OF_SERVICE;

TYPE tagCONVCONTEXT = RECORD
                        cb : Word;
                        wFlags : Word;
                        wCountryID : Word;
                        iCodePage : Integer;
                        dwLangID : DWord;
                        dwSecurity : DWord;
                        qos : SECURITY_QUALITY_OF_SERVICE;
                      END {tagCONVCONTEXT};
CONVCONTEXT   = tagCONVCONTEXT;
TCONVCONTEXT  = tagCONVCONTEXT;
PCONVCONTEXT  = ^tagCONVCONTEXT;
LPCONVCONTEXT = ^tagCONVCONTEXT;

TYPE tagCONVINFO = RECORD
                     cb : DWord;
                     hUser : DWord;
                     hConvPartner : HCONV;
                     hszSvcPartner : HSZ;
                     hszServiceReq : HSZ;
                     hszTopic : HSZ;
                     hszItem : HSZ;
                     wFmt : Word;
                     wType : Word;
                     wStatus : Word;
                     wConvst : Word;
                     wLastError : Word;
                     hConvList : HCONVLIST;
                     ConvCtxt : CONVCONTEXT;
                     hwnd : HWND;
                     hwndPartner : HWND;
                   END {tagCONVINFO};
CONVINFO   = tagCONVINFO;
TCONVINFO  = tagCONVINFO;
PCONVINFO  = ^tagCONVINFO;
LPCONVINFO = ^tagCONVINFO;

TYPE tagCOPYDATASTRUCT = RECORD
                           dwData : DWord;
                           cbData : DWord;
                           lpData : Pointer;
                         END {tagCOPYDATASTRUCT};
TYPE COPYDATASTRUCT   = tagCOPYDATASTRUCT;
TYPE TCOPYDATASTRUCT  = tagCOPYDATASTRUCT;
TYPE PCOPYDATASTRUCT  = ^tagCOPYDATASTRUCT;
TYPE LPCOPYDATASTRUCT = ^tagCOPYDATASTRUCT;

TYPE _cpinfo = RECORD
                 MaxCharSize : Word;
                 DefaultChar : ARRAY [0..MAX_DEFAULTCHAR - 1] OF BYTE;
                 LeadByte : ARRAY [0..MAX_LEADBYTES - 1] OF BYTE;
               END {  cpinfo};
cpinfo   = _cpinfo;
Tcpinfo  = _cpinfo;
Pcpinfo  = ^_cpinfo;
LPcpinfo = ^_cpinfo;

TYPE tagCPLINFO = RECORD
                    idIcon : Integer;
                    idName : Integer;
                    idInfo : Integer;
                    lData : LongInt;
                  END {tagCPLINFO};
CPLINFO   = tagCPLINFO;
TCPLINFO  = tagCPLINFO;
PCPLINFO  = ^tagCPLINFO;
LPCPLINFO = ^tagCPLINFO;

TYPE _CREATE_PROCESS_DEBUG_INFO = RECORD
                                    hFile : THandle;
                                    hProcess : THandle;
                                    hThread : THandle;
                                    lpBaseOfImage : POINTER;
                                    dwDebugInfoFileOffset : DWord;
                                    nDebugInfoSize : DWord;
                                    lpThreadLocalBase : POINTER;
                                    lpStartAddress : PTHREAD_START_ROUTINE;
                                    lpImageName : POINTER;
                                    fUnicode : Word;
                                  END {  CREATE_PROCESS_DEBUG_INFO};
TYPE
CREATE_PROCESS_DEBUG_INFO   = _CREATE_PROCESS_DEBUG_INFO;
TCREATE_PROCESS_DEBUG_INFO  = _CREATE_PROCESS_DEBUG_INFO;
PCREATE_PROCESS_DEBUG_INFO  = ^_CREATE_PROCESS_DEBUG_INFO;
LPCREATE_PROCESS_DEBUG_INFO = ^_CREATE_PROCESS_DEBUG_INFO;

TYPE _CREATE_THREAD_DEBUG_INFO = RECORD
                                   hThread : THandle;
                                   lpThreadLocalBase : POINTER;
                                   lpStartAddress : PTHREAD_START_ROUTINE;
                                 END {  CREATE_THREAD_DEBUG_INFO};
CREATE_THREAD_DEBUG_INFO   = _CREATE_THREAD_DEBUG_INFO;
TCREATE_THREAD_DEBUG_INFO  = _CREATE_THREAD_DEBUG_INFO;
PCREATE_THREAD_DEBUG_INFO  = ^_CREATE_THREAD_DEBUG_INFO;
LPCREATE_THREAD_DEBUG_INFO = ^_CREATE_THREAD_DEBUG_INFO;

(*
{+// }
{-TODO: sockets }
{-typedef struct _SOCKET_ADDRESS { }
{-LPSOCKADDR lpSockaddr ; }
{-INT iSockaddrLength ; }
{-} SOCKET_ADDRESS, *PSOCKET_ADDRESS, *LPSOCKET_ADDRESS; }
{= }

{+// }
{-typedef struct _CSADDR_INFO { }
{-SOCKET_ADDRESS LocalAddr; }
{-SOCKET_ADDRESS RemoteAddr; }
{-INT iSocketType; }
{-INT iProtocol; }
{-} CSADDR_INFO; }
{= }
*)

TYPE _currencyfmt = RECORD
                      NumDigits : Word;
                      LeadingZero : Word;
                      Grouping : Word;
                      lpDecimalSep : PTSTR;
                      lpThousandSep : PTSTR;
                      NegativeOrder : Word;
                      PositiveOrder : Word;
                      lpCurrencySymbol : PTSTR;
                    END {  currencyfmt};
currencyfmt   = _currencyfmt;
Tcurrencyfmt  = _currencyfmt;
Pcurrencyfmt  = ^_currencyfmt;
LPcurrencyfmt = ^_currencyfmt;

TYPE tagCURSORSHAPE = RECORD
                        xHotSpot : Integer;
                        yHotSpot : Integer;
                        cx : Integer;
                        cy : Integer;
                        cbWidth : Integer;
                        Planes : BYTE;
                        BitsPixel : BYTE;
                      END {tagCURSORSHAPE};
CURSORSHAPE   = tagCURSORSHAPE;
TCURSORSHAPE  = tagCURSORSHAPE;
PCURSORSHAPE  = ^tagCURSORSHAPE;
LPCURSORSHAPE = ^tagCURSORSHAPE;

TYPE tagCWPRETSTRUCT = RECORD
                         lResult : LRESULT;
                         lParam : LPARAM32;
                         wParam : UINT;
                         message : DWord;
                         hwnd : HWND;
                       END {tagCWPRETSTRUCT};
TYPE CWPRETSTRUCT   = tagCWPRETSTRUCT;
TYPE TCWPRETSTRUCT  = tagCWPRETSTRUCT;
TYPE PCWPRETSTRUCT  = ^tagCWPRETSTRUCT;
TYPE LPCWPRETSTRUCT = ^tagCWPRETSTRUCT;

TYPE tagCWPSTRUCT = RECORD
                      lParam : LPARAM32;
                      wParam : UINT;
                      message : Word;
                      hwnd : HWND;
                    END {tagCWPSTRUCT};
CWPSTRUCT   = tagCWPSTRUCT;
TCWPSTRUCT  = tagCWPSTRUCT;
PCWPSTRUCT  = ^tagCWPSTRUCT;
LPCWPSTRUCT = ^tagCWPSTRUCT;

TYPE _DATATYPES_INFO_1 = RECORD
                           pName : LPTSTR;
                         END {  DATATYPES_INFO_1};
DATATYPES_INFO_1   = _DATATYPES_INFO_1;
TDATATYPES_INFO_1  = _DATATYPES_INFO_1;
PDATATYPES_INFO_1  = ^_DATATYPES_INFO_1;
LPDATATYPES_INFO_1 = ^_DATATYPES_INFO_1;

TYPE DDEACK = RECORD
            bAppReturnCode : ShortWord {Value 8};
            reserved : ShortWord {Value 6};
            fBusy : ShortWord {Value 1};
            fAck : ShortWord {Value 1};
          END {  7};

TYPE DDEADVISE = RECORD
            reserved : ShortWord {Value 14};
            fDeferUpd : ShortWord {Value 1};
            fAckReq : ShortWord {Value 1};
            cfFormat : SmallInt;
          END {  8};

TYPE DDEDATA = RECORD
            unused : ShortWord {Value 12};
            fResponse : ShortWord {Value 1};
            fRelease : ShortWord {Value 1};
            reserved : ShortWord {Value 1};
            fAckReq : ShortWord {Value 1};
            cfFormat : SmallInt;
            Value : ARRAY [0..0] OF BYTE;
          END {  9};


TYPE DDELN = RECORD
             unused : ShortWord {Value 13};
             fRelease : ShortWord {Value 1};
             fDeferUpd : ShortWord {Value 1};
             fAckReq : ShortWord {Value 1};
             cfFormat : SmallInt;
           END {  10};

TYPE tagDDEML_MSG_HOOK_DATA = RECORD
                                uiLo : Word;
                                uiHi : Word;
                                cbData : DWord;
                                Data : ARRAY [0..7] OF DWord;
                              END {tagDDEML_MSG_HOOK_DATA};
TYPE DDEML_MSG_HOOK_DATA   = tagDDEML_MSG_HOOK_DATA;
TYPE TDDEML_MSG_HOOK_DATA  = tagDDEML_MSG_HOOK_DATA;
TYPE PDDEML_MSG_HOOK_DATA  = ^tagDDEML_MSG_HOOK_DATA;
TYPE LPDDEML_MSG_HOOK_DATA = ^tagDDEML_MSG_HOOK_DATA;

TYPE DDEPOKE = RECORD
             unused : ShortWord {Value 13};
             fRelease : ShortWord {Value 1};
             fReserved : ShortWord {Value 2};
             cfFormat : SmallInt;
             Value : ARRAY [0..0] OF BYTE;
           END {  11};


TYPE DDEUP = RECORD
             unused : ShortWord {Value 12};
             fAck : ShortWord {Value 1};
             fRelease : ShortWord {Value 1};
             fReserved : ShortWord {Value 1};
             fAckReq : ShortWord {Value 1};
             cfFormat : SmallInt;
             rgb : ARRAY [0..0] OF BYTE;
           END {  12};


TYPE PEXCEPTION_RECORD  = ^_EXCEPTION_RECORD;
     _EXCEPTION_RECORD = RECORD
                           ExceptionCode : DWord;
                           ExceptionFlags : DWord;
                           ExceptionRecord : PEXCEPTION_RECORD;
                           ExceptionAddress : Pointer;
                           NumberParameters : DWord;
                           ExceptionInformation : ARRAY [0..EXCEPTION_MAXIMUM_PARAMETERS - 1] OF DWord;
                         END {  EXCEPTION_RECORD};
EXCEPTION_RECORD   = _EXCEPTION_RECORD;
TEXCEPTION_RECORD  = _EXCEPTION_RECORD;
LPEXCEPTION_RECORD = ^_EXCEPTION_RECORD;

TYPE _EXCEPTION_DEBUG_INFO = RECORD
                               ExceptionRecord : EXCEPTION_RECORD;
                               dwFirstChance : DWord;
                             END {  EXCEPTION_DEBUG_INFO};
TYPE EXCEPTION_DEBUG_INFO   = _EXCEPTION_DEBUG_INFO;
TYPE TEXCEPTION_DEBUG_INFO  = _EXCEPTION_DEBUG_INFO;
TYPE PEXCEPTION_DEBUG_INFO  = ^_EXCEPTION_DEBUG_INFO;
TYPE LPEXCEPTION_DEBUG_INFO = ^_EXCEPTION_DEBUG_INFO;

TYPE _EXIT_PROCESS_DEBUG_INFO = RECORD
                                  dwExitCode : DWord;
                                END {  EXIT_PROCESS_DEBUG_INFO};
EXIT_PROCESS_DEBUG_INFO   = _EXIT_PROCESS_DEBUG_INFO;
TEXIT_PROCESS_DEBUG_INFO  = _EXIT_PROCESS_DEBUG_INFO;
PEXIT_PROCESS_DEBUG_INFO  = ^_EXIT_PROCESS_DEBUG_INFO;
LPEXIT_PROCESS_DEBUG_INFO = ^_EXIT_PROCESS_DEBUG_INFO;

TYPE _EXIT_THREAD_DEBUG_INFO = RECORD
                                 dwExitCode : DWord;
                               END {  EXIT_THREAD_DEBUG_INFO};
EXIT_THREAD_DEBUG_INFO   = _EXIT_THREAD_DEBUG_INFO;
TEXIT_THREAD_DEBUG_INFO  = _EXIT_THREAD_DEBUG_INFO;
PEXIT_THREAD_DEBUG_INFO  = ^_EXIT_THREAD_DEBUG_INFO;
LPEXIT_THREAD_DEBUG_INFO = ^_EXIT_THREAD_DEBUG_INFO;

TYPE _LOAD_DLL_DEBUG_INFO = RECORD
                              hFile : THandle;
                              lpBaseOfDll : POINTER;
                              dwDebugInfoFileOffset : DWord;
                              nDebugInfoSize : DWord;
                              lpImageName : POINTER;
                              fUnicode : Word;
                            END {  LOAD_DLL_DEBUG_INFO};
TYPE LOAD_DLL_DEBUG_INFO   = _LOAD_DLL_DEBUG_INFO;
TYPE TLOAD_DLL_DEBUG_INFO  = _LOAD_DLL_DEBUG_INFO;
TYPE PLOAD_DLL_DEBUG_INFO  = ^_LOAD_DLL_DEBUG_INFO;
TYPE LPLOAD_DLL_DEBUG_INFO = ^_LOAD_DLL_DEBUG_INFO;

TYPE _UNLOAD_DLL_DEBUG_INFO = RECORD
                                lpBaseOfDll : POINTER;
                              END {  UNLOAD_DLL_DEBUG_INFO};
TYPE UNLOAD_DLL_DEBUG_INFO   = _UNLOAD_DLL_DEBUG_INFO;
TYPE TUNLOAD_DLL_DEBUG_INFO  = _UNLOAD_DLL_DEBUG_INFO;
TYPE PUNLOAD_DLL_DEBUG_INFO  = ^_UNLOAD_DLL_DEBUG_INFO;
TYPE LPUNLOAD_DLL_DEBUG_INFO = ^_UNLOAD_DLL_DEBUG_INFO;

TYPE _OUTPUT_DEBUG_STRING_INFO = RECORD
                                   lpDebugStringData : PChar;
                                   fUnicode : Word;
                                   nDebugStringLength : Word;
                                 END {  OUTPUT_DEBUG_STRING_INFO};
TYPE OUTPUT_DEBUG_STRING_INFO   = _OUTPUT_DEBUG_STRING_INFO;
TYPE TOUTPUT_DEBUG_STRING_INFO  = _OUTPUT_DEBUG_STRING_INFO;
TYPE POUTPUT_DEBUG_STRING_INFO  = ^_OUTPUT_DEBUG_STRING_INFO;
TYPE LPOUTPUT_DEBUG_STRING_INFO = ^_OUTPUT_DEBUG_STRING_INFO;

TYPE _RIP_INFO = RECORD
                   dwError : DWord;
                   dwType : DWord;
                 END {  RIP_INFO};
TYPE RIP_INFO   = _RIP_INFO;
TYPE TRIP_INFO  = _RIP_INFO;
TYPE PRIP_INFO  = ^TRIP_INFO;
TYPE LPRIP_INFO = ^TRIP_INFO;

TYPE _DEBUG_EVENT = RECORD
                      dwDebugEventCode : DWord;
                      dwProcessId : DWord;
                      dwThreadId : DWord;
                      u : RECORD
                       Exception : EXCEPTION_DEBUG_INFO;
                       CreateThread : CREATE_THREAD_DEBUG_INFO;
                       CreateProcessInfo : CREATE_PROCESS_DEBUG_INFO ;
                       ExitThread : EXIT_THREAD_DEBUG_INFO;
                       ExitProcess : EXIT_PROCESS_DEBUG_INFO;
                       LoadDll : LOAD_DLL_DEBUG_INFO;
                       UnloadDll : UNLOAD_DLL_DEBUG_INFO;
                       DebugString : OUTPUT_DEBUG_STRING_INFO;
                       RipInfo : RIP_INFO;
                      END; {u}
                    END {  DEBUG_EVENT};
TYPE DEBUG_EVENT   = _DEBUG_EVENT;
TYPE TDEBUG_EVENT  = _DEBUG_EVENT;
TYPE PDEBUG_EVENT  = ^_DEBUG_EVENT;
TYPE LPDEBUG_EVENT = ^_DEBUG_EVENT;

TYPE tagDEBUGHOOKINFO = RECORD
                          idThread : DWord;
                          idThreadInstaller : DWord;
                          lParam : LPARAM32;
                          wParam : UINT;
                          code : Integer;
                        END {tagDEBUGHOOKINFO};
DEBUGHOOKINFO   = tagDEBUGHOOKINFO;
TDEBUGHOOKINFO  = tagDEBUGHOOKINFO;
PDEBUGHOOKINFO  = ^tagDEBUGHOOKINFO;
LPDEBUGHOOKINFO = ^tagDEBUGHOOKINFO;

TYPE tagDELETEITEMSTRUCT = RECORD
                             CtlType : Word;
                             CtlID : Word;
                             itemID : Word;
                             hwndItem : HWND;
                             itemData : Word;
                           END {tagDELETEITEMSTRUCT};
DELETEITEMSTRUCT   = tagDELETEITEMSTRUCT;
TDELETEITEMSTRUCT  = tagDELETEITEMSTRUCT;
PDELETEITEMSTRUCT  = ^tagDELETEITEMSTRUCT;
LPDELETEITEMSTRUCT = ^tagDELETEITEMSTRUCT;

TYPE _DEV_BROADCAST_HDR = RECORD
                            dbch_size : ULONG;
                            dbch_devicetype : ULONG;
                            dbch_reserved : ULONG;
                          END {  DEV_BROADCAST_HDR};
TYPE DEV_BROADCAST_HDR   = _DEV_BROADCAST_HDR;
TYPE TDEV_BROADCAST_HDR  = _DEV_BROADCAST_HDR;
TYPE PDEV_BROADCAST_HDR  = ^_DEV_BROADCAST_HDR;
TYPE LPDEV_BROADCAST_HDR = ^_DEV_BROADCAST_HDR;


TYPE _DEV_BROADCAST_OEM = RECORD
                            dbco_size : ULONG;
                            dbco_devicetype : ULONG;
                            dbco_reserved : ULONG;
                            dbco_identifier : ULONG;
                            dbco_suppfunc : ULONG;
                          END {  DEV_BROADCAST_OEM};
DEV_BROADCAST_OEM   = _DEV_BROADCAST_OEM;
TDEV_BROADCAST_OEM  = _DEV_BROADCAST_OEM;
PDEV_BROADCAST_OEM  = ^_DEV_BROADCAST_OEM;
LPDEV_BROADCAST_OEM = ^_DEV_BROADCAST_OEM;

TYPE _DEV_BROADCAST_PORT = RECORD
                             dbcp_size : ULONG;
                             dbcp_devicetype : ULONG;
                             dbcp_reserved : ULONG;
                             dbcp_name : ARRAY [0..0] OF Char;
                           END {  DEV_BROADCAST_PORT};
DEV_BROADCAST_PORT   = _DEV_BROADCAST_PORT;
TDEV_BROADCAST_PORT  = _DEV_BROADCAST_PORT;
PDEV_BROADCAST_PORT  = ^_DEV_BROADCAST_PORT;
LPDEV_BROADCAST_PORT = ^_DEV_BROADCAST_PORT;

TYPE _DEV_BROADCAST_USERDEFINED = RECORD
                                    dbud_dbh : _DEV_BROADCAST_HDR;
                                    dbud_szName : ARRAY [0..0] OF Char;
                                    dbud_rgbUserDefined : ARRAY [0..0] OF BYTE;
                                  END {  DEV_BROADCAST_USERDEFINED};
DEV_BROADCAST_USERDEFINED   = _DEV_BROADCAST_USERDEFINED;
TDEV_BROADCAST_USERDEFINED  = _DEV_BROADCAST_USERDEFINED;
PDEV_BROADCAST_USERDEFINED  = ^_DEV_BROADCAST_USERDEFINED;
LPDEV_BROADCAST_USERDEFINED = ^_DEV_BROADCAST_USERDEFINED;

TYPE _DEV_BROADCAST_VOLUME = RECORD
                               dbcv_size : ULONG;
                               dbcv_devicetype : ULONG;
                               dbcv_reserved : ULONG;
                               dbcv_unitmask : ULONG;
                               dbcv_flags : USHORT;
                             END {  DEV_BROADCAST_VOLUME};
DEV_BROADCAST_VOLUME   = _DEV_BROADCAST_VOLUME;
TDEV_BROADCAST_VOLUME  = _DEV_BROADCAST_VOLUME;
PDEV_BROADCAST_VOLUME  = ^_DEV_BROADCAST_VOLUME;
LPDEV_BROADCAST_VOLUME = ^_DEV_BROADCAST_VOLUME;

TYPE _devicemode = RECORD
                     dmDeviceName : ARRAY [0..CCHDEVICENAME - 1] OF BCHAR;
                     dmSpecVersion : Word;
                     dmDriverVersion : Word;
                     dmSize : Word;
                     dmDriverExtra : Word;
                     dmFields : DWord;
                     dmOrientation : SmallInt;
                     dmPaperSize : SmallInt;
                     dmPaperLength : SmallInt;
                     dmPaperWidth : SmallInt;
                     dmScale : SmallInt;
                     dmCopies : SmallInt;
                     dmDefaultSource : SmallInt;
                     dmPrintQuality : SmallInt;
                     dmColor : SmallInt;
                     dmDuplex : SmallInt;
                     dmYResolution : SmallInt;
                     dmTTOption : SmallInt;
                     dmCollate : SmallInt;
                     dmFormName : ARRAY [0..CCHFORMNAME - 1] OF BCHAR;
                     dmLogPixels : Word;
                     dmBitsPerPel : DWord;
                     dmPelsWidth : DWord;
                     dmPelsHeight : DWord;
                     dmDisplayFlags : DWord;
                     dmDisplayFrequency : DWord;
                     dmICMMethod : DWord;
                     dmICMIntent : DWord;
                     dmMediaType : DWord;
                     dmDitherType : DWord;
                     dmICCManufacturer : DWord;
                     dmICCModel : DWord;
                   END { _devicemode};
Tdevicemode  = _devicemode;
Pdevicemode  = ^_devicemode;
TDevMode     = _devicemode;
DevMode      = _devicemode;
pDevMode     = ^DevMode;


TYPE tagDEVNAMES = RECORD
                     wDriverOffset : Word;
                     wDeviceOffset : Word;
                     wOutputOffset : Word;
                     wDefault : Word;
                   END {tagDEVNAMES};
DEVNAMES   = tagDEVNAMES;
TDEVNAMES  = tagDEVNAMES;
PDEVNAMES  = ^tagDEVNAMES;
LPDEVNAMES = ^tagDEVNAMES;

TYPE tagDIBSECTION = RECORD
                       dsBm : BITMAP;
                       dsBmih : BITMAPINFOHEADER;
                       dsBitfields : ARRAY [0..2] OF DWord;
                       dshSection : THandle;
                       dsOffset : DWord;
                     END {tagDIBSECTION};
TYPE DIBSECTION   = tagDIBSECTION;
TYPE TDIBSECTION  = tagDIBSECTION;
TYPE PDIBSECTION  = ^tagDIBSECTION;
TYPE LPDIBSECTION = ^tagDIBSECTION;

TYPE _LARGE_INTEGER = RECORD
   CASE integer OF
      0 : ( LowPart, HighPart : DWord );
      1 : ( QuadPart : LongLong );
   END {  LARGE_INTEGER};
LARGE_INTEGER   = _LARGE_INTEGER;
TLARGE_INTEGER  = _LARGE_INTEGER;
TLARGEINTEGER  = _LARGE_INTEGER;
PLARGE_INTEGER  = ^_LARGE_INTEGER;
LPLARGE_INTEGER = ^_LARGE_INTEGER;

TYPE _DISK_GEOMETRY = RECORD
                        Cylinders : LARGE_INTEGER;
                        MediaType : MEDIA_TYPE;
                        TracksPerCylinder : DWord;
                        SectorsPerTrack : DWord;
                        BytesPerSector : DWord;
                      END {  DISK_GEOMETRY};
DISK_GEOMETRY   = _DISK_GEOMETRY;
TDISK_GEOMETRY  = _DISK_GEOMETRY;
PDISK_GEOMETRY  = ^_DISK_GEOMETRY;
LPDISK_GEOMETRY = ^_DISK_GEOMETRY;

TYPE _DISK_PERFORMANCE = RECORD
                           BytesRead : LARGE_INTEGER;
                           BytesWritten : LARGE_INTEGER;
                           ReadTime : LARGE_INTEGER;
                           WriteTime : LARGE_INTEGER;
                           ReadCount : DWord;
                           WriteCount : DWord;
                           QueueDepth : DWord;
                         END {  DISK_PERFORMANCE};
DISK_PERFORMANCE   = _DISK_PERFORMANCE;
TDISK_PERFORMANCE  = _DISK_PERFORMANCE;
PDISK_PERFORMANCE  = ^_DISK_PERFORMANCE;
LPDISK_PERFORMANCE = ^_DISK_PERFORMANCE;

TYPE DLGITEMTEMPLATE = PACKED RECORD
             style : DWord;
             dwExtendedStyle : DWord;
             x : SmallInt;
             y : SmallInt;
             cx : SmallInt;
             cy : SmallInt;
             id : Word;
           END {  13};
LPDLGITEMTEMPLATE = ^DLGITEMTEMPLATE;
PDLGITEMTEMPLATE = ^DLGITEMTEMPLATE;


TYPE DLGTEMPLATE = PACKED RECORD
             style : DWord;
             dwExtendedStyle : DWord;
             cdit : Word;
             x : SmallInt;
             y : SmallInt;
             cx : SmallInt;
             cy : SmallInt;
           END {  14};
TDLGTEMPLATE = DLGTEMPLATE;
PDLGTEMPLATE = ^DLGTEMPLATE;
LPDLGTEMPLATE = ^DLGTEMPLATE;
PCDLGTEMPLATE = ^DLGTEMPLATE;

TYPE _DOC_INFO_1 = RECORD
                     pDocName : LPTSTR;
                     pOutputFile : LPTSTR;
                     pDatatype : LPTSTR;
                   END {  DOC_INFO_1};
DOC_INFO_1   = _DOC_INFO_1;
TDOC_INFO_1  = _DOC_INFO_1;
PDOC_INFO_1  = ^_DOC_INFO_1;
LPDOC_INFO_1 = ^_DOC_INFO_1;
TDOCINFO1  = _DOC_INFO_1;

TYPE _DOC_INFO_2 = RECORD
                     pDocName : LPTSTR;
                     pOutputFile : LPTSTR;
                     pDatatype : LPTSTR;
                     dwMode : DWord;
                     JobId : DWord;
                   END {  DOC_INFO_2};
TYPE DOC_INFO_2   = _DOC_INFO_2;
TYPE TDOC_INFO_2  = _DOC_INFO_2;
TYPE PDOC_INFO_2  = ^_DOC_INFO_2;
TYPE LPDOC_INFO_2 = ^_DOC_INFO_2;
TYPE TDOCINFO2  = _DOC_INFO_2;

TYPE DOCINFO = RECORD
             cbSize : Integer;
             lpszDocName : LPCTSTR;
             lpszOutput : LPCTSTR;
             lpszDatatype : LPCTSTR;
             fwType : DWord;
           END {  15};
TDocInfo = DocInfo;


TYPE DRAGLISTINFO = RECORD
             uNotification : Word;
             hWnd : HWND;
             ptCursor : POINT;
           END {  16};
LPDRAGLISTINFO = ^DRAGLISTINFO;
TDRAGLISTINFO = DRAGLISTINFO;

TYPE tagDRAWITEMSTRUCT = PACKED RECORD
                           CtlType : UINT;
                           CtlID : UINT;
                           itemID : UINT;
                           itemAction : UINT;
                           itemState : UINT;
                           hwndItem : HWND;
                           hDC : THDC;
                           rcItem : RECT;
                           itemData : DWord;
                         END {tagDRAWITEMSTRUCT};
// DRAWITEMSTRUCT   = tagDRAWITEMSTRUCT;
TDRAWITEMSTRUCT  = tagDRAWITEMSTRUCT;
PDRAWITEMSTRUCT  = ^tagDRAWITEMSTRUCT;
// LPDRAWITEMSTRUCT = ^tagDRAWITEMSTRUCT;

TYPE DRAWTEXTPARAMS = RECORD
             cbSize : Word;
             iTabLength : Integer;
             iLeftMargin : Integer;
             iRightMargin : Integer;
             uiLengthDrawn : Word;
           END {  17};
LPDRAWTEXTPARAMS = ^DRAWTEXTPARAMS;
TDRAWTEXTPARAMS = DRAWTEXTPARAMS;


TYPE _PARTITION_INFORMATION = RECORD
                                PartitionType : BYTE;
                                BootIndicator : BOOLEAN;
                                RecognizedPartition : BOOLEAN;
                                RewritePartition : BOOLEAN;
                                StartingOffset : LARGE_INTEGER;
                                PartitionLength : LARGE_INTEGER;
                                HiddenSectors : LARGE_INTEGER;
                              END {  PARTITION_INFORMATION};
PARTITION_INFORMATION   = _PARTITION_INFORMATION;
TPARTITION_INFORMATION  = _PARTITION_INFORMATION;
PPARTITION_INFORMATION  = ^_PARTITION_INFORMATION;
LPPARTITION_INFORMATION = ^_PARTITION_INFORMATION;

TYPE _DRIVE_LAYOUT_INFORMATION = RECORD
                                   PartitionCount : DWord;
                                   Signature : DWord;
                                   PartitionEntry : ARRAY [0..0] OF PARTITION_INFORMATION;
                                 END {  DRIVE_LAYOUT_INFORMATION};
DRIVE_LAYOUT_INFORMATION   = _DRIVE_LAYOUT_INFORMATION;
TDRIVE_LAYOUT_INFORMATION  = _DRIVE_LAYOUT_INFORMATION;
PDRIVE_LAYOUT_INFORMATION  = ^_DRIVE_LAYOUT_INFORMATION;
LPDRIVE_LAYOUT_INFORMATION = ^_DRIVE_LAYOUT_INFORMATION;

TYPE _DRIVER_INFO_1 = RECORD
                        pName : LPTSTR;
                      END {  DRIVER_INFO_1};
DRIVER_INFO_1   = _DRIVER_INFO_1;
TDRIVER_INFO_1  = _DRIVER_INFO_1;
PDRIVER_INFO_1  = ^_DRIVER_INFO_1;
LPDRIVER_INFO_1 = ^_DRIVER_INFO_1;

TYPE _DRIVER_INFO_2 = RECORD
                        cVersion : DWord;
                        pName : PTSTR;
                        pEnvironment : PTSTR;
                        pDriverPath : PTSTR;
                        pDataFile : PTSTR;
                        pConfigFile : PTSTR;
                      END {  DRIVER_INFO_2};
DRIVER_INFO_2   = _DRIVER_INFO_2;
TDRIVER_INFO_2  = _DRIVER_INFO_2;
PDRIVER_INFO_2  = ^_DRIVER_INFO_2;
LPDRIVER_INFO_2 = ^_DRIVER_INFO_2;

TYPE _DRIVER_INFO_3 = RECORD
                        cVersion : DWord;
                        pName : PTSTR;
                        pEnvironment : PTSTR;
                        pDriverPath : PTSTR;
                        pDataFile : PTSTR;
                        pConfigFile : PTSTR;
                        pHelpFile : PTSTR;
                        pDependentFiles : PTSTR;
                        pMonitorName : PTSTR;
                        pDefaultDataType : PTSTR;
                      END {  DRIVER_INFO_3};
DRIVER_INFO_3   = _DRIVER_INFO_3;
TDRIVER_INFO_3  = _DRIVER_INFO_3;
PDRIVER_INFO_3  = ^_DRIVER_INFO_3;
LPDRIVER_INFO_3 = ^_DRIVER_INFO_3;

TYPE _editstream = RECORD
                     dwCookie : DWord;
                     dwError : DWord;
                     pfnCallback : EDITSTREAMCALLBACK;
                   END {  editstream};
editstream   = _editstream;
Teditstream  = _editstream;
Peditstream  = ^_editstream;
LPeditstream = ^_editstream;

TYPE tagEMR = RECORD
                iType : DWord;
                nSize : DWord;
              END {tagEMR};
EMR   = tagEMR;
TEMR  = tagEMR;
PEMR  = ^tagEMR;
LPEMR = ^tagEMR;

TYPE tagEMRANGLEARC = RECORD
                        emr : EMR;
                        ptlCenter : POINTL;
                        nRadius : DWord;
                        eStartAngle : Single;
                        eSweepAngle : Single;
                      END {tagEMRANGLEARC};
EMRANGLEARC   = tagEMRANGLEARC;
TEMRANGLEARC  = tagEMRANGLEARC;
PEMRANGLEARC  = ^tagEMRANGLEARC;
LPEMRANGLEARC = ^tagEMRANGLEARC;

TYPE tagEMRARC = RECORD
                   emr : EMR;
                   rclBox : RECTL;
                   ptlStart : POINTL;
                   ptlEnd : POINTL;
                 END {tagEMRARC};
TEMRARC  = tagEMRARC;
LPEMRARC = ^tagEMRARC;
EMRARC = tagEMRARC;
EMRARCTO = tagEMRARC;
EMRCHORD = tagEMRARC;
EMRPIE = tagEMRARC;
PEMRPIE = ^tagEMRARC;
PEMRARC = ^tagEMRARC;
PEMRARCTO = ^tagEMRARC;
PEMRCHORD = ^tagEMRARC;


TYPE _XFORM = RECORD
                eM11 : Single;
                eM12 : Single;
                eM21 : Single;
                eM22 : Single;
                eDx : Single;
                eDy : Single;
              END {  XFORM};
XFORM   = _XFORM;
TXFORM  = _XFORM;
PXFORM  = ^_XFORM;
LPXFORM = ^_XFORM;

TYPE tagEMRBITBLT = RECORD
                      emr : EMR;
                      rclBounds : RECTL;
                      xDest : LongInt;
                      yDest : LongInt;
                      cxDest : LongInt;
                      cyDest : LongInt;
                      dwRop : DWord;
                      xSrc : LongInt;
                      ySrc : LongInt;
                      xformSrc : XFORM;
                      crBkColorSrc : TColorRef;
                      iUsageSrc : DWord;
                      offBmiSrc : DWord;
                      offBitsSrc : DWord;
                      cbBitsSrc : DWord;
                    END {tagEMRBITBLT};
EMRBITBLT   = tagEMRBITBLT;
TEMRBITBLT  = tagEMRBITBLT;
PEMRBITBLT  = ^tagEMRBITBLT;
LPEMRBITBLT = ^tagEMRBITBLT;

TYPE tagLOGBRUSH = RECORD
                     lbStyle : Word;
                     lbColor : TColorRef;
                     lbHatch : LongInt;
                   END {tagLOGBRUSH};
LOGBRUSH   = tagLOGBRUSH;
TLOGBRUSH  = tagLOGBRUSH;
PLOGBRUSH  = ^tagLOGBRUSH;
LPLOGBRUSH = ^tagLOGBRUSH;

TYPE tagEMRCREATEBRUSHINDIRECT = RECORD
                                   emr : EMR;
                                   ihBrush : DWord;
                                   lb : LOGBRUSH;
                                 END {tagEMRCREATEBRUSHINDIRECT};
EMRCREATEBRUSHINDIRECT   = tagEMRCREATEBRUSHINDIRECT;
TEMRCREATEBRUSHINDIRECT  = tagEMRCREATEBRUSHINDIRECT;
PEMRCREATEBRUSHINDIRECT  = ^tagEMRCREATEBRUSHINDIRECT;
LPEMRCREATEBRUSHINDIRECT = ^tagEMRCREATEBRUSHINDIRECT;

TYPE LCSCSTYPE = LongInt;
TYPE LCSGAMUTMATCH = LongInt;


TYPE tagLOGCOLORSPACE = RECORD
                          lcsSignature : DWord;
                          lcsVersion : DWord;
                          lcsSize : DWord;
                          lcsCSType : LCSCSTYPE;
                          lcsIntent : LCSGAMUTMATCH;
                          lcsEndpoints : CIEXYZTRIPLE;
                          lcsGammaRed : DWord;
                          lcsGammaGreen : DWord;
                          lcsGammaBlue : DWord;
                          lcsFilename : ARRAY [0..MAX_PATH - 1] OF TCHAR;
                        END {tagLOGCOLORSPACE};
LOGCOLORSPACE   = tagLOGCOLORSPACE;
TLOGCOLORSPACE  = tagLOGCOLORSPACE;
PLOGCOLORSPACE  = ^tagLOGCOLORSPACE;
LPLOGCOLORSPACE = ^tagLOGCOLORSPACE;


TYPE tagEMRCREATECOLORSPACE = RECORD
                                emr : EMR;
                                ihCS : DWord;
                                lcs : LOGCOLORSPACE;
                              END {tagEMRCREATECOLORSPACE};
EMRCREATECOLORSPACE   = tagEMRCREATECOLORSPACE;
TEMRCREATECOLORSPACE  = tagEMRCREATECOLORSPACE;
PEMRCREATECOLORSPACE  = ^tagEMRCREATECOLORSPACE;
LPEMRCREATECOLORSPACE = ^tagEMRCREATECOLORSPACE;

TYPE tagEMRCREATEDIBPATTERNBRUSHPT = RECORD
                                       emr : EMR;
                                       ihBrush : DWord;
                                       iUsage : DWord;
                                       offBmi : DWord;
                                       cbBmi : DWord;
                                       offBits : DWord;
                                       cbBits : DWord;
                                     END {tagEMRCREATEDIBPATTERNBRUSHPT};
EMRCREATEDIBPATTERNBRUSHPT   = tagEMRCREATEDIBPATTERNBRUSHPT;
TEMRCREATEDIBPATTERNBRUSHPT  = tagEMRCREATEDIBPATTERNBRUSHPT;
PEMRCREATEDIBPATTERNBRUSHPT  = ^tagEMRCREATEDIBPATTERNBRUSHPT;
LPEMRCREATEDIBPATTERNBRUSHPT = ^tagEMRCREATEDIBPATTERNBRUSHPT;


TYPE tagEMRCREATEMONOBRUSH = RECORD
                               emr : EMR;
                               ihBrush : DWord;
                               iUsage : DWord;
                               offBmi : DWord;
                               cbBmi : DWord;
                               offBits : DWord;
                               cbBits : DWord;
                             END {tagEMRCREATEMONOBRUSH};
EMRCREATEMONOBRUSH   = tagEMRCREATEMONOBRUSH;
TEMRCREATEMONOBRUSH  = tagEMRCREATEMONOBRUSH;
PEMRCREATEMONOBRUSH  = ^tagEMRCREATEMONOBRUSH;
LPEMRCREATEMONOBRUSH = ^tagEMRCREATEMONOBRUSH;

TYPE tagPALETTEENTRY = RECORD
                         peRed : BYTE;
                         peGreen : BYTE;
                         peBlue : BYTE;
                         peFlags : BYTE;
                       END {tagPALETTEENTRY};
PALETTEENTRY   = tagPALETTEENTRY;
TPALETTEENTRY  = tagPALETTEENTRY;
PPALETTEENTRY  = ^tagPALETTEENTRY;
LPPALETTEENTRY = ^tagPALETTEENTRY;

TYPE tagLOGPALETTE = RECORD
                       palVersion : Word;
                       palNumEntries : Word;
                       palPalEntry : ARRAY [0..0] OF PALETTEENTRY;
                     END {tagLOGPALETTE};
LOGPALETTE   = tagLOGPALETTE;
TLOGPALETTE  = tagLOGPALETTE;
PLOGPALETTE  = ^tagLOGPALETTE;
LPLOGPALETTE = ^tagLOGPALETTE;
NPLOGPALETTE = PLOGPALETTE;


TYPE tagEMRCREATEPALETTE = RECORD
                             emr : EMR;
                             ihPal : DWord;
                             lgpl : LOGPALETTE;
                           END {tagEMRCREATEPALETTE};
EMRCREATEPALETTE   = tagEMRCREATEPALETTE;
TEMRCREATEPALETTE  = tagEMRCREATEPALETTE;
PEMRCREATEPALETTE  = ^tagEMRCREATEPALETTE;
LPEMRCREATEPALETTE = ^tagEMRCREATEPALETTE;

TYPE tagLOGPEN = RECORD
                   lopnStyle : Word;
                   lopnWidth : POINT;
                   lopnColor : TColorRef;
                 END {tagLOGPEN};
LOGPEN   = tagLOGPEN;
TLOGPEN  = tagLOGPEN;
PLOGPEN  = ^tagLOGPEN;
LPLOGPEN = ^tagLOGPEN;

TYPE tagEMRCREATEPEN = RECORD
                         emr : EMR;
                         ihPen : DWord;
                         lopn : LOGPEN;
                       END {tagEMRCREATEPEN};
EMRCREATEPEN   = tagEMRCREATEPEN;
TEMRCREATEPEN  = tagEMRCREATEPEN;
PEMRCREATEPEN  = ^tagEMRCREATEPEN;
LPEMRCREATEPEN = ^tagEMRCREATEPEN;

TYPE tagEMRELLIPSE = RECORD
                       emr : EMR;
                       rclBox : RECTL;
                     END {tagEMRELLIPSE};
EMRELLIPSE   = tagEMRELLIPSE;
TEMRELLIPSE  = tagEMRELLIPSE;
PEMRELLIPSE  = ^tagEMRELLIPSE;
LPEMRELLIPSE = ^tagEMRELLIPSE;
EMRRECTANGLE = tagEMRELLIPSE;
PEMRRECTANGLE = ^tagEMRELLIPSE;


TYPE tagEMREOF = RECORD
                   emr : EMR;
                   nPalEntries : DWord;
                   offPalEntries : DWord;
                   nSizeLast : DWord;
                 END {tagEMREOF};
EMREOF   = tagEMREOF;
TEMREOF  = tagEMREOF;
PEMREOF  = ^tagEMREOF;
LPEMREOF = ^tagEMREOF;

TYPE tagEMREXCLUDECLIPRECT = RECORD
                               emr : EMR;
                               rclClip : RECTL;
                             END {tagEMREXCLUDECLIPRECT};
EMREXCLUDECLIPRECT   = tagEMREXCLUDECLIPRECT;
TEMREXCLUDECLIPRECT  = tagEMREXCLUDECLIPRECT;
PEMREXCLUDECLIPRECT  = ^tagEMREXCLUDECLIPRECT;
LPEMREXCLUDECLIPRECT = ^tagEMREXCLUDECLIPRECT;

TYPE tagPANOSE = RECORD
                   bFamilyType : BYTE;
                   bSerifStyle : BYTE;
                   bWeight : BYTE;
                   bProportion : BYTE;
                   bContrast : BYTE;
                   bStrokeVariation : BYTE;
                   bArmStyle : BYTE;
                   bLetterform : BYTE;
                   bMidline : BYTE;
                   bXHeight : BYTE;
                 END {tagPANOSE};
PANOSE   = tagPANOSE;
TPANOSE  = tagPANOSE;
PPANOSE  = ^tagPANOSE;
LPPANOSE = ^tagPANOSE;

TYPE tagEXTLOGFONT = RECORD
                       elfLogFont : LOGFONT;
                       elfFullName : ARRAY [0..LF_FULLFACESIZE - 1] OF BCHAR;
                       elfStyle : ARRAY [0..LF_FACESIZE - 1] OF BCHAR;
                       elfVersion : DWord;
                       elfStyleSize : DWord;
                       elfMatch : DWord;
                       elfReserved : DWord;
                       elfVendorId : ARRAY [0..ELF_VENDOR_SIZE - 1] OF BYTE;
                       elfCulture : DWord;
                       elfPanose : PANOSE;
                     END {tagEXTLOGFONT};
TYPE EXTLOGFONT   = tagEXTLOGFONT;
TYPE TEXTLOGFONT  = tagEXTLOGFONT;
TYPE PEXTLOGFONT  = ^tagEXTLOGFONT;
TYPE LPEXTLOGFONT = ^tagEXTLOGFONT;

TYPE tagEMREXTCREATEFONTINDIRECTW = RECORD
                                      emr : EMR;
                                      ihFont : DWord;
                                      elfw : EXTLOGFONT;
                                    END {tagEMREXTCREATEFONTINDIRECTW};
EMREXTCREATEFONTINDIRECTW   = tagEMREXTCREATEFONTINDIRECTW;
TEMREXTCREATEFONTINDIRECTW  = tagEMREXTCREATEFONTINDIRECTW;
PEMREXTCREATEFONTINDIRECTW  = ^tagEMREXTCREATEFONTINDIRECTW;
LPEMREXTCREATEFONTINDIRECTW = ^tagEMREXTCREATEFONTINDIRECTW;

TYPE tagEXTLOGPEN = RECORD
                      elpPenStyle : Word;
                      elpWidth : Word;
                      elpBrushStyle : Word;
                      elpColor : TColorRef;
                      elpHatch : LongInt;
                      elpNumEntries : DWord;
                      elpStyleEntry : ARRAY [0..0] OF DWord;
                    END {tagEXTLOGPEN};
EXTLOGPEN   = tagEXTLOGPEN;
TEXTLOGPEN  = tagEXTLOGPEN;
PEXTLOGPEN  = ^tagEXTLOGPEN;
LPEXTLOGPEN = ^tagEXTLOGPEN;

TYPE tagEMREXTCREATEPEN = RECORD
                            emr : EMR;
                            ihPen : DWord;
                            offBmi : DWord;
                            cbBmi : DWord;
                            offBits : DWord;
                            cbBits : DWord;
                            elp : EXTLOGPEN;
                          END {tagEMREXTCREATEPEN};
EMREXTCREATEPEN   = tagEMREXTCREATEPEN;
TEMREXTCREATEPEN  = tagEMREXTCREATEPEN;
PEMREXTCREATEPEN  = ^tagEMREXTCREATEPEN;
LPEMREXTCREATEPEN = ^tagEMREXTCREATEPEN;

TYPE tagEMREXTFLOODFILL = RECORD
                            emr : EMR;
                            ptlStart : POINTL;
                            crColor : TColorRef;
                            iMode : DWord;
                          END {tagEMREXTFLOODFILL};
EMREXTFLOODFILL   = tagEMREXTFLOODFILL;
TEMREXTFLOODFILL  = tagEMREXTFLOODFILL;
PEMREXTFLOODFILL  = ^tagEMREXTFLOODFILL;
LPEMREXTFLOODFILL = ^tagEMREXTFLOODFILL;

TYPE tagEMREXTSELECTCLIPRGN = RECORD
                                emr : EMR;
                                cbRgnData : DWord;
                                iMode : DWord;
                                RgnData : ARRAY [0..0] OF BYTE;
                              END {tagEMREXTSELECTCLIPRGN};
EMREXTSELECTCLIPRGN   = tagEMREXTSELECTCLIPRGN;
TEMREXTSELECTCLIPRGN  = tagEMREXTSELECTCLIPRGN;
PEMREXTSELECTCLIPRGN  = ^tagEMREXTSELECTCLIPRGN;
LPEMREXTSELECTCLIPRGN = ^tagEMREXTSELECTCLIPRGN;

TYPE tagEMRTEXT = RECORD
                    ptlReference : POINTL;
                    nChars : DWord;
                    offString : DWord;
                    fOptions : DWord;
                    rcl : RECTL;
                    offDx : DWord;
                  END {tagEMRTEXT};
EMRTEXT   = tagEMRTEXT;
TEMRTEXT  = tagEMRTEXT;
PEMRTEXT  = ^tagEMRTEXT;
LPEMRTEXT = ^tagEMRTEXT;

TYPE tagEMREXTTEXTOUTA = RECORD
                           emr : EMR;
                           rclBounds : RECTL;
                           iGraphicsMode : DWord;
                           exScale : Single;
                           eyScale : Single;
                           emrtext : EMRTEXT;
                         END {tagEMREXTTEXTOUTA};
EMREXTTEXTOUTA   = tagEMREXTTEXTOUTA;
TEMREXTTEXTOUTA  = tagEMREXTTEXTOUTA;
PEMREXTTEXTOUTA  = ^tagEMREXTTEXTOUTA;
LPEMREXTTEXTOUTA = ^tagEMREXTTEXTOUTA;
MREXTTEXTOUTA = tagEMREXTTEXTOUTA;
EMREXTTEXTOUTW = tagEMREXTTEXTOUTA;
PEMREXTTEXTOUTW = ^tagEMREXTTEXTOUTA;

TYPE tagEMRFILLPATH = RECORD
                        emr : EMR;
                        rclBounds : RECTL;
                      END {tagEMRFILLPATH};
EMRFILLPATH   = tagEMRFILLPATH;
TEMRFILLPATH  = tagEMRFILLPATH;
PEMRFILLPATH  = ^tagEMRFILLPATH;
LPEMRFILLPATH = ^tagEMRFILLPATH;
EMRSTROKEANDFILLPATH = tagEMRFILLPATH;
EMRSTROKEPATH = tagEMRFILLPATH;
PEMRSTROKEANDFILLPATH = ^tagEMRFILLPATH;
PEMRSTROKEPATH = ^tagEMRFILLPATH;


TYPE tagEMRFILLRGN = RECORD
                       emr : EMR;
                       rclBounds : RECTL;
                       cbRgnData : DWord;
                       ihBrush : DWord;
                       RgnData : ARRAY [0..0] OF BYTE;
                     END {tagEMRFILLRGN};
EMRFILLRGN   = tagEMRFILLRGN;
TEMRFILLRGN  = tagEMRFILLRGN;
PEMRFILLRGN  = ^tagEMRFILLRGN;
LPEMRFILLRGN = ^tagEMRFILLRGN;

TYPE tagEMRFORMAT = RECORD
                      dSignature : DWord;
                      nVersion : DWord;
                      cbData : DWord;
                      offData : DWord;
                    END {tagEMRFORMAT};
EMRFORMAT   = tagEMRFORMAT;
TEMRFORMAT  = tagEMRFORMAT;
PEMRFORMAT  = ^tagEMRFORMAT;
LPEMRFORMAT = ^tagEMRFORMAT;

TYPE tagSIZE = RECORD
                 cx : LongInt;
                 cy : LongInt;
               END {tagSIZE};
SIZE   = tagSIZE;
TSIZE  = tagSIZE;
PSIZE  = ^tagSIZE;
LPSIZE = ^tagSIZE;
SIZEL = tagSIZE;
PSIZEL = ^tagSIZE;
LPSIZEL = ^tagSIZE;


TYPE tagEMRFRAMERGN = RECORD
                        emr : EMR;
                        rclBounds : RECTL;
                        cbRgnData : DWord;
                        ihBrush : DWord;
                        szlStroke : SIZEL;
                        RgnData : ARRAY [0..0] OF BYTE;
                      END {tagEMRFRAMERGN};
EMRFRAMERGN   = tagEMRFRAMERGN;
TEMRFRAMERGN  = tagEMRFRAMERGN;
PEMRFRAMERGN  = ^tagEMRFRAMERGN;
LPEMRFRAMERGN = ^tagEMRFRAMERGN;

TYPE tagEMRGDICOMMENT = RECORD
                          emr : EMR;
                          cbData : DWord;
                          Data : ARRAY [0..0] OF BYTE;
                        END {tagEMRGDICOMMENT};
EMRGDICOMMENT   = tagEMRGDICOMMENT;
TEMRGDICOMMENT  = tagEMRGDICOMMENT;
PEMRGDICOMMENT  = ^tagEMRGDICOMMENT;
LPEMRGDICOMMENT = ^tagEMRGDICOMMENT;

TYPE tagEMRINVERTRGN = RECORD
                         emr : EMR;
                         rclBounds : RECTL;
                         cbRgnData : DWord;
                         RgnData : ARRAY [0..0] OF BYTE;
                       END {tagEMRINVERTRGN};
EMRINVERTRGN   = tagEMRINVERTRGN;
TEMRINVERTRGN  = tagEMRINVERTRGN;
PEMRINVERTRGN  = ^tagEMRINVERTRGN;
LPEMRINVERTRGN = ^tagEMRINVERTRGN;
EMRPAINTRGN = tagEMRINVERTRGN;
PEMRPAINTRGN = ^tagEMRINVERTRGN;


TYPE tagEMRLINETO = RECORD
                      emr : EMR;
                      ptl : POINTL;
                    END {tagEMRLINETO};
EMRLINETO   = tagEMRLINETO;
TEMRLINETO  = tagEMRLINETO;
PEMRLINETO  = ^tagEMRLINETO;
LPEMRLINETO = ^tagEMRLINETO;
EMRMOVETOEX = tagEMRLINETO;
PEMRMOVETOEX = ^tagEMRLINETO;


TYPE tagEMRMASKBLT = RECORD
                       emr : EMR;
                       rclBounds : RECTL;
                       xDest : LongInt;
                       yDest : LongInt;
                       cxDest : LongInt;
                       cyDest : LongInt;
                       dwRop : DWord;
                       xSrc : LongInt;
                       ySrc : LongInt;
                       xformSrc : XFORM;
                       crBkColorSrc : TColorRef;
                       iUsageSrc : DWord;
                       offBmiSrc : DWord;
                       cbBmiSrc : DWord;
                       offBitsSrc : DWord;
                       cbBitsSrc : DWord;
                       xMask : LongInt;
                       yMask : LongInt;
                       iUsageMask : DWord;
                       offBmiMask : DWord;
                       cbBmiMask : DWord;
                       offBitsMask : DWord;
                       cbBitsMask : DWord;
                     END {tagEMRMASKBLT};
EMRMASKBLT   = tagEMRMASKBLT;
TEMRMASKBLT  = tagEMRMASKBLT;
PEMRMASKBLT  = ^tagEMRMASKBLT;
LPEMRMASKBLT = ^tagEMRMASKBLT;

TYPE tagEMRMODIFYWORLDTRANSFORM = RECORD
                                    emr : EMR;
                                    xform : XFORM;
                                    iMode : DWord;
                                  END {tagEMRMODIFYWORLDTRANSFORM};
EMRMODIFYWORLDTRANSFORM   = tagEMRMODIFYWORLDTRANSFORM;
TEMRMODIFYWORLDTRANSFORM  = tagEMRMODIFYWORLDTRANSFORM;
PEMRMODIFYWORLDTRANSFORM  = ^tagEMRMODIFYWORLDTRANSFORM;
LPEMRMODIFYWORLDTRANSFORM = ^tagEMRMODIFYWORLDTRANSFORM;

TYPE tagEMROFFSETCLIPRGN = RECORD
                             emr : EMR;
                             ptlOffset : POINTL;
                           END {tagEMROFFSETCLIPRGN};
EMROFFSETCLIPRGN   = tagEMROFFSETCLIPRGN;
TEMROFFSETCLIPRGN  = tagEMROFFSETCLIPRGN;
PEMROFFSETCLIPRGN  = ^tagEMROFFSETCLIPRGN;
LPEMROFFSETCLIPRGN = ^tagEMROFFSETCLIPRGN;

TYPE tagEMRPLGBLT = RECORD
                      emr : EMR;
                      rclBounds : RECTL;
                      aptlDest : ARRAY [0..2] OF POINTL;
                      xSrc : LongInt;
                      ySrc : LongInt;
                      cxSrc : LongInt;
                      cySrc : LongInt;
                      xformSrc : XFORM;
                      crBkColorSrc : TColorRef;
                      iUsageSrc : DWord;
                      offBmiSrc : DWord;
                      cbBmiSrc : DWord;
                      offBitsSrc : DWord;
                      cbBitsSrc : DWord;
                      xMask : LongInt;
                      yMask : LongInt;
                      iUsageMask : DWord;
                      offBmiMask : DWord;
                      cbBmiMask : DWord;
                      offBitsMask : DWord;
                      cbBitsMask : DWord;
                    END {tagEMRPLGBLT};
EMRPLGBLT   = tagEMRPLGBLT;
TEMRPLGBLT  = tagEMRPLGBLT;
PEMRPLGBLT  = ^tagEMRPLGBLT;
LPEMRPLGBLT = ^tagEMRPLGBLT;

TYPE tagEMRPOLYDRAW = RECORD
                        emr : EMR;
                        rclBounds : RECTL;
                        cptl : DWord;
                        aptl : ARRAY [0..0] OF POINTL;
                        abTypes : ARRAY [0..0] OF BYTE;
                      END {tagEMRPOLYDRAW};
EMRPOLYDRAW   = tagEMRPOLYDRAW;
TEMRPOLYDRAW  = tagEMRPOLYDRAW;
PEMRPOLYDRAW  = ^tagEMRPOLYDRAW;
LPEMRPOLYDRAW = ^tagEMRPOLYDRAW;

TYPE tagEMRPOLYDRAW16 = RECORD
                          emr : EMR;
                          rclBounds : RECTL;
                          cpts : DWord;
                          apts : ARRAY [0..0] OF POINTS;
                          abTypes : ARRAY [0..0] OF BYTE;
                        END {tagEMRPOLYDRAW16};
EMRPOLYDRAW16   = tagEMRPOLYDRAW16;
TEMRPOLYDRAW16  = tagEMRPOLYDRAW16;
PEMRPOLYDRAW16  = ^tagEMRPOLYDRAW16;
LPEMRPOLYDRAW16 = ^tagEMRPOLYDRAW16;


TYPE tagEMRPOLYLINE = RECORD
                        emr : EMR;
                        rclBounds : RECTL;
                        cptl : DWord;
                        aptl : ARRAY [0..0] OF POINTL;
                      END {tagEMRPOLYLINE};
EMRPOLYLINE   = tagEMRPOLYLINE;
TEMRPOLYLINE  = tagEMRPOLYLINE;
PEMRPOLYLINE  = ^tagEMRPOLYLINE;
LPEMRPOLYLINE = ^tagEMRPOLYLINE;
EMRPOLYBEZIER = tagEMRPOLYLINE;
PEMRPOLYBEZIER = ^tagEMRPOLYLINE;
EMRPOLYGON = tagEMRPOLYLINE;
PEMRPOLYGON = ^tagEMRPOLYLINE;
EMRPOLYBEZIERTO = tagEMRPOLYLINE;
PEMRPOLYBEZIERTO = ^tagEMRPOLYLINE;
EMRPOLYLINETO = tagEMRPOLYLINE;
PEMRPOLYLINETO = ^tagEMRPOLYLINE;


TYPE tagEMRPOLYLINE16 = RECORD
                          emr : EMR;
                          rclBounds : RECTL;
                          cpts : DWord;
                          apts : ARRAY [0..0] OF POINTL;
                        END {tagEMRPOLYLINE16};
TYPE EMRPOLYLINE16   = tagEMRPOLYLINE16;
TYPE TEMRPOLYLINE16  = tagEMRPOLYLINE16;
TYPE PEMRPOLYLINE16  = ^tagEMRPOLYLINE16;
TYPE LPEMRPOLYLINE16 = ^tagEMRPOLYLINE16;
TYPE EMRPOLYBEZIER16 = tagEMRPOLYLINE16;
TYPE PEMRPOLYBEZIER16 = ^tagEMRPOLYLINE16;
TYPE EMRPOLYGON16 = tagEMRPOLYLINE16;
TYPE PEMRPOLYGON16 = ^tagEMRPOLYLINE16;
TYPE EMRPOLYBEZIERTO16 = tagEMRPOLYLINE16;
TYPE PEMRPOLYBEZIERTO16 = ^tagEMRPOLYLINE16;
TYPE EMRPOLYLINETO16 = tagEMRPOLYLINE16;
TYPE PEMRPOLYLINETO16 = ^tagEMRPOLYLINE16;


TYPE tagEMRPOLYPOLYLINE = RECORD
                            emr : EMR;
                            rclBounds : RECTL;
                            nPolys : DWord;
                            cptl : DWord;
                            aPolyCounts : ARRAY [0..0] OF DWord;
                            aptl : ARRAY [0..0] OF POINTL;
                          END {tagEMRPOLYPOLYLINE};
TYPE EMRPOLYPOLYLINE   = tagEMRPOLYPOLYLINE;
TYPE TEMRPOLYPOLYLINE  = tagEMRPOLYPOLYLINE;
TYPE PEMRPOLYPOLYLINE  = ^tagEMRPOLYPOLYLINE;
TYPE LPEMRPOLYPOLYLINE = ^tagEMRPOLYPOLYLINE;
TYPE EMRPOLYPOLYGON = tagEMRPOLYPOLYLINE;
TYPE PEMRPOLYPOLYGON = ^tagEMRPOLYPOLYLINE;


TYPE tagEMRPOLYPOLYLINE16 = RECORD
                              emr : EMR;
                              rclBounds : RECTL;
                              nPolys : DWord;
                              cpts : DWord;
                              aPolyCounts : ARRAY [0..0] OF DWord;
                              apts : ARRAY [0..0] OF POINTS;
                            END {tagEMRPOLYPOLYLINE16};
EMRPOLYPOLYLINE16   = tagEMRPOLYPOLYLINE16;
TEMRPOLYPOLYLINE16  = tagEMRPOLYPOLYLINE16;
PEMRPOLYPOLYLINE16  = ^tagEMRPOLYPOLYLINE16;
LPEMRPOLYPOLYLINE16 = ^tagEMRPOLYPOLYLINE16;
EMRPOLYPOLYGON16 = tagEMRPOLYPOLYLINE16;
PEMRPOLYPOLYGON16 = ^tagEMRPOLYPOLYLINE16;


TYPE tagEMRPOLYTEXTOUTA = RECORD
                            emr : EMR;
                            rclBounds : RECTL;
                            iGraphicsMode : DWord;
                            exScale : Single;
                            eyScale : Single;
                            cStrings : LongInt;
                            aemrtext : ARRAY [0..0] OF EMRTEXT;
                          END {tagEMRPOLYTEXTOUTA};
EMRPOLYTEXTOUTA   = tagEMRPOLYTEXTOUTA;
TEMRPOLYTEXTOUTA  = tagEMRPOLYTEXTOUTA;
PEMRPOLYTEXTOUTA  = ^tagEMRPOLYTEXTOUTA;
LPEMRPOLYTEXTOUTA = ^tagEMRPOLYTEXTOUTA;
EMRPOLYTEXTOUTW   = tagEMRPOLYTEXTOUTA;
PEMRPOLYTEXTOUTW  = ^tagEMRPOLYTEXTOUTA;


TYPE tagEMRRESIZEPALETTE = RECORD
                             emr : EMR;
                             ihPal : DWord;
                             cEntries : DWord;
                           END {tagEMRRESIZEPALETTE};
EMRRESIZEPALETTE   = tagEMRRESIZEPALETTE;
TEMRRESIZEPALETTE  = tagEMRRESIZEPALETTE;
PEMRRESIZEPALETTE  = ^tagEMRRESIZEPALETTE;
LPEMRRESIZEPALETTE = ^tagEMRRESIZEPALETTE;


TYPE tagEMRRESTOREDC = RECORD
                         emr : EMR;
                         iRelative : LongInt;
                       END {tagEMRRESTOREDC};
EMRRESTOREDC   = tagEMRRESTOREDC;
TEMRRESTOREDC  = tagEMRRESTOREDC;
PEMRRESTOREDC  = ^tagEMRRESTOREDC;
LPEMRRESTOREDC = ^tagEMRRESTOREDC;


TYPE tagEMRROUNDRECT = RECORD
                         emr : EMR;
                         rclBox : RECTL;
                         szlCorner : SIZEL;
                       END {tagEMRROUNDRECT};
EMRROUNDRECT   = tagEMRROUNDRECT;
TEMRROUNDRECT  = tagEMRROUNDRECT;
PEMRROUNDRECT  = ^tagEMRROUNDRECT;
LPEMRROUNDRECT = ^tagEMRROUNDRECT;


TYPE tagEMRSCALEVIEWPORTEXTEX = RECORD
                                  emr : EMR;
                                  xNum : LongInt;
                                  xDenom : LongInt;
                                  yNum : LongInt;
                                  yDenom : LongInt;
                                END {tagEMRSCALEVIEWPORTEXTEX};
TYPE EMRSCALEVIEWPORTEXTEX   = tagEMRSCALEVIEWPORTEXTEX;
TYPE TEMRSCALEVIEWPORTEXTEX  = tagEMRSCALEVIEWPORTEXTEX;
TYPE PEMRSCALEVIEWPORTEXTEX  = ^tagEMRSCALEVIEWPORTEXTEX;
TYPE LPEMRSCALEVIEWPORTEXTEX = ^tagEMRSCALEVIEWPORTEXTEX;
TYPE EMRSCALEWINDOWEXTEX  = tagEMRSCALEVIEWPORTEXTEX;
TYPE PEMRSCALEWINDOWEXTEX  = ^tagEMRSCALEVIEWPORTEXTEX;


TYPE tagEMRSELECTCOLORSPACE = RECORD
                                emr : EMR;
                                ihCS : DWord;
                              END {tagEMRSELECTCOLORSPACE};
EMRSELECTCOLORSPACE   = tagEMRSELECTCOLORSPACE;
TEMRSELECTCOLORSPACE  = tagEMRSELECTCOLORSPACE;
PEMRSELECTCOLORSPACE  = ^tagEMRSELECTCOLORSPACE;
LPEMRSELECTCOLORSPACE = ^tagEMRSELECTCOLORSPACE;
EMRDELETECOLORSPACE  = tagEMRSELECTCOLORSPACE;
PEMRDELETECOLORSPACE  = ^tagEMRSELECTCOLORSPACE;

TYPE tagEMRSELECTOBJECT = RECORD
                            emr : EMR;
                            ihObject : DWord;
                          END {tagEMRSELECTOBJECT};
EMRSELECTOBJECT   = tagEMRSELECTOBJECT;
TEMRSELECTOBJECT  = tagEMRSELECTOBJECT;
PEMRSELECTOBJECT  = ^tagEMRSELECTOBJECT;
LPEMRSELECTOBJECT = ^tagEMRSELECTOBJECT;
EMRDELETEOBJECT  = tagEMRSELECTOBJECT;
PEMRDELETEOBJECT  = ^tagEMRSELECTOBJECT;


TYPE tagEMRSELECTPALETTE = RECORD
                             emr : EMR;
                             ihPal : DWord;
                           END {tagEMRSELECTPALETTE};
EMRSELECTPALETTE   = tagEMRSELECTPALETTE;
TEMRSELECTPALETTE  = tagEMRSELECTPALETTE;
PEMRSELECTPALETTE  = ^tagEMRSELECTPALETTE;
LPEMRSELECTPALETTE = ^tagEMRSELECTPALETTE;


TYPE tagEMRSETARCDIRECTION = RECORD
                               emr : EMR;
                               iArcDirection : DWord;
                             END {tagEMRSETARCDIRECTION};
EMRSETARCDIRECTION   = tagEMRSETARCDIRECTION;
TEMRSETARCDIRECTION  = tagEMRSETARCDIRECTION;
PEMRSETARCDIRECTION  = ^tagEMRSETARCDIRECTION;
LPEMRSETARCDIRECTION = ^tagEMRSETARCDIRECTION;


TYPE tagEMRSETTEXTCOLOR = RECORD
                            emr : EMR;
                            crColor : TColorRef;
                          END {tagEMRSETTEXTCOLOR};
TYPE EMRSETTEXTCOLOR   = tagEMRSETTEXTCOLOR;
TYPE TEMRSETTEXTCOLOR  = tagEMRSETTEXTCOLOR;
TYPE PEMRSETTEXTCOLOR  = ^tagEMRSETTEXTCOLOR;
TYPE LPEMRSETTEXTCOLOR = ^tagEMRSETTEXTCOLOR;
TYPE EMRSETBKCOLOR  = tagEMRSETTEXTCOLOR;
TYPE PEMRSETBKCOLOR  = ^tagEMRSETTEXTCOLOR;


TYPE tagEMRSETCOLORADJUSTMENT = RECORD
                                  emr : EMR;
                                  ColorAdjustment : COLORADJUSTMENT;
                                END {tagEMRSETCOLORADJUSTMENT};
EMRSETCOLORADJUSTMENT   = tagEMRSETCOLORADJUSTMENT;
TEMRSETCOLORADJUSTMENT  = tagEMRSETCOLORADJUSTMENT;
PEMRSETCOLORADJUSTMENT  = ^tagEMRSETCOLORADJUSTMENT;
LPEMRSETCOLORADJUSTMENT = ^tagEMRSETCOLORADJUSTMENT;


TYPE tagEMRSETDIBITSTODEVICE = RECORD
                                 emr : EMR;
                                 rclBounds : RECTL;
                                 xDest : LongInt;
                                 yDest : LongInt;
                                 xSrc : LongInt;
                                 ySrc : LongInt;
                                 cxSrc : LongInt;
                                 cySrc : LongInt;
                                 offBmiSrc : DWord;
                                 cbBmiSrc : DWord;
                                 offBitsSrc : DWord;
                                 cbBitsSrc : DWord;
                                 iUsageSrc : DWord;
                                 iStartScan : DWord;
                                 cScans : DWord;
                               END {tagEMRSETDIBITSTODEVICE};
TYPE EMRSETDIBITSTODEVICE   = tagEMRSETDIBITSTODEVICE;
TYPE TEMRSETDIBITSTODEVICE  = tagEMRSETDIBITSTODEVICE;
TYPE PEMRSETDIBITSTODEVICE  = ^tagEMRSETDIBITSTODEVICE;
TYPE LPEMRSETDIBITSTODEVICE = ^tagEMRSETDIBITSTODEVICE;


TYPE tagEMRSETMAPPERFLAGS = RECORD
                              emr : EMR;
                              dwFlags : DWord;
                            END {tagEMRSETMAPPERFLAGS};
EMRSETMAPPERFLAGS   = tagEMRSETMAPPERFLAGS;
TEMRSETMAPPERFLAGS  = tagEMRSETMAPPERFLAGS;
PEMRSETMAPPERFLAGS  = ^tagEMRSETMAPPERFLAGS;
LPEMRSETMAPPERFLAGS = ^tagEMRSETMAPPERFLAGS;


TYPE tagEMRSETMITERLIMIT = RECORD
                             emr : EMR;
                             eMiterLimit : Single;
                           END {tagEMRSETMITERLIMIT};
EMRSETMITERLIMIT   = tagEMRSETMITERLIMIT;
TEMRSETMITERLIMIT  = tagEMRSETMITERLIMIT;
PEMRSETMITERLIMIT  = ^tagEMRSETMITERLIMIT;
LPEMRSETMITERLIMIT = ^tagEMRSETMITERLIMIT;


TYPE tagEMRSETPALETTEENTRIES = RECORD
                                 emr : EMR;
                                 ihPal : DWord;
                                 iStart : DWord;
                                 cEntries : DWord;
                                 aPalEntries : ARRAY [0..0] OF PALETTEENTRY;
                               END {tagEMRSETPALETTEENTRIES};
EMRSETPALETTEENTRIES   = tagEMRSETPALETTEENTRIES;
TEMRSETPALETTEENTRIES  = tagEMRSETPALETTEENTRIES;
PEMRSETPALETTEENTRIES  = ^tagEMRSETPALETTEENTRIES;
LPEMRSETPALETTEENTRIES = ^tagEMRSETPALETTEENTRIES;


TYPE tagEMRSETPIXELV = RECORD
                         emr : EMR;
                         ptlPixel : POINTL;
                         crColor : TColorRef;
                       END {tagEMRSETPIXELV};
EMRSETPIXELV   = tagEMRSETPIXELV;
TEMRSETPIXELV  = tagEMRSETPIXELV;
PEMRSETPIXELV  = ^tagEMRSETPIXELV;
LPEMRSETPIXELV = ^tagEMRSETPIXELV;


TYPE tagEMRSETVIEWPORTEXTEX = RECORD
                                emr : EMR;
                                szlExtent : SIZEL;
                              END {tagEMRSETVIEWPORTEXTEX};
EMRSETVIEWPORTEXTEX   = tagEMRSETVIEWPORTEXTEX;
TEMRSETVIEWPORTEXTEX  = tagEMRSETVIEWPORTEXTEX;
PEMRSETVIEWPORTEXTEX  = ^tagEMRSETVIEWPORTEXTEX;
EMRSETWINDOWEXTEX  = tagEMRSETVIEWPORTEXTEX;
PEMRSETWINDOWEXTEX  = ^tagEMRSETVIEWPORTEXTEX;


TYPE tagEMRSETVIEWPORTORGEX = RECORD
                                emr : EMR;
                                ptlOrigin : POINTL;
                              END {tagEMRSETVIEWPORTORGEX};
TYPE EMRSETVIEWPORTORGEX   = tagEMRSETVIEWPORTORGEX;
TYPE TEMRSETVIEWPORTORGEX  = tagEMRSETVIEWPORTORGEX;
TYPE PEMRSETVIEWPORTORGEX = ^tagEMRSETVIEWPORTORGEX;
TYPE EMRSETWINDOWORGEX = tagEMRSETVIEWPORTORGEX;
TYPE EMRSETBRUSHORGEX = tagEMRSETVIEWPORTORGEX;
TYPE PEMRSETWINDOWORGEX = ^tagEMRSETVIEWPORTORGEX;
TYPE PEMRSETBRUSHORGEX = ^tagEMRSETVIEWPORTORGEX;


TYPE tagEMRSETWORLDTRANSFORM = RECORD
                                 emr : EMR;
                                 xform : XFORM;
                               END {tagEMRSETWORLDTRANSFORM};
TYPE EMRSETWORLDTRANSFORM   = tagEMRSETWORLDTRANSFORM;
TYPE TEMRSETWORLDTRANSFORM  = tagEMRSETWORLDTRANSFORM;
TYPE PEMRSETWORLDTRANSFORM  = ^tagEMRSETWORLDTRANSFORM;
TYPE LPEMRSETWORLDTRANSFORM = ^tagEMRSETWORLDTRANSFORM;


TYPE tagEMRSTRETCHBLT = RECORD
                          emr : EMR;
                          rclBounds : RECTL;
                          xDest : LongInt;
                          yDest : LongInt;
                          cxDest : LongInt;
                          cyDest : LongInt;
                          dwRop : DWord;
                          xSrc : LongInt;
                          ySrc : LongInt;
                          xformSrc : XFORM;
                          crBkColorSrc : TColorRef;
                          iUsageSrc : DWord;
                          offBmiSrc : DWord;
                          cbBmiSrc : DWord;
                          offBitsSrc : DWord;
                          cbBitsSrc : DWord;
                          cxSrc : LongInt;
                          cySrc : LongInt;
                        END {tagEMRSTRETCHBLT};
EMRSTRETCHBLT   = tagEMRSTRETCHBLT;
TEMRSTRETCHBLT  = tagEMRSTRETCHBLT;
PEMRSTRETCHBLT  = ^tagEMRSTRETCHBLT;
LPEMRSTRETCHBLT = ^tagEMRSTRETCHBLT;


TYPE tagEMRSTRETCHDIBITS = RECORD
                             emr : EMR;
                             rclBounds : RECTL;
                             xDest : LongInt;
                             yDest : LongInt;
                             xSrc : LongInt;
                             ySrc : LongInt;
                             cxSrc : LongInt;
                             cySrc : LongInt;
                             offBmiSrc : DWord;
                             cbBmiSrc : DWord;
                             offBitsSrc : DWord;
                             cbBitsSrc : DWord;
                             iUsageSrc : DWord;
                             dwRop : DWord;
                             cxDest : LongInt;
                             cyDest : LongInt;
                           END {tagEMRSTRETCHDIBITS};
TYPE EMRSTRETCHDIBITS   = tagEMRSTRETCHDIBITS;
TYPE TEMRSTRETCHDIBITS  = tagEMRSTRETCHDIBITS;
TYPE PEMRSTRETCHDIBITS  = ^tagEMRSTRETCHDIBITS;
TYPE LPEMRSTRETCHDIBITS = ^tagEMRSTRETCHDIBITS;


TYPE tagABORTPATH = RECORD
                      emr : EMR;
                    END {tagABORTPATH};
TABORTPATH  = tagABORTPATH;
PABORTPATH  = ^tagABORTPATH;
LPABORTPATH = ^tagABORTPATH;


TYPE tagEMRSELECTCLIPPATH = RECORD
                              emr : EMR;
                              iMode : DWord;
                            END {tagEMRSELECTCLIPPATH};
EMRSELECTCLIPPATH   = tagEMRSELECTCLIPPATH;
TEMRSELECTCLIPPATH  = tagEMRSELECTCLIPPATH;
PEMRSELECTCLIPPATH  = ^tagEMRSELECTCLIPPATH;
LPEMRSELECTCLIPPATH = ^tagEMRSELECTCLIPPATH;


TYPE tagNMHDR = RECORD
                  hwndFrom : HWND;
                  idFrom : UINT;
                  code : UINT;
                END {tagNMHDR};
NMHDR   = tagNMHDR;
TNMHDR  = tagNMHDR;
PNMHDR  = ^tagNMHDR;

TYPE _encorrecttext = RECORD
                        nmhdr : NMHDR;
                        chrg : CHARRANGE;
                        seltyp : Word;
                      END {  encorrecttext};
encorrecttext   = _encorrecttext;
Tencorrecttext  = _encorrecttext;
Pencorrecttext  = ^_encorrecttext;


TYPE _endropfiles = RECORD
                      nmhdr : NMHDR;
                      hDrop : THandle;
                      cp : LongInt;
                      fProtected : WINBOOL;
                    END {  endropfiles};
endropfiles   = _endropfiles;
Tendropfiles  = _endropfiles;
Pendropfiles  = ^_endropfiles;

TYPE ENSAVECLIPBOARD = RECORD
             nmhdr : NMHDR;
             cObjectCount : LongInt;
             cch : LongInt;
           END {  18};
TENSAVECLIPBOARD  = ENSAVECLIPBOARD;
PENSAVECLIPBOARD  = ^ENSAVECLIPBOARD;

TYPE ENOLEOPFAILED = RECORD
             nmhdr : NMHDR;
             iob : LongInt;
             lOper : LongInt;
             hr : HRESULT;
           END {ENOLEOPFAILED};
TENOLEOPFAILED  = ENOLEOPFAILED;
PENOLEOPFAILED  = ^ENOLEOPFAILED;

TYPE tagENHMETAHEADER = RECORD
                          iType : DWord;
                          nSize : DWord;
                          rclBounds : RECTL;
                          rclFrame : RECTL;
                          dSignature : DWord;
                          nVersion : DWord;
                          nBytes : DWord;
                          nRecords : DWord;
                          nHandles : Word;
                          sReserved : Word;
                          nDescription : DWord;
                          offDescription : DWord;
                          nPalEntries : DWord;
                          szlDevice : SIZEL;
                          szlMillimeters : SIZEL;
                        END {tagENHMETAHEADER};
ENHMETAHEADER   = tagENHMETAHEADER;
TENHMETAHEADER  = tagENHMETAHEADER;
PENHMETAHEADER  = ^tagENHMETAHEADER;
LPENHMETAHEADER = ^tagENHMETAHEADER;


TYPE tagENHMETARECORD = RECORD
                          iType : DWord;
                          nSize : DWord;
                          dParm : ARRAY [0..0] OF DWord;
                        END {tagENHMETARECORD};
ENHMETARECORD   = tagENHMETARECORD;
TENHMETARECORD  = tagENHMETARECORD;
PENHMETARECORD  = ^tagENHMETARECORD;
LPENHMETARECORD = ^tagENHMETARECORD;


TYPE _enprotected = RECORD
                      nmhdr : NMHDR;
                      msg : Word;
                      wParam : UINT;
                      lParam : LPARAM32;
                      chrg : CHARRANGE;
                    END {  enprotected};
enprotected   = _enprotected;
Tenprotected  = _enprotected;
Penprotected  = ^_enprotected;

TYPE _SERVICE_STATUS = RECORD
                         dwServiceType : DWord;
                         dwCurrentState : DWord;
                         dwControlsAccepted : DWord;
                         dwWin32ExitCode : DWord;
                         dwServiceSpecificExitCode : DWord;
                         dwCheckPoint : DWord;
                         dwWaitHint : DWord;
                       END {  SERVICE_STATUS};
SERVICE_STATUS   = _SERVICE_STATUS;
TSERVICE_STATUS  = _SERVICE_STATUS;
PSERVICE_STATUS  = ^_SERVICE_STATUS;
LPSERVICE_STATUS = ^_SERVICE_STATUS;


TYPE _ENUM_SERVICE_STATUS = RECORD
                              lpServiceName : PTSTR;
                              lpDisplayName : PTSTR;
                              ServiceStatus : SERVICE_STATUS;
                            END {  ENUM_SERVICE_STATUS};
ENUM_SERVICE_STATUS   = _ENUM_SERVICE_STATUS;
TENUM_SERVICE_STATUS  = _ENUM_SERVICE_STATUS;
PENUM_SERVICE_STATUS  = ^_ENUM_SERVICE_STATUS;
LPENUM_SERVICE_STATUS = ^_ENUM_SERVICE_STATUS;


TYPE tagENUMLOGFONT = RECORD
                        elfLogFont : LOGFONT;
                        elfFullName : ARRAY [0..LF_FULLFACESIZE - 1] OF BCHAR;
                        elfStyle : ARRAY [0..LF_FACESIZE - 1] OF BCHAR;
                      END {tagENUMLOGFONT};
ENUMLOGFONT   = tagENUMLOGFONT;
TENUMLOGFONT  = tagENUMLOGFONT;
PENUMLOGFONT  = ^tagENUMLOGFONT;

TYPE tagENUMLOGFONTEX = RECORD
                          elfLogFont : LOGFONT;
                          elfFullName : ARRAY [0..LF_FULLFACESIZE - 1] OF BCHAR;
                          elfStyle : ARRAY [0..LF_FACESIZE - 1] OF BCHAR;
                          elfScript : ARRAY [0..LF_FACESIZE - 1] OF BCHAR;
                        END {tagENUMLOGFONTEX};
ENUMLOGFONTEX   = tagENUMLOGFONTEX;
TENUMLOGFONTEX  = tagENUMLOGFONTEX;
PENUMLOGFONTEX  = ^tagENUMLOGFONTEX;

TYPE _EVENTLOGRECORD = RECORD
                         Length : DWord;
                         Reserved : DWord;
                         RecordNumber : DWord;
                         TimeGenerated : DWord;
                         TimeWritten : DWord;
                         EventID : DWord;
                         EventType : Word;
                         NumStrings : Word;
                         EventCategory : Word;
                         ReservedFlags : Word;
                         ClosingRecordNumber : DWord;
                         StringOffset : DWord;
                         UserSidLength : DWord;
                         UserSidOffset : DWord;
                         DataLength : DWord;
                         DataOffset : DWord;
{+// }
{-Then follow: }

{-TCHAR SourceName[] }
{-TCHAR Computername[] }
{-SID UserSid }
{-TCHAR Strings[] }
{-BYTE Data[] }
{-CHAR Pad[] }
{-DWord Length; }
{= }

                       END {  EVENTLOGRECORD};
EVENTLOGRECORD   = _EVENTLOGRECORD;
TEVENTLOGRECORD  = _EVENTLOGRECORD;
PEVENTLOGRECORD  = ^_EVENTLOGRECORD;

TYPE tagEVENTMSG = RECORD
                     message : Word;
                     paramL : Word;
                     paramH : Word;
                     time : DWord;
                     hwnd : HWND;
                   END {tagEVENTMSG};
EVENTMSG   = tagEVENTMSG;
TEVENTMSG  = tagEVENTMSG;
PEVENTMSG  = ^tagEVENTMSG;

TYPE _EXCEPTION_POINTERS = RECORD
                             ExceptionRecord : PEXCEPTION_RECORD;
                             ContextRecord : PCONTEXT;
                           END {  EXCEPTION_POINTERS};
EXCEPTION_POINTERS   = _EXCEPTION_POINTERS;
TEXCEPTION_POINTERS  = _EXCEPTION_POINTERS;
PEXCEPTION_POINTERS  = ^_EXCEPTION_POINTERS;
LPEXCEPTION_POINTERS = ^_EXCEPTION_POINTERS;


TYPE _EXT_BUTTON = RECORD
                     idCommand : Word;
                     idsHelp : Word;
                     fsStyle : Word;
                   END {  EXT_BUTTON};
EXT_BUTTON   = _EXT_BUTTON;
TEXT_BUTTON  = _EXT_BUTTON;
PEXT_BUTTON  = ^_EXT_BUTTON;
LPEXT_BUTTON = ^_EXT_BUTTON;


TYPE tagFILTERKEYS = RECORD
                       cbSize : Word;
                       dwFlags : DWord;
                       iWaitMSec : DWord;
                       iDelayMSec : DWord;
                       iRepeatMSec : DWord;
                       iBounceMSec : DWord;
                     END {tagFILTERKEYS};
FILTERKEYS   = tagFILTERKEYS;
TFILTERKEYS  = tagFILTERKEYS;
PFILTERKEYS  = ^tagFILTERKEYS;

TYPE _FIND_NAME_BUFFER = RECORD
                           length : Byte;
                           access_control : Byte;
                           frame_control : Byte;
                           destination_addr : ARRAY [0..5] OF Byte;
                           source_addr : ARRAY [0..5] OF Byte;
                           routing_info : ARRAY [0..17] OF Byte;
                         END {  FIND_NAME_BUFFER};
FIND_NAME_BUFFER   = _FIND_NAME_BUFFER;
TFIND_NAME_BUFFER  = _FIND_NAME_BUFFER;
PFIND_NAME_BUFFER  = ^_FIND_NAME_BUFFER;

TYPE _FIND_NAME_HEADER = RECORD
                           node_count : Word;
                           reserved : Byte;
                           unique_group : Byte;
                         END {  FIND_NAME_HEADER};
FIND_NAME_HEADER   = _FIND_NAME_HEADER;
TFIND_NAME_HEADER  = _FIND_NAME_HEADER;
PFIND_NAME_HEADER  = ^_FIND_NAME_HEADER;

TYPE _FINDREPLACE = RECORD
             lStructSize : DWord;
             hwndOwner : HWND;
             hInstance : THANDLE;
             Flags : DWord;
             lpstrFindWhat : PTSTR;
             lpstrReplaceWith : PTSTR;
             wFindWhatLen : Word;
             wReplaceWithLen : Word;
             lCustData : LPARAM32;
             lpfnHook : PFRHOOKPROC;
             lpTemplateName : LPCTSTR;
           END {  FINDREPLACE};
TYPE FINDREPLACE  = _FINDREPLACE;
TYPE TFINDREPLACE  = _FINDREPLACE;
TYPE PFINDREPLACE  = ^FINDREPLACE;
TYPE LPFINDREPLACE = ^FINDREPLACE;

TYPE _findtext = RECORD
                   chrg : CHARRANGE;
                   lpstrText : PChar;
                 END {  findtext};
Tfindtext  = _findtext;
Pfindtext  = ^_findtext;

TYPE _findtextex = RECORD
                     chrg : CHARRANGE;
                     lpstrText : PChar;
                     chrgText : CHARRANGE;
                   END {  findtextex};
findtextex   = _findtextex;
Tfindtextex  = _findtextex;
Pfindtextex  = ^_findtextex;

TYPE _FMS_GETDRIVEINFO = RECORD
                           dwTotalSpace : DWord;
                           dwFreeSpace : DWord;
                           szPath : ARRAY [0..259] OF TCHAR;
                           szVolume : ARRAY [0..13] OF TCHAR;
                           szShare : ARRAY [0..127] OF TCHAR;
                         END {  FMS_GETDRIVEINFO};
FMS_GETDRIVEINFO   = _FMS_GETDRIVEINFO;
TFMS_GETDRIVEINFO  = _FMS_GETDRIVEINFO;
PFMS_GETDRIVEINFO  = ^_FMS_GETDRIVEINFO;

TYPE _FMS_GETFILESEL = RECORD
                         ftTime : FILETIME;
                         dwSize : DWord;
                         bAttr : BYTE;
                         szName : ARRAY [0..259] OF TCHAR;
                       END {  FMS_GETFILESEL};
FMS_GETFILESEL   = _FMS_GETFILESEL;
TFMS_GETFILESEL  = _FMS_GETFILESEL;
PFMS_GETFILESEL  = ^_FMS_GETFILESEL;

TYPE _FMS_LOAD = RECORD
                   dwSize : DWord;
                   szMenuName : ARRAY [0..MENU_TEXT_LEN - 1] OF TCHAR;
                   hMenu : HMENU;
                   wMenuDelta : Word;
                 END {  FMS_LOAD};
FMS_LOAD   = _FMS_LOAD;
TFMS_LOAD  = _FMS_LOAD;
PFMS_LOAD  = ^_FMS_LOAD;

TYPE _FMS_TOOLBARLOAD = RECORD
                          dwSize : DWord;
                          lpButtons : PEXT_BUTTON;
                          cButtons : Word;
                          cBitmaps : Word;
                          idBitmap : Word;
                          hBitmap : HBITMAP;
                        END {  FMS_TOOLBARLOAD};
FMS_TOOLBARLOAD   = _FMS_TOOLBARLOAD;
TFMS_TOOLBARLOAD  = _FMS_TOOLBARLOAD;
PFMS_TOOLBARLOAD  = ^_FMS_TOOLBARLOAD;

TYPE _FOCUS_EVENT_RECORD = RECORD
                             bSetFocus : WINBOOL;
                           END {  FOCUS_EVENT_RECORD};
FOCUS_EVENT_RECORD   = _FOCUS_EVENT_RECORD;
TFOCUS_EVENT_RECORD  = _FOCUS_EVENT_RECORD;
PFOCUS_EVENT_RECORD  = ^_FOCUS_EVENT_RECORD;

TYPE _FORM_INFO_1 = RECORD
                      Flags : DWord;
                      pName : PTSTR;
                      Size : SIZEL;
                      ImageableArea : RECTL;
                    END {  FORM_INFO_1};
FORM_INFO_1   = _FORM_INFO_1;
TFORM_INFO_1  = _FORM_INFO_1;
PFORM_INFO_1  = ^_FORM_INFO_1;

TYPE _FORMAT_PARAMETERS = RECORD
                            MediaType : MEDIA_TYPE;
                            StartCylinderNumber : DWord;
                            EndCylinderNumber : DWord;
                            StartHeadNumber : DWord;
                            EndHeadNumber : DWord;
                          END {  FORMAT_PARAMETERS};
FORMAT_PARAMETERS   = _FORMAT_PARAMETERS;
TFORMAT_PARAMETERS  = _FORMAT_PARAMETERS;
PFORMAT_PARAMETERS  = ^_FORMAT_PARAMETERS;

TYPE _formatrange = RECORD
                      hdc : HDC;
                      hdcTarget : HDC;
                      rc : RECT;
                      rcPage : RECT;
                      chrg : CHARRANGE;
                    END {  formatrange};
formatrange   = _formatrange;
Tformatrange  = _formatrange;
Pformatrange  = ^_formatrange;

TYPE tagGCP_RESULTS = RECORD
                        lStructSize : DWord;
                        lpOutString : PTSTR;
                        lpOrder : PWord;
                        lpDx : PInteger;
                        lpCaretPos : PInteger;
                        lpClass : PTSTR;
                        lpGlyphs : PWord;
                        nGlyphs : Word;
                        nMaxFit : Word;
                      END {tagGCP_RESULTS};
TYPE GCP_RESULTS   = tagGCP_RESULTS;
TYPE TGCP_RESULTS  = tagGCP_RESULTS;
TYPE PGCP_RESULTS  = ^tagGCP_RESULTS;
TYPE LPGCP_RESULTS = ^tagGCP_RESULTS;


TYPE _GENERIC_MAPPING = RECORD
                          GenericRead : ACCESS_MASK;
                          GenericWrite : ACCESS_MASK;
                          GenericExecute : ACCESS_MASK;
                          GenericAll : ACCESS_MASK;
                        END {  GENERIC_MAPPING};
GENERIC_MAPPING   = _GENERIC_MAPPING;
TGENERIC_MAPPING  = _GENERIC_MAPPING;
PGENERIC_MAPPING  = ^_GENERIC_MAPPING;

TYPE _GLYPHMETRICS = RECORD
                       gmBlackBoxX : Word;
                       gmBlackBoxY : Word;
                       gmptGlyphOrigin : POINT;
                       gmCellIncX : SmallInt;
                       gmCellIncY : SmallInt;
                     END {  GLYPHMETRICS};
TYPE GLYPHMETRICS   = _GLYPHMETRICS;
TYPE TGLYPHMETRICS  = _GLYPHMETRICS;
TYPE PGLYPHMETRICS  = ^_GLYPHMETRICS;
TYPE LPGLYPHMETRICS = ^_GLYPHMETRICS;


TYPE tagHANDLETABLE = RECORD
                        objectHandle : ARRAY [0..0] OF HGDIOBJ;
                      END {tagHANDLETABLE};
TYPE HANDLETABLE   = tagHANDLETABLE;
TYPE THANDLETABLE  = tagHANDLETABLE;
TYPE PHANDLETABLE  = ^tagHANDLETABLE;
TYPE LPHANDLETABLE = ^tagHANDLETABLE;


TYPE _HD_HITTESTINFO = RECORD
                         pt : POINT;
                         flags : Word;
                         iItem : Integer;
                       END {  HD_HITTESTINFO};
HD_HITTESTINFO   = _HD_HITTESTINFO;
THD_HITTESTINFO  = _HD_HITTESTINFO;
PHD_HITTESTINFO  = ^_HD_HITTESTINFO;

TYPE _HD_ITEM = RECORD
                  mask : Word;
                  cxy : Integer;
                  pszText : PTSTR;
                  hbm : HBITMAP;
                  cchTextMax : Integer;
                  fmt : Integer;
                  lParam : LPARAM32;
                END {  HD_ITEM};
HD_ITEM   = _HD_ITEM;
THD_ITEM  = _HD_ITEM;
PHD_ITEM  = ^_HD_ITEM;

TYPE _WINDOWPOS = RECORD
                    hwnd : HWND;
                    hwndInsertAfter : HWND;
                    x : Integer;
                    y : Integer;
                    cx : Integer;
                    cy : Integer;
                    flags : Word;
                  END {  WINDOWPOS};
TYPE WINDOWPOS   = _WINDOWPOS;
TYPE TWINDOWPOS  = _WINDOWPOS;
TYPE PWINDOWPOS  = ^_WINDOWPOS;
TYPE LPWINDOWPOS = ^_WINDOWPOS;


TYPE _HD_LAYOUT = RECORD
                    prc : PRECT;
                    pwpos : PWINDOWPOS;
                  END {  HD_LAYOUT};
HD_LAYOUT   = _HD_LAYOUT;
THD_LAYOUT  = _HD_LAYOUT;
PHD_LAYOUT  = ^_HD_LAYOUT;

TYPE _HD_NOTIFY = RECORD
                    hdr : NMHDR;
                    iItem : Integer;
                    iButton : Integer;
                    pitem : PHD_ITEM;
                  END {  HD_NOTIFY};
HD_NOTIFY   = _HD_NOTIFY;
THD_NOTIFY  = _HD_NOTIFY;
PHD_NOTIFY  = ^_HD_NOTIFY;

TYPE tagHELPINFO = RECORD
                     cbSize : Word;
                     iContextType : Integer;
                     iCtrlId : Integer;
                     hItemHandle : THandle;
                     dwContextId : DWord;
                     MousePos : POINT;
                   END {tagHELPINFO};
TYPE HELPINFO   = tagHELPINFO;
TYPE THELPINFO  = tagHELPINFO;
TYPE PHELPINFO  = ^tagHELPINFO;
TYPE LPHELPINFO = ^tagHELPINFO;

TYPE HELPWININFO = RECORD
             wStructSize : Integer;
             x : Integer;
             y : Integer;
             dx : Integer;
             dy : Integer;
             wMax : Integer;
             rgchMember : ARRAY [0..1] OF TCHAR;
           END {HELPWININFO};
TYPE THELPWININFO  = HELPWININFO;
TYPE PHELPWININFO  = ^HELPWININFO;
TYPE LPHELPWININFO = ^HELPWININFO;

TYPE tagHIGHCONTRAST = RECORD
                         cbSize : Word;
                         dwFlags : DWord;
                         lpszDefaultScheme : PTSTR;
                       END {tagHIGHCONTRAST};
TYPE HIGHCONTRAST   = tagHIGHCONTRAST;
TYPE THIGHCONTRAST  = tagHIGHCONTRAST;
TYPE PHIGHCONTRAST  = ^tagHIGHCONTRAST;
TYPE LPHIGHCONTRAST = ^tagHIGHCONTRAST;


TYPE tagHSZPAIR = RECORD
                    hszSvc : HSZ;
                    hszTopic : HSZ;
                  END {tagHSZPAIR};
HSZPAIR   = tagHSZPAIR;
THSZPAIR  = tagHSZPAIR;
PHSZPAIR  = ^tagHSZPAIR;

TYPE _ICONINFO = RECORD
                   fIcon : WINBOOL;
                   xHotspot : DWord;
                   yHotspot : DWord;
                   hbmMask : HBITMAP;
                   hbmColor : HBITMAP;
                 END {  ICONINFO};
ICONINFO   = _ICONINFO;
TICONINFO  = _ICONINFO;
PICONINFO  = ^_ICONINFO;

TYPE tagICONMETRICS = RECORD
                        cbSize : Word;
                        iHorzSpacing : Integer;
                        iVertSpacing : Integer;
                        iTitleWrap : Integer;
                        lfFont : LOGFONT;
                      END {tagICONMETRICS};
TYPE ICONMETRICS   = tagICONMETRICS;
TYPE TICONMETRICS  = tagICONMETRICS;
TYPE PICONMETRICS  = ^tagICONMETRICS;
TYPE LPICONMETRICS = ^tagICONMETRICS;

TYPE _IMAGEINFO = RECORD
                    hbmImage : HBITMAP;
                    hbmMask : HBITMAP;
                    Unused1 : Integer;
                    Unused2 : Integer;
                    rcImage : RECT;
                  END {  IMAGEINFO};
TYPE IMAGEINFO   = _IMAGEINFO;
TYPE TIMAGEINFO  = _IMAGEINFO;
TYPE PIMAGEINFO  = ^_IMAGEINFO;

(*
TYPE _KEY_EVENT_RECORD = PACKED RECORD
                           bKeyDown : WINBOOL;
                           wRepeatCount : Word;
                           wVirtualKeyCode : Word;
                           wVirtualScanCode : Word;
                           pad : Char;
                           {Case Integer of
                            0: (UnicodeChar: WCHAR);
                            1: (AsciiChar: Char);
                           end;}
                           dwControlKeyState : DWORD ;
   END {  KEY_EVENT_RECORD};

TYPE KEY_EVENT_RECORD   = _KEY_EVENT_RECORD;
TYPE TKEY_EVENT_RECORD  = _KEY_EVENT_RECORD;
TYPE PKEY_EVENT_RECORD  = ^_KEY_EVENT_RECORD;
TYPE LPKEY_EVENT_RECORD = ^_KEY_EVENT_RECORD;
{.$ENDIF}


TYPE _MOUSE_EVENT_RECORD = RECORD
                             dwMousePosition : COORD;
                             dwButtonState : DWord;
                             dwControlKeyState : DWord;
                             dwEventFlags : DWord;
                           END {  MOUSE_EVENT_RECORD};
MOUSE_EVENT_RECORD   = _MOUSE_EVENT_RECORD;
TMOUSE_EVENT_RECORD  = _MOUSE_EVENT_RECORD;
PMOUSE_EVENT_RECORD  = ^_MOUSE_EVENT_RECORD;

TYPE _WINDOW_BUFFER_SIZE_RECORD = RECORD
                                    dwSize : COORD;
                                  END {  WINDOW_BUFFER_SIZE_RECORD};
TYPE WINDOW_BUFFER_SIZE_RECORD   = _WINDOW_BUFFER_SIZE_RECORD;
TYPE TWINDOW_BUFFER_SIZE_RECORD  = _WINDOW_BUFFER_SIZE_RECORD;
TYPE PWINDOW_BUFFER_SIZE_RECORD  = ^_WINDOW_BUFFER_SIZE_RECORD;

TYPE _MENU_EVENT_RECORD = RECORD
                            dwCommandId : Word;
                          END {  MENU_EVENT_RECORD};
TYPE MENU_EVENT_RECORD   = _MENU_EVENT_RECORD;
TYPE TMENU_EVENT_RECORD  = _MENU_EVENT_RECORD;
TYPE PMENU_EVENT_RECORD  = ^_MENU_EVENT_RECORD;

TYPE _INPUT_RECORD = RECORD
                    EventType : Word;
                    Event : Record CASE integer OF
                       0 : ( KeyEvent : KEY_EVENT_RECORD );
                       1 : ( MouseEvent : MOUSE_EVENT_RECORD );
                       2 : ( WindowBufferSizeEvent : WINDOW_BUFFER_SIZE_RECORD );
                       3 : ( MenuEvent : MENU_EVENT_RECORD );
                       4 : ( FocusEvent : FOCUS_EVENT_RECORD );
                     END;
                   END
                     {  INPUT_RECORD};
TYPE INPUT_RECORD   = _INPUT_RECORD;
TYPE TINPUTRECORD   = _INPUT_RECORD;
TYPE TINPUT_RECORD  = _INPUT_RECORD;
     PINPUT_RECORD  = ^_INPUT_RECORD;
     PINPUTRECORD  = ^_INPUT_RECORD;
*)
TYPE TSYSTEMTIME = RECORD
                     wYear : Word;
                     wMonth : Word;
                     wDayOfWeek : Word;
                     wDay : Word;
                     wHour : Word;
                     wMinute : Word;
                     wSecond : Word;
                     wMilliseconds : Word;
                   END {TSYSTEMTIME};
SYSTEMTIME   = TSYSTEMTIME;
PSYSTEMTIME  = ^TSYSTEMTIME;
LPSYSTEMTIME = ^TSYSTEMTIME;


TYPE _JOB_INFO_1 = RECORD
                     JobId : DWord;
                     pPrinterName : PTSTR;
                     pMachineName : PTSTR;
                     pUserName : PTSTR;
                     pDocument : PTSTR;
                     pDatatype : PTSTR;
                     pStatus : PTSTR;
                     Status : DWord;
                     Priority : DWord;
                     Position : DWord;
                     TotalPages : DWord;
                     PagesPrinted : DWord;
                     Submitted : SYSTEMTIME;
                   END {  JOB_INFO_1};
TYPE JOB_INFO_1   = _JOB_INFO_1;
TYPE TJOB_INFO_1  = _JOB_INFO_1;
TYPE PJOB_INFO_1  = ^_JOB_INFO_1;

TYPE _SID_IDENTIFIER_AUTHORITY = RECORD
                                   Value : ARRAY [0..5] OF BYTE;
                                 END {  SID_IDENTIFIER_AUTHORITY};
TYPE SID_IDENTIFIER_AUTHORITY   = _SID_IDENTIFIER_AUTHORITY;
TYPE TSID_IDENTIFIER_AUTHORITY  = _SID_IDENTIFIER_AUTHORITY;
TYPE PSID_IDENTIFIER_AUTHORITY  = ^_SID_IDENTIFIER_AUTHORITY;
TYPE LPSID_IDENTIFIER_AUTHORITY = ^_SID_IDENTIFIER_AUTHORITY;


TYPE _SID = RECORD
              Revision : BYTE;
              SubAuthorityCount : BYTE;
              IdentifierAuthority : SID_IDENTIFIER_AUTHORITY;
              SubAuthority : ARRAY [0..ANYSIZE_ARRAY - 1] OF DWord;
            END {  SID};
SID   = _SID;
TSID  = _SID;
PSID  = ^_SID;
LPSID = ^_SID;

SECURITY_DESCRIPTOR_CONTROL = WORD;
TSECURITY_DESCRIPTOR_CONTROL = SECURITY_DESCRIPTOR_CONTROL;
PSECURITY_DESCRIPTOR_CONTROL = ^SECURITY_DESCRIPTOR_CONTROL;

TYPE _SECURITY_DESCRIPTOR = RECORD
                              Revision : BYTE;
                              Sbz1 : BYTE;
                              Control : SECURITY_DESCRIPTOR_CONTROL;
                              Owner : PSID;
                              Group : PSID;
                              Sacl : PACL;
                              Dacl : PACL;
                            END {  SECURITY_DESCRIPTOR};
TYPE SECURITY_DESCRIPTOR   = _SECURITY_DESCRIPTOR;
TYPE TSECURITY_DESCRIPTOR  = _SECURITY_DESCRIPTOR;
TYPE PSECURITY_DESCRIPTOR  = ^_SECURITY_DESCRIPTOR;

TYPE _JOB_INFO_2 = RECORD
                     JobId : DWord;
                     pPrinterName : PTSTR;
                     pMachineName : PTSTR;
                     pUserName : PTSTR;
                     pDocument : PTSTR;
                     pNotifyName : PTSTR;
                     pDatatype : PTSTR;
                     pPrintProcessor : PTSTR;
                     pParameters : PTSTR;
                     pDriverName : PTSTR;
                     DevMode : PDEVMODE;
                     pStatus : PTSTR;
                     pSecurityDescriptor : PSECURITY_DESCRIPTOR;
                     Status : DWord;
                     Priority : DWord;
                     Position : DWord;
                     StartTime : DWord;
                     UntilTime : DWord;
                     TotalPages : DWord;
                     Size : DWord;
                     Submitted : SYSTEMTIME;
                     Time : DWord;
                     PAGESPRINTED : DWord ;
                   END {  JOB_INFO_2};
TYPE JOB_INFO_2   = _JOB_INFO_2;
TYPE PJOB_INFO_2  = ^_JOB_INFO_2;

TYPE tagKERNINGPAIR = RECORD
                        wFirst : Word;
                        wSecond : Word;
                        iKernAmount : Integer;
                      END {tagKERNINGPAIR};
TYPE KERNINGPAIR   = tagKERNINGPAIR;
TYPE TKERNINGPAIR  = tagKERNINGPAIR;
TYPE PKERNINGPAIR  = ^tagKERNINGPAIR;
TYPE LPKERNINGPAIR = ^tagKERNINGPAIR;


TYPE _LANA_ENUM = RECORD
                    length : Byte;
                    lana : ARRAY [0..MAX_LANA - 1] OF Byte;
                  END {  LANA_ENUM};
TYPE LANA_ENUM   = _LANA_ENUM;
TYPE TLANA_ENUM  = _LANA_ENUM;
TYPE PLANA_ENUM  = ^_LANA_ENUM;

TYPE tBytes = PACKED RECORD
     BaseMid : BYTE;
     Flags1 :  BYTE;
     Flags2 :  BYTE;
     BaseHi :  BYTE
END;

Card1 = Cardinal attribute ( Size = 1 );
Card2 = Cardinal attribute ( Size = 2 );
Card4 = Cardinal attribute ( Size = 4 );
Card5 = Cardinal attribute ( Size = 5 );

TYPE tBits  = PACKED RECORD
       BaseMid :     Byte;
       Typ :         Card5;
       Dpl :         Card2;
       Pres :        Card1;
       LimitHi :     Card4;
       Sys,
       Reserved_0,
       Default_Big,
       Granularity : Card1;
       BaseHi :      Byte;
END;

TYPE tHighWord = PACKED RECORD
   CASE integer OF
        1 : ( Bytes : tBytes );
        2 : ( Bits :  tBits )
END;

TYPE _LDT_ENTRY = PACKED RECORD
           LimitLow : WORD;
           BaseLow :  WORD;
           HighWord : tHighWord;
END;
TLDT_ENTRY  = _LDT_ENTRY;
PLDT_ENTRY  = ^_LDT_ENTRY;
LPLDT_ENTRY = ^_LDT_ENTRY;

TYPE tagLOCALESIGNATURE = RECORD
                            lsUsb : ARRAY [0..3] OF DWord;
                            lsCsbDefault : ARRAY [0..1] OF DWord;
                            lsCsbSupported : ARRAY [0..1] OF DWord;
                          END {tagLOCALESIGNATURE};
TYPE LOCALESIGNATURE   = tagLOCALESIGNATURE;
TYPE TLOCALESIGNATURE  = tagLOCALESIGNATURE;
TYPE PLOCALESIGNATURE  = ^tagLOCALESIGNATURE;

TYPE _LOCALGROUP_MEMBERS_INFO_0 = RECORD
                                    lgrmi0_sid : PSID;
                                  END {  LOCALGROUP_MEMBERS_INFO_0};
LOCALGROUP_MEMBERS_INFO_0   = _LOCALGROUP_MEMBERS_INFO_0;
TLOCALGROUP_MEMBERS_INFO_0  = _LOCALGROUP_MEMBERS_INFO_0;
PLOCALGROUP_MEMBERS_INFO_0  = ^_LOCALGROUP_MEMBERS_INFO_0;

TYPE _LOCALGROUP_MEMBERS_INFO_3 = RECORD
                                    lgrmi3_domainandname : LPCTSTR;
                                  END {  LOCALGROUP_MEMBERS_INFO_3};
LOCALGROUP_MEMBERS_INFO_3   = _LOCALGROUP_MEMBERS_INFO_3;
TLOCALGROUP_MEMBERS_INFO_3  = _LOCALGROUP_MEMBERS_INFO_3;
PLOCALGROUP_MEMBERS_INFO_3  = ^_LOCALGROUP_MEMBERS_INFO_3;

FXPT16DOT16 = Longint;
LPFXPT16DOT16 = ^FXPT16DOT16;

LUID = LARGE_INTEGER;
PLUID = ^LUID;

TYPE _LUID_AND_ATTRIBUTES = RECORD
                              Luid : LUID;
                              Attributes : DWord;
                            END {  LUID_AND_ATTRIBUTES};
LUID_AND_ATTRIBUTES   = _LUID_AND_ATTRIBUTES;
TLUID_AND_ATTRIBUTES  = _LUID_AND_ATTRIBUTES;
PLUID_AND_ATTRIBUTES  = ^_LUID_AND_ATTRIBUTES;

LUID_AND_ATTRIBUTES_ARRAY = ARRAY [0..ANYSIZE_ARRAY - 1] OF _LUID_AND_ATTRIBUTES;
PLUID_AND_ATTRIBUTES_ARRAY = ^LUID_AND_ATTRIBUTES_ARRAY;

TYPE _LV_COLUMN = RECORD
                    mask : Word;
                    fmt : Integer;
                    cx : Integer;
                    pszText : PTSTR;
                    cchTextMax : Integer;
                    iSubItem : Integer;
                  END {  LV_COLUMN};
LV_COLUMN   = _LV_COLUMN;
TLV_COLUMN  = _LV_COLUMN;
PLV_COLUMN  = ^_LV_COLUMN;

TYPE _LV_ITEM = RECORD
                  mask : Word;
                  iItem : Integer;
                  iSubItem : Integer;
                  state : Word;
                  stateMask : Word;
                  pszText : PTSTR;
                  cchTextMax : Integer;
                  iImage : Integer;
                  lParam : LPARAM32;
                END {  LV_ITEM};
LV_ITEM   = _LV_ITEM;
TLV_ITEM  = _LV_ITEM;
PLV_ITEM  = ^_LV_ITEM;

TYPE tagLV_DISPINFO = RECORD
                        hdr : NMHDR;
                        item : LV_ITEM;
                      END {tagLV_DISPINFO};
LV_DISPINFO   = tagLV_DISPINFO;
TLV_DISPINFO  = tagLV_DISPINFO;
PLV_DISPINFO  = ^tagLV_DISPINFO;
LPLV_DISPINFO = ^tagLV_DISPINFO;

TYPE _LV_FINDINFO = RECORD
                      flags : Word;
                      psz : LPCTSTR;
                      lParam : LPARAM32;
                      pt : POINT;
                      vkDirection : Word;
                    END {  LV_FINDINFO};
LV_FINDINFO   = _LV_FINDINFO;
TLV_FINDINFO  = _LV_FINDINFO;
PLV_FINDINFO  = ^_LV_FINDINFO;

TYPE _LV_HITTESTINFO = RECORD
                         pt : POINT;
                         flags : Word;
                         iItem : Integer;
                       END {  LV_HITTESTINFO};
LV_HITTESTINFO   = _LV_HITTESTINFO;
TLV_HITTESTINFO  = _LV_HITTESTINFO;
PLV_HITTESTINFO  = ^_LV_HITTESTINFO;

TYPE tagLV_KEYDOWN = RECORD
                       hdr : NMHDR;
                       wVKey : Word;
                       flags : Word;
                     END {tagLV_KEYDOWN};
LV_KEYDOWN   = tagLV_KEYDOWN;
TLV_KEYDOWN  = tagLV_KEYDOWN;
PLV_KEYDOWN  = ^tagLV_KEYDOWN;

TYPE _MAT2 = RECORD
               eM11 : FIXED;
               eM12 : FIXED;
               eM21 : FIXED;
               eM22 : FIXED;
             END {  MAT2};
MAT2   = _MAT2;
TMAT2  = _MAT2;
PMAT2  = ^_MAT2;

TYPE tagMDICREATESTRUCT = RECORD
                            szClass : LPCTSTR;
                            szTitle : LPCTSTR;
                            hOwner : THandle;
                            x : Integer;
                            y : Integer;
                            cx : Integer;
                            cy : Integer;
                            style : DWord;
                            lParam : LPARAM32;
                          END {tagMDICREATESTRUCT};
MDICREATESTRUCT   = tagMDICREATESTRUCT;
TMDICREATESTRUCT  = tagMDICREATESTRUCT;
PMDICREATESTRUCT  = ^tagMDICREATESTRUCT;
LPMDICREATESTRUCT = ^tagMDICREATESTRUCT;

TYPE tagMEASUREITEMSTRUCT = RECORD
                              CtlType : Word;
                              CtlID : Word;
                              itemID : Word;
                              itemWidth : Word;
                              itemHeight : Word;
                              itemData : DWord;
                            END {tagMEASUREITEMSTRUCT};
MEASUREITEMSTRUCT   = tagMEASUREITEMSTRUCT;
TMEASUREITEMSTRUCT  = tagMEASUREITEMSTRUCT;
PMEASUREITEMSTRUCT  = ^tagMEASUREITEMSTRUCT;

TYPE _MEMORY_BASIC_INFORMATION = RECORD
                                   BaseAddress : Pointer;
                                   AllocationBase : Pointer;
                                   AllocationProtect : DWord;
                                   RegionSize : DWord;
                                   State : DWord;
                                   Protect : DWord;
                                   aType : DWord;
                                 END {  MEMORY_BASIC_INFORMATION};
MEMORY_BASIC_INFORMATION   = _MEMORY_BASIC_INFORMATION;
TMEMORY_BASIC_INFORMATION  = _MEMORY_BASIC_INFORMATION;
PMEMORY_BASIC_INFORMATION  = ^_MEMORY_BASIC_INFORMATION;
LPMEMORY_BASIC_INFORMATION = ^_MEMORY_BASIC_INFORMATION;

TYPE _MEMORYSTATUS = RECORD
                       dwLength : DWord;
                       dwMemoryLoad : DWord;
                       dwTotalPhys : DWord;
                       dwAvailPhys : DWord;
                       dwTotalPageFile : DWord;
                       dwAvailPageFile : DWord;
                       dwTotalVirtual : DWord;
                       dwAvailVirtual : DWord;
                     END {  MEMORYSTATUS};
MEMORYSTATUS   = _MEMORYSTATUS;
TMEMORYSTATUS  = _MEMORYSTATUS;
PMEMORYSTATUS  = ^_MEMORYSTATUS;
LPMEMORYSTATUS = ^_MEMORYSTATUS;

TYPE MENUEX_TEMPLATE_HEADER = RECORD
             wVersion : Word;
             wOffset : Word;
             dwHelpId : DWord;
           END {MENUEX_TEMPLATE_HEADER};
TMENUEX_TEMPLATE_HEADER  = MENUEX_TEMPLATE_HEADER;
PMENUEX_TEMPLATE_HEADER  = ^MENUEX_TEMPLATE_HEADER;
LPMENUEX_TEMPLATE_HEADER = ^MENUEX_TEMPLATE_HEADER;

TYPE MENUEX_TEMPLATE_ITEM = RECORD
             dwType : DWord;
             dwState : DWord;
             uId : Word;
             bResInfo : BYTE;
             szText : ARRAY [0..0] OF WCHAR;
             dwHelpId : DWord;
           END {MENUEX_TEMPLATE_ITEM};
TMENUEX_TEMPLATE_ITEM  = MENUEX_TEMPLATE_ITEM;
PMENUEX_TEMPLATE_ITEM  = ^MENUEX_TEMPLATE_ITEM;
LPMENUEX_TEMPLATE_ITEM = ^MENUEX_TEMPLATE_ITEM;

TYPE tagMENUITEMINFO = RECORD
                         cbSize : Word;
                         fMask : Word;
                         fType : Word;
                         fState : Word;
                         wID : Word;
                         hSubMenu : HMENU;
                         hbmpChecked : HBITMAP;
                         hbmpUnchecked : HBITMAP;
                         dwItemData : DWord;
                         dwTypeData : PTSTR;
                         cch : Word;
                       END {tagMENUITEMINFO};
MENUITEMINFO   = tagMENUITEMINFO;
TMENUITEMINFO  = tagMENUITEMINFO;
PMENUITEMINFO  = ^tagMENUITEMINFO;
LPMENUITEMINFO = ^tagMENUITEMINFO;
LPCMENUITEMINFO = PMENUITEMINFO;

TYPE MENUITEMTEMPLATE = RECORD
             mtOption : Word;
             mtID : Word;
             mtString : ARRAY [0..0] OF WCHAR;
           END {MENUITEMTEMPLATE};
TMENUITEMTEMPLATE  = MENUITEMTEMPLATE;
PMENUITEMTEMPLATE  = ^MENUITEMTEMPLATE;
LPMENUITEMTEMPLATE = ^MENUITEMTEMPLATE;

TYPE MENUITEMTEMPLATEHEADER = RECORD
             versionNumber : Word;
             offset : Word;
           END {MENUITEMTEMPLATEHEADER};
TMENUITEMTEMPLATEHEADER  = MENUITEMTEMPLATEHEADER;
PMENUITEMTEMPLATEHEADER  = ^MENUITEMTEMPLATEHEADER;
LPMENUITEMTEMPLATEHEADER = ^MENUITEMTEMPLATEHEADER;

MENUTEMPLATE = POINTER;
LPMENUTEMPLATE = ^MENUTEMPLATE;

TYPE tagMETAFILEPICT = RECORD
                         mm : LongInt;
                         xExt : LongInt;
                         yExt : LongInt;
                         hMF : HMETAFILE;
                       END {tagMETAFILEPICT};
TYPE METAFILEPICT   = tagMETAFILEPICT;
TYPE TMETAFILEPICT  = tagMETAFILEPICT;
TYPE PMETAFILEPICT  = ^tagMETAFILEPICT;
TYPE LPMETAFILEPICT = ^tagMETAFILEPICT;


TYPE tagMETAHEADER = PACKED RECORD
                       mtType : Word;
                       mtHeaderSize : Word;
                       mtVersion : Word;
                       mtSize : DWord;
                       mtNoObjects : Word;
                       mtMaxRecord : DWord;
                       mtNoParameters : Word;
                     END {tagMETAHEADER};
TYPE METAHEADER   = tagMETAHEADER;
TYPE TMETAHEADER  = tagMETAHEADER;
TYPE PMETAHEADER  = ^tagMETAHEADER;

TYPE tagMETARECORD = RECORD
                       rdSize : DWord;
                       rdFunction : Word;
                       rdParm : ARRAY [0..0] OF Word;
                     END {tagMETARECORD};
METARECORD   = tagMETARECORD;
TMETARECORD  = tagMETARECORD;
PMETARECORD  = ^tagMETARECORD;
LPMETARECORD = ^tagMETARECORD;

TYPE tagMINIMIZEDMETRICS = RECORD
                             cbSize : Word;
                             iWidth : Integer;
                             iHorzGap : Integer;
                             iVertGap : Integer;
                             iArrange : Integer;
                           END {tagMINIMIZEDMETRICS};
TYPE MINIMIZEDMETRICS   = tagMINIMIZEDMETRICS;
TYPE TMINIMIZEDMETRICS  = tagMINIMIZEDMETRICS;
TYPE PMINIMIZEDMETRICS  = ^tagMINIMIZEDMETRICS;
TYPE LPMINIMIZEDMETRICS = ^tagMINIMIZEDMETRICS;


TYPE tagMINMAXINFO = RECORD
                       ptReserved : POINT;
                       ptMaxSize : POINT;
                       ptMaxPosition : POINT;
                       ptMinTrackSize : POINT;
                       ptMaxTrackSize : POINT;
                     END {tagMINMAXINFO};
TYPE MINMAXINFO   = tagMINMAXINFO;
TYPE TMINMAXINFO  = tagMINMAXINFO;
TYPE PMINMAXINFO  = ^tagMINMAXINFO;
TYPE LPMINMAXINFO = ^tagMINMAXINFO;

TYPE modemdevcaps_tag = RECORD
                          dwActualSize : DWord;
                          dwRequiredSize : DWord;
                          dwDevSpecificOffset : DWord;
                          dwDevSpecificSize : DWord;
                          dwModemProviderVersion : DWord;
                          dwModemManufacturerOffset : DWord;
                          dwModemManufacturerSize : DWord;
                          dwModemModelOffset : DWord;
                          dwModemModelSize : DWord;
                          dwModemVersionOffset : DWord;
                          dwModemVersionSize : DWord;
                          dwDialOptions : DWord;
                          dwCallSetupFailTimer : DWord;
                          dwInactivityTimeout : DWord;
                          dwSpeakerVolume : DWord;
                          dwSpeakerMode : DWord;
                          dwModemOptions : DWord;
                          dwMaxDTERate : DWord;
                          dwMaxDCERate : DWord;
                          ABVARIABLEPORTION : ARRAY [0..0] OF BYTE;
                        END {modemdevcaps_tag};
MODEMDEVCAPS = modemdevcaps_tag;
PMODEMDEVCAPS = ^modemdevcaps_tag;
LPMODEMDEVCAPS = ^modemdevcaps_tag;

TYPE modemsettings_tag = RECORD
                           dwActualSize : DWord;
                           dwRequiredSize : DWord;
                           dwDevSpecificOffset : DWord;
                           dwDevSpecificSize : DWord;
                           dwCallSetupFailTimer : DWord;
                           dwInactivityTimeout : DWord;
                           dwSpeakerVolume : DWord;
                           dwSpeakerMode : DWord;
                           dwPreferredModemOptions : DWord;
                           dwNegotiatedModemOptions : DWord;
                           dwNegotiatedDCERate : DWord;
                           abVariablePortion : ARRAY [0..0] OF BYTE;
                         END {modemsettings_tag};
TYPE MODEMSETTINGS = modemsettings_tag;
TYPE PMODEMSETTINGS = ^modemsettings_tag;
TYPE LPMODEMSETTINGS = ^modemsettings_tag;

TYPE tagMONCBSTRUCT = RECORD
                        cb : Word;
                        dwTime : DWord;
                        hTask : THandle;
                        dwRet : DWord;
                        wType : Word;
                        wFmt : Word;
                        hConv : HCONV;
                        hsz1 : HSZ;
                        hsz2 : HSZ;
                        hData : HDDEDATA;
                        dwData1 : DWord;
                        dwData2 : DWord;
                        cc : CONVCONTEXT;
                        cbData : DWord;
                        Data : ARRAY [0..7] OF DWord;
                      END {tagMONCBSTRUCT};
MONCBSTRUCT   = tagMONCBSTRUCT;
TMONCBSTRUCT  = tagMONCBSTRUCT;
PMONCBSTRUCT  = ^tagMONCBSTRUCT;

TYPE tagMONCONVSTRUCT = RECORD
                          cb : Word;
                          fConnect : WINBOOL;
                          dwTime : DWord;
                          hTask : THandle;
                          hszSvc : HSZ;
                          hszTopic : HSZ;
                          hConvClient : HCONV;
                          hConvServer : HCONV;
                        END {tagMONCONVSTRUCT};
MONCONVSTRUCT   = tagMONCONVSTRUCT;
TMONCONVSTRUCT  = tagMONCONVSTRUCT;
PMONCONVSTRUCT  = ^tagMONCONVSTRUCT;

TYPE tagMONERRSTRUCT = RECORD
                         cb : Word;
                         wLastError : Word;
                         dwTime : DWord;
                         hTask : THandle;
                       END {tagMONERRSTRUCT};
MONERRSTRUCT   = tagMONERRSTRUCT;
TMONERRSTRUCT  = tagMONERRSTRUCT;
PMONERRSTRUCT  = ^tagMONERRSTRUCT;

TYPE tagMONHSZSTRUCT = RECORD
                         cb : Word;
                         fsAction : WINBOOL;
                         dwTime : DWord;
                         hsz : HSZ;
                         hTask : THandle;
                         str : ARRAY [0..0] OF TCHAR;
                       END {tagMONHSZSTRUCT};
MONHSZSTRUCT   = tagMONHSZSTRUCT;
TMONHSZSTRUCT  = tagMONHSZSTRUCT;
PMONHSZSTRUCT  = ^tagMONHSZSTRUCT;

TYPE _MONITOR_INFO_1 = RECORD
                         pName : PTSTR;
                       END {  MONITOR_INFO_1};
MONITOR_INFO_1   = _MONITOR_INFO_1;
TMONITOR_INFO_1  = _MONITOR_INFO_1;
PMONITOR_INFO_1  = ^_MONITOR_INFO_1;

TYPE _MONITOR_INFO_2 = RECORD
                         pName : PTSTR;
                         PENVIRONMENT : PTSTR;
                         PDLLNAME : PTSTR;
                       END {  MONITOR_INFO_2};
MONITOR_INFO_2   = _MONITOR_INFO_2;
TMONITOR_INFO_2  = _MONITOR_INFO_2;
PMONITOR_INFO_2  = ^_MONITOR_INFO_2;

TYPE tagMONLINKSTRUCT = RECORD
                          cb : Word;
                          dwTime : DWord;
                          hTask : THandle;
                          fEstablished : WINBOOL;
                          fNoData : WINBOOL;
                          hszSvc : HSZ;
                          hszTopic : HSZ;
                          hszItem : HSZ;
                          wFmt : Word;
                          fServer : WINBOOL;
                          hConvServer : HCONV;
                          hConvClient : HCONV;
                        END {tagMONLINKSTRUCT};
MONLINKSTRUCT   = tagMONLINKSTRUCT;
TMONLINKSTRUCT  = tagMONLINKSTRUCT;
PMONLINKSTRUCT  = ^tagMONLINKSTRUCT;

TYPE tagMONMSGSTRUCT = RECORD
                         cb : Word;
                         hwndTo : HWND;
                         dwTime : DWord;
                         hTask : THandle;
                         wMsg : Word;
                         wParam : UINT;
                         lParam : LPARAM32;
                         dmhd : DDEML_MSG_HOOK_DATA;
                       END {tagMONMSGSTRUCT};
MONMSGSTRUCT   = tagMONMSGSTRUCT;
TMONMSGSTRUCT  = tagMONMSGSTRUCT;
PMONMSGSTRUCT  = ^tagMONMSGSTRUCT;

TYPE tagMOUSEHOOKSTRUCT = RECORD
                            pt : POINT;
                            hwnd : HWND;
                            wHitTestCode : Word;
                            dwExtraInfo : DWord;
                          END {tagMOUSEHOOKSTRUCT};
TYPE MOUSEHOOKSTRUCT   = tagMOUSEHOOKSTRUCT;
TYPE TMOUSEHOOKSTRUCT  = tagMOUSEHOOKSTRUCT;
TYPE PMOUSEHOOKSTRUCT  = ^tagMOUSEHOOKSTRUCT;
TYPE LPMOUSEHOOKSTRUCT = ^tagMOUSEHOOKSTRUCT;


TYPE _MOUSEKEYS = RECORD
                    cbSize : DWord;
                    dwFlags : DWord;
                    iMaxSpeed : DWord;
                    iTimeToMaxSpeed : DWord;
                    iCtrlSpeed : DWord;
                    dwReserved1 : DWord;
                    dwReserved2 : DWord;
                  END {  MOUSEKEYS};
TYPE MOUSEKEYS   = _MOUSEKEYS;
TYPE TMOUSEKEYS  = _MOUSEKEYS;
TYPE PMOUSEKEYS  = ^_MOUSEKEYS;

TYPE tagMSG = RECORD
                hwnd : HWND;
                message : UINT;
                wParam : UINT;
                lParam : LPARAM32;
                time : DWord;
                pt : POINT;
              END {tagMSG};
MSG   = tagMSG;
TMSG  = tagMSG;
PMSG  = ^tagMSG;
LPMSG = ^tagMSG;

TYPE MSGBOXCALLBACK = PROCEDURE ( VAR hInfo : HELPINFO );{STDCALL;}

TYPE MSGBOXPARAMS = RECORD
             cbSize : Word;
             hwndOwner : HWND;
             hInstance : THANDLE;
             lpszText : PChar;
             lpszCaption : PChar;
             dwStyle : DWord;
             lpszIcon : PChar;
             dwContextHelpId : DWord;
             lpfnMsgBoxCallback : MSGBOXCALLBACK;
             dwLanguageId : DWord;
           END {MSGBOXPARAMS};
PMSGBOXPARAMS = ^MSGBOXPARAMS;
LPMSGBOXPARAMS = ^MSGBOXPARAMS;

TYPE _msgfilter = RECORD
                    nmhdr : NMHDR;
                    msg : Word;
                    wParam : UINT;
                    lParam : LPARAM32;
                  END {  msgfilter};
msgfilter   = _msgfilter;
Tmsgfilter  = _msgfilter;
Pmsgfilter  = ^_msgfilter;

{/// structs2.pas ////}

{ !!! not sure !!! }
TYPE
PFONHOOKPROC   = PFRHOOKPROC;
PPRINTHOOKPROC = PFRHOOKPROC;
PSETUPHOOKPROC = PFRHOOKPROC;
POFNHOOKPROC   = PFRHOOKPROC;
Ppagesetuphook = PFRHOOKPROC;
Ppagepainthook = PFRHOOKPROC;
{ !!! not sure !!! }

{==============================================}
{==============================================}
TYPE tagMULTIKEYHELP = RECORD
                         mkSize : DWord;
                         mkKeylist : TCHAR;
                         szKeyphrase : ARRAY [0..0] OF TCHAR;
                       END {tagMULTIKEYHELP};
MULTIKEYHELP   = tagMULTIKEYHELP;
TMULTIKEYHELP  = tagMULTIKEYHELP;
PMULTIKEYHELP  = ^tagMULTIKEYHELP;

TYPE _NAME_BUFFER = RECORD
                      name : ARRAY [0..NCBNAMSZ - 1] OF Byte;
                      name_num : Byte;
                      name_flags : Byte;
                    END {  NAME_BUFFER};
NAME_BUFFER   = _NAME_BUFFER;
TNAME_BUFFER  = _NAME_BUFFER;
PNAME_BUFFER  = ^_NAME_BUFFER;

TYPE _NCB = RECORD
              ncb_command : Byte;
              ncb_retcode : Byte;
              ncb_lsn : Byte;
              ncb_num : Byte;
              ncb_buffer : PUCHAR;
              ncb_length : Word;
              ncb_callname : ARRAY [0..NCBNAMSZ - 1] OF Byte;
              ncb_name : ARRAY [0..NCBNAMSZ - 1] OF Byte;
              ncb_rto : Byte;
              ncb_sto : Byte;
              {): Pointer ( *NCB_POST) ( _NCB;WINAPI('Pointer ( *NCB_POST) (');}
              ncb_lana_num : Byte;
              ncb_cmd_cplt : Byte;
              ncb_reserve : ARRAY [0..9] OF Byte;
              ncb_event : THandle;
            END {  NCB};
NCB   = _NCB;
TNCB  = _NCB;
PNCB  = ^_NCB;
LPNCB = PNCB;


TYPE _NCCALCSIZE_PARAMS = RECORD
                            rgrc : ARRAY [0..2] OF RECT;
                            lppos : PWINDOWPOS;
                          END {  NCCALCSIZE_PARAMS};
NCCALCSIZE_PARAMS   = _NCCALCSIZE_PARAMS;
TNCCALCSIZE_PARAMS  = _NCCALCSIZE_PARAMS;
PNCCALCSIZE_PARAMS  = ^_NCCALCSIZE_PARAMS;
PNCCALCSIZEPARAMS  = ^_NCCALCSIZE_PARAMS;

TYPE _NDDESHAREINFO = RECORD
                        lRevision : LongInt;
                        lpszShareName : PTSTR;
                        lShareType : LongInt;
                        lpszAppTopicList : PTSTR;
                        fSharedFlag : LongInt;
                        fService : LongInt;
                        fStartAppFlag : LongInt;
                        nCmdShow : LongInt;
                        qModifyId : ARRAY [0..1] OF LongInt;
                        cNumItems : LongInt;
                        lpszItemList : PTSTR;
                      END {  NDDESHAREINFO};
NDDESHAREINFO   = _NDDESHAREINFO;
TNDDESHAREINFO  = _NDDESHAREINFO;
PNDDESHAREINFO  = ^_NDDESHAREINFO;

TYPE _NETRESOURCE = RECORD
                      dwScope : DWord;
                      dwType : DWord;
                      dwDisplayType : DWord;
                      dwUsage : DWord;
                      lpLocalName : PTSTR;
                      lpRemoteName : PTSTR;
                      lpComment : PTSTR;
                      lpProvider : PTSTR;
                    END {  NETRESOURCE};
NETRESOURCE   = _NETRESOURCE;
TNETRESOURCE  = _NETRESOURCE;
PNETRESOURCE  = ^_NETRESOURCE;
LPNETRESOURCE = ^_NETRESOURCE;

TYPE tagNEWCPLINFO = RECORD
                       dwSize : DWord;
                       dwFlags : DWord;
                       dwHelpContext : DWord;
                       lData : LongInt;
                       hIcon : HICON;
                       szName : ARRAY [0..31] OF TCHAR;
                       szInfo : ARRAY [0..63] OF TCHAR;
                       szHelpFile : ARRAY [0..127] OF TCHAR;
                     END {tagNEWCPLINFO};
NEWCPLINFO   = tagNEWCPLINFO;
TNEWCPLINFO  = tagNEWCPLINFO;
PNEWCPLINFO  = ^tagNEWCPLINFO;

TYPE tagNEWTEXTMETRIC = RECORD
                          tmHeight : LongInt;
                          tmAscent : LongInt;
                          tmDescent : LongInt;
                          tmInternalLeading : LongInt;
                          tmExternalLeading : LongInt;
                          tmAveCharWidth : LongInt;
                          tmMaxCharWidth : LongInt;
                          tmWeight : LongInt;
                          tmOverhang : LongInt;
                          tmDigitizedAspectX : LongInt;
                          tmDigitizedAspectY : LongInt;
                          tmFirstChar : BCHAR;
                          tmLastChar : BCHAR;
                          tmDefaultChar : BCHAR;
                          tmBreakChar : BCHAR;
                          tmItalic : BYTE;
                          tmUnderlined : BYTE;
                          tmStruckOut : BYTE;
                          tmPitchAndFamily : BYTE;
                          tmCharSet : BYTE;
                          ntmFlags : DWord;
                          ntmSizeEM : Word;
                          ntmCellHeight : Word;
                          ntmAvgWidth : Word;
                        END {tagNEWTEXTMETRIC};
NEWTEXTMETRIC   = tagNEWTEXTMETRIC;
TNEWTEXTMETRIC  = tagNEWTEXTMETRIC;
PNEWTEXTMETRIC  = ^tagNEWTEXTMETRIC;

TYPE tagNEWTEXTMETRICEX = RECORD
                            ntmentm : NEWTEXTMETRIC;
                            ntmeFontSignature : FONTSIGNATURE;
                          END {tagNEWTEXTMETRICEX};
TYPE NEWTEXTMETRICEX   = tagNEWTEXTMETRICEX;
TYPE TNEWTEXTMETRICEX  = tagNEWTEXTMETRICEX;
TYPE PNEWTEXTMETRICEX  = ^tagNEWTEXTMETRICEX;

TYPE tagNM_LISTVIEW = RECORD
                        hdr : NMHDR;
                        iItem : Integer;
                        iSubItem : Integer;
                        uNewState : Word;
                        uOldState : Word;
                        uChanged : Word;
                        ptAction : POINT;
                        lParam : LPARAM32;
                      END {tagNM_LISTVIEW};
TYPE NM_LISTVIEW   = tagNM_LISTVIEW;
TYPE TNM_LISTVIEW  = tagNM_LISTVIEW;
TYPE PNM_LISTVIEW  = ^tagNM_LISTVIEW;

TYPE _TV_ITEM = RECORD
                        mask : Word;
                        hItem : HTREEITEM;
                        state : Word;
                        stateMask : Word;
                        pszText : PTSTR;
                        cchTextMax : Integer;
                        iImage : Integer;
                        iSelectedImage : Integer;
                        cChildren : Integer;
                        lParam : LPARAM32;
                      END {  TV_ITEM};
TV_ITEM = _TV_ITEM;
PTV_ITEM = ^_TV_ITEM;
LPTV_ITEM = ^_TV_ITEM;

TYPE _NM_TREEVIEW = RECORD
                      hdr : NMHDR;
                      action : Word;
                      itemOld : TV_ITEM;
                      itemNew : TV_ITEM;
                      ptDrag : POINT;
                    END {  NM_TREEVIEW};
NM_TREEVIEW   = _NM_TREEVIEW;
TNM_TREEVIEW  = _NM_TREEVIEW;
PNM_TREEVIEW  = ^_NM_TREEVIEW;
LPNM_TREEVIEW = ^_NM_TREEVIEW;

TYPE _NM_UPDOWN = RECORD
                    hdr : NMHDR;
                    iPos : Integer;
                    iDelta : Integer;
                  END {  NM_UPDOWN};
NM_UPDOWN   = _NM_UPDOWN;
TNM_UPDOWN  = _NM_UPDOWN;
PNM_UPDOWN  = ^_NM_UPDOWN;

TYPE tagNONCLIENTMETRICS = RECORD
                             cbSize : Word;
                             iBorderWidth : Integer;
                             iScrollWidth : Integer;
                             iScrollHeight : Integer;
                             iCaptionWidth : Integer;
                             iCaptionHeight : Integer;
                             lfCaptionFont : LOGFONT;
                             iSmCaptionWidth : Integer;
                             iSmCaptionHeight : Integer;
                             lfSmCaptionFont : LOGFONT;
                             iMenuWidth : Integer;
                             iMenuHeight : Integer;
                             lfMenuFont : LOGFONT;
                             lfStatusFont : LOGFONT;
                             lfMessageFont : LOGFONT;
                           END {tagNONCLIENTMETRICS};
NONCLIENTMETRICS   = tagNONCLIENTMETRICS;
TNONCLIENTMETRICS  = tagNONCLIENTMETRICS;
PNONCLIENTMETRICS  = ^tagNONCLIENTMETRICS;
LPNONCLIENTMETRICS = ^tagNONCLIENTMETRICS;


TYPE _SERVICE_ADDRESS = RECORD
                          dwAddressType : DWord;
                          dwAddressFlags : DWord;
                          dwAddressLength : DWord;
                          dwPrincipalLength : DWord;
                          lpAddress : PBYTE;
                          lpPrincipal : PBYTE;
                        END {  SERVICE_ADDRESS};
TYPE SERVICE_ADDRESS   = _SERVICE_ADDRESS;
TYPE TSERVICE_ADDRESS  = _SERVICE_ADDRESS;
TYPE PSERVICE_ADDRESS  = ^_SERVICE_ADDRESS;

TYPE _SERVICE_ADDRESSES = RECORD
                            dwAddressCount : DWord;
                            Addresses : ARRAY [0..0] OF SERVICE_ADDRESS;
                          END {  SERVICE_ADDRESSES};
SERVICE_ADDRESSES   = _SERVICE_ADDRESSES;
TSERVICE_ADDRESSES  = _SERVICE_ADDRESSES;
PSERVICE_ADDRESSES  = ^_SERVICE_ADDRESSES;
LPSERVICE_ADDRESSES = ^_SERVICE_ADDRESSES;


TYPE _GUID = RECORD
               Data1 : LongInt;
               Data2 : Byte;
               Data3 : Byte;
               Data4 : ARRAY [0..7] OF Byte;
             END {  GUID};
GUID   = _GUID;
TGUID  = _GUID;
PGUID  = ^_GUID;
LPGUID = ^_GUID;
CLSID  = _GUID;
LPCLSID  = ^_GUID;

TYPE _SERVICE_INFO = RECORD
                       lpServiceType : PGUID;
                       lpServiceName : PTSTR;
                       lpComment : PTSTR;
                       lpLocale : PTSTR;
                       dwDisplayHint : DWord;
                       dwVersion : DWord;
                       dwTime : DWord;
                       lpMachineName : PTSTR;
                       lpServiceAddress : PSERVICE_ADDRESSES;
                       ServiceSpecificInfo : BLOB;
                     END {  SERVICE_INFO};
SERVICE_INFO   = _SERVICE_INFO;
TSERVICE_INFO  = _SERVICE_INFO;
PSERVICE_INFO  = ^_SERVICE_INFO;

TYPE _NS_SERVICE_INFO = RECORD
                          dwNameSpace : DWord;
                          ServiceInfo : SERVICE_INFO;
                        END {  NS_SERVICE_INFO};
NS_SERVICE_INFO   = _NS_SERVICE_INFO;
TNS_SERVICE_INFO  = _NS_SERVICE_INFO;
PNS_SERVICE_INFO  = ^_NS_SERVICE_INFO;

TYPE _numberfmt = RECORD
                    NumDigits : Word;
                    LeadingZero : Word;
                    Grouping : Word;
                    lpDecimalSep : PTSTR;
                    lpThousandSep : PTSTR;
                    NegativeOrder : Word;
                  END {  numberfmt};
numberfmt   = _numberfmt;
Tnumberfmt  = _numberfmt;
Pnumberfmt  = ^_numberfmt;

TYPE _OFSTRUCT = RECORD
                   cBytes : BYTE;
                   fFixedDisk : BYTE;
                   nErrCode : Word;
                   Reserved1 : Word;
                   Reserved2 : Word;
                   szPathName : ARRAY [0..OFS_MAXPATHNAME - 1] OF Char;
                 END {  OFSTRUCT};
OFSTRUCT   = _OFSTRUCT;
TOFSTRUCT  = _OFSTRUCT;
POFSTRUCT  = ^_OFSTRUCT;
LPOFSTRUCT = ^_OFSTRUCT;


TYPE tagOFN = RECORD
                lStructSize : DWord;
                hwndOwner : HWND;
                hInstance : THANDLE;
                lpstrFilter : LPCTSTR;
                lpstrCustomFilter : PTSTR;
                nMaxCustFilter : DWord;
                nFilterIndex : DWord;
                lpstrFile : PTSTR;
                nMaxFile : DWord;
                lpstrFileTitle : PTSTR;
                nMaxFileTitle : DWord;
                lpstrInitialDir : LPCTSTR;
                lpstrTitle : LPCTSTR;
                Flags : DWord;
                nFileOffset : Word;
                nFileExtension : Word;
                lpstrDefExt : LPCTSTR;
                lCustData : DWord;
                lpfnHook : POFNHOOKPROC;
                lpTemplateName : LPCTSTR;
              END {tagOFN};
OFN   = tagOFN;
TOFN  = tagOFN;
POFN  = ^tagOFN;
LPOFN = ^tagOFN;
TOPENFILENAME = tagOFN;
OPENFILENAME = tagOFN;
pOPENFILENAME = ^tagOFN;
LPOPENFILENAME = ^tagOFN;

TYPE _OFNOTIFY = RECORD
                   hdr : NMHDR;
                   lpOFN : POPENFILENAME;
                   pszFile : PTSTR;
                 END {  OFNOTIFY};
OFNOTIFY   = _OFNOTIFY;
TOFNOTIFY  = _OFNOTIFY;
POFNOTIFY  = ^_OFNOTIFY;
LPOFNOTIFY = ^_OFNOTIFY;


TYPE _OSVERSIONINFO = RECORD
                        dwOSVersionInfoSize : DWord;
                        dwMajorVersion : DWord;
                        dwMinorVersion : DWord;
                        dwBuildNumber : DWord;
                        dwPlatformId : DWord;
                        SZCSDVERSION : ARRAY [0..127] OF TCHAR ;
                      END {  OSVERSIONINFO};
OSVERSIONINFO   = _OSVERSIONINFO;
TOSVERSIONINFO  = _OSVERSIONINFO;
POSVERSIONINFO  = ^_OSVERSIONINFO;
LPOSVERSIONINFO = ^_OSVERSIONINFO;


TYPE tagTEXTMETRIC = RECORD
                       tmHeight : LongInt;
                       tmAscent : LongInt;
                       tmDescent : LongInt;
                       tmInternalLeading : LongInt;
                       tmExternalLeading : LongInt;
                       tmAveCharWidth : LongInt;
                       tmMaxCharWidth : LongInt;
                       tmWeight : LongInt;
                       tmOverhang : LongInt;
                       tmDigitizedAspectX : LongInt;
                       tmDigitizedAspectY : LongInt;
                       tmFirstChar : BCHAR;
                       tmLastChar : BCHAR;
                       tmDefaultChar : BCHAR;
                       tmBreakChar : BCHAR;
                       tmItalic : BYTE;
                       tmUnderlined : BYTE;
                       tmStruckOut : BYTE;
                       tmPitchAndFamily : BYTE;
                       tmCharSet : BYTE;
                     END {tagTEXTMETRIC};
TEXTMETRIC   = tagTEXTMETRIC;
TTEXTMETRIC  = tagTEXTMETRIC;
PTEXTMETRIC  = ^tagTEXTMETRIC;
LPTEXTMETRIC = ^tagTEXTMETRIC;


TYPE _OUTLINETEXTMETRIC = RECORD
                            otmSize : Word;
                            otmTextMetrics : TEXTMETRIC;
                            otmFiller : BYTE;
                            otmPanoseNumber : PANOSE;
                            otmfsSelection : Word;
                            otmfsType : Word;
                            otmsCharSlopeRise : Integer;
                            otmsCharSlopeRun : Integer;
                            otmItalicAngle : Integer;
                            otmEMSquare : Word;
                            otmAscent : Integer;
                            otmDescent : Integer;
                            otmLineGap : Word;
                            otmsCapEmHeight : Word;
                            otmsXHeight : Word;
                            otmrcFontBox : RECT;
                            otmMacAscent : Integer;
                            otmMacDescent : Integer;
                            otmMacLineGap : Word;
                            otmusMinimumPPEM : Word;
                            otmptSubscriptSize : POINT;
                            otmptSubscriptOffset : POINT;
                            otmptSuperscriptSize : POINT;
                            otmptSuperscriptOffset : POINT;
                            otmsStrikeoutSize : Word;
                            otmsStrikeoutPosition : Integer;
                            otmsUnderscoreSize : Integer;
                            otmsUnderscorePosition : Integer;
                            otmpFamilyName : PSTR;
                            otmpFaceName : PSTR;
                            otmpStyleName : PSTR;
                            otmpFullName : PSTR;
                          END {  OUTLINETEXTMETRIC};
OUTLINETEXTMETRIC   = _OUTLINETEXTMETRIC;
TOUTLINETEXTMETRIC  = _OUTLINETEXTMETRIC;
POUTLINETEXTMETRIC  = ^_OUTLINETEXTMETRIC;
LPOUTLINETEXTMETRIC = ^_OUTLINETEXTMETRIC;


TYPE _OVERLAPPED = RECORD
                     Internal : DWord;
                     InternalHigh : DWord;
                     Offset : DWord;
                     OffsetHigh : DWord;
                     hEvent : THandle;
                   END {  OVERLAPPED};
OVERLAPPED   = _OVERLAPPED;
TOVERLAPPED  = _OVERLAPPED;
POVERLAPPED  = ^_OVERLAPPED;
LPOVERLAPPED = ^_OVERLAPPED;


TYPE tagPSD = RECORD
                lStructSize : DWord;
                hwndOwner : HWND;
                hDevMode : HGLOBAL;
                hDevNames : HGLOBAL;
                Flags : DWord;
                ptPaperSize : POINT;
                rtMinMargin : RECT;
                rtMargin : RECT;
                hInstance : THANDLE;
                lCustData : LPARAM32;
                lpfnPageSetupHook : PPAGESETUPHOOK;
                lpfnPagePaintHook : PPAGEPAINTHOOK;
                lpPageSetupTemplateName : LPCTSTR;
                hPageSetupTemplate : HGLOBAL;
              END {tagPSD};
PSD   = tagPSD;
TPSD  = tagPSD;
TPAGESETUPDLG = tagPSD;
LPPAGESETUPDLG = ^tagPSD;
PPAGESETUPDLG = ^tagPSD;
PPSD  = ^tagPSD;
LPPSD = ^tagPSD;

TYPE tagPAINTSTRUCT = RECORD
                        hdc : HDC;
                        fErase : WINBOOL;
                        rcPaint : RECT;
                        fRestore : WINBOOL;
                        fIncUpdate : WINBOOL;
                        rgbReserved : ARRAY [0..31] OF BYTE;
                      END {tagPAINTSTRUCT};
PAINTSTRUCT   = tagPAINTSTRUCT;
TPAINTSTRUCT  = tagPAINTSTRUCT;
PPAINTSTRUCT  = ^tagPAINTSTRUCT;
LPPAINTSTRUCT = ^tagPAINTSTRUCT;


TYPE _paraformat = RECORD
                     cbSize : Word;
                     dwMask : DWord;
                     wNumbering : Word;
                     wReserved : Word;
                     dxStartIndent : LongInt;
                     dxRightIndent : LongInt;
                     dxOffset : LongInt;
                     wAlignment : Word;
                     cTabCount : SmallInt;
                     rgxTabs : ARRAY [0..MAX_TAB_STOPS - 1] OF LongInt;
                   END {  paraformat};
paraformat   = _paraformat;
Tparaformat  = _paraformat;
Pparaformat  = ^_paraformat;
LPparaformat = ^_paraformat;


TYPE _PERF_COUNTER_BLOCK = RECORD
                             ByteLength : DWord;
                           END {  PERF_COUNTER_BLOCK};
PERF_COUNTER_BLOCK   = _PERF_COUNTER_BLOCK;
TPERF_COUNTER_BLOCK  = _PERF_COUNTER_BLOCK;
PPERF_COUNTER_BLOCK  = ^_PERF_COUNTER_BLOCK;

TYPE _PERF_COUNTER_DEFINITION = RECORD
                                  ByteLength : DWord;
                                  CounterNameTitleIndex : DWord;
                                  CounterNameTitle : LPCTSTR;
                                  CounterHelpTitleIndex : DWord;
                                  CounterHelpTitle : LPCTSTR;
                                  DefaultScale : DWord;
                                  DetailLevel : DWord;
                                  CounterType : DWord;
                                  CounterSize : DWord;
                                  CounterOffset : DWord;
                                END {  PERF_COUNTER_DEFINITION};
PERF_COUNTER_DEFINITION   = _PERF_COUNTER_DEFINITION;
TPERF_COUNTER_DEFINITION  = _PERF_COUNTER_DEFINITION;
PPERF_COUNTER_DEFINITION  = ^_PERF_COUNTER_DEFINITION;

TYPE _PERF_DATA_BLOCK = RECORD
                          Signature : ARRAY [0..3] OF WCHAR;
                          LittleEndian : DWord;
                          Version : DWord;
                          Revision : DWord;
                          TotalByteLength : DWord;
                          HeaderLength : DWord;
                          NumObjectTypes : DWord;
                          DefaultObject : DWord;
                          SystemTime : SYSTEMTIME;
                          PerfTime : LARGE_INTEGER;
                          PerfFreq : LARGE_INTEGER;
                          PerfTime100nSec : LARGE_INTEGER;
                          SystemNameLength : DWord;
                          SystemNameOffset : DWord;
                        END {  PERF_DATA_BLOCK};
PERF_DATA_BLOCK   = _PERF_DATA_BLOCK;
TPERF_DATA_BLOCK  = _PERF_DATA_BLOCK;
PPERF_DATA_BLOCK  = ^_PERF_DATA_BLOCK;

TYPE _PERF_INSTANCE_DEFINITION = RECORD
                                   ByteLength : DWord;
                                   ParentObjectTitleIndex : DWord;
                                   ParentObjectInstance : DWord;
                                   UniqueID : DWord;
                                   NameOffset : DWord;
                                   NameLength : DWord;
                                 END {  PERF_INSTANCE_DEFINITION};
PERF_INSTANCE_DEFINITION   = _PERF_INSTANCE_DEFINITION;
TPERF_INSTANCE_DEFINITION  = _PERF_INSTANCE_DEFINITION;
PPERF_INSTANCE_DEFINITION  = ^_PERF_INSTANCE_DEFINITION;

TYPE _PERF_OBJECT_TYPE = RECORD
                           TotalByteLength : DWord;
                           DefinitionLength : DWord;
                           HeaderLength : DWord;
                           ObjectNameTitleIndex : DWord;
                           ObjectNameTitle : LPCTSTR;
                           ObjectHelpTitleIndex : DWord;
                           ObjectHelpTitle : LPCTSTR;
                           DetailLevel : DWord;
                           NumCounters : DWord;
                           DefaultCounter : DWord;
                           NumInstances : DWord;
                           CodePage : DWord;
                           PerfTime : LARGE_INTEGER;
                           PerfFreq : LARGE_INTEGER;
                         END {  PERF_OBJECT_TYPE};
PERF_OBJECT_TYPE   = _PERF_OBJECT_TYPE;
TPERF_OBJECT_TYPE  = _PERF_OBJECT_TYPE;
PPERF_OBJECT_TYPE  = ^_PERF_OBJECT_TYPE;

TYPE _POLYTEXT = RECORD
                   x : Integer;
                   y : Integer;
                   n : Word;
                   lpstr : LPCTSTR;
                   uiFlags : Word;
                   rcl : RECT;
                   pdx : PInteger;
                 END {  POLYTEXT};
POLYTEXT   = _POLYTEXT;
TPOLYTEXT  = _POLYTEXT;
PPOLYTEXT  = ^_POLYTEXT;

TYPE _PORT_INFO_1 = RECORD
                      pName : PTSTR;
                    END {  PORT_INFO_1};
PORT_INFO_1   = _PORT_INFO_1;
TPORT_INFO_1  = _PORT_INFO_1;
PPORT_INFO_1  = ^_PORT_INFO_1;

TYPE _PORT_INFO_2 = RECORD
                      pPortName : PChar;
                      pMonitorName : PChar;
                      pDescription : PChar;
                      fPortType : DWord;
                      Reserved : DWord;
                    END {  PORT_INFO_2};
PORT_INFO_2   = _PORT_INFO_2;
TPORT_INFO_2  = _PORT_INFO_2;
PPORT_INFO_2  = ^_PORT_INFO_2;

TYPE _PREVENT_MEDIA_REMOVAL = RECORD
                                PreventMediaRemoval : BOOLEAN;
                              END {  PREVENT_MEDIA_REMOVAL};
PREVENT_MEDIA_REMOVAL   = _PREVENT_MEDIA_REMOVAL;
TPREVENT_MEDIA_REMOVAL  = _PREVENT_MEDIA_REMOVAL;
PPREVENT_MEDIA_REMOVAL  = ^_PREVENT_MEDIA_REMOVAL;

TYPE tagPD = RECORD
               lStructSize : DWord;
               hwndOwner : HWND;
               hDevMode : THandle;
               hDevNames : THandle;
               hDC : HDC;
               Flags : DWord;
               nFromPage : Word;
               nToPage : Word;
               nMinPage : Word;
               nMaxPage : Word;
               nCopies : Word;
               hInstance : THANDLE;
               lCustData : DWord;
               lpfnPrintHook : PPRINTHOOKPROC;
               lpfnSetupHook : PSETUPHOOKPROC;
               lpPrintTemplateName : LPCTSTR;
               lpSetupTemplateName : LPCTSTR;
               hPrintTemplate : THandle;
               hSetupTemplate : THandle;
             END {tagPD};
PD   = tagPD;
TPD  = tagPD;
TPRINTDLG = tagPD;
LPPRINTDLG = ^tagPD;
PPRINTDLG = ^tagPD;
PPD  = ^tagPD;

TYPE _PRINTER_DEFAULTS = RECORD
                           pDatatype : PTSTR;
                           pDevMode : PDEVMODE;
                           DesiredAccess : ACCESS_MASK;
                         END {  PRINTER_DEFAULTS};
PRINTER_DEFAULTS   = _PRINTER_DEFAULTS;
TPRINTER_DEFAULTS  = _PRINTER_DEFAULTS;
PPRINTER_DEFAULTS  = ^_PRINTER_DEFAULTS;

TYPE _PRINTER_INFO_1 = RECORD
                         Flags : DWord;
                         pDescription : PTSTR;
                         pName : PTSTR;
                         pComment : PTSTR;
                       END {  PRINTER_INFO_1};
PRINTER_INFO_1   = _PRINTER_INFO_1;
TPRINTER_INFO_1  = _PRINTER_INFO_1;
PPRINTER_INFO_1  = ^_PRINTER_INFO_1;
LPPRINTER_INFO_1 = ^_PRINTER_INFO_1;


TYPE _PRINTER_INFO_2 = RECORD
                         pServerName : PTSTR;
                         pPrinterName : PTSTR;
                         pShareName : PTSTR;
                         pPortName : PTSTR;
                         pDriverName : PTSTR;
                         pComment : PTSTR;
                         pLocation : PTSTR;
                         pDevMode : PDEVMODE;
                         pSepFile : PTSTR;
                         pPrintProcessor : PTSTR;
                         pDatatype : PTSTR;
                         pParameters : PTSTR;
                         pSecurityDescriptor : PSECURITY_DESCRIPTOR;
                         Attributes : DWord;
                         Priority : DWord;
                         DefaultPriority : DWord;
                         StartTime : DWord;
                         UntilTime : DWord;
                         Status : DWord;
                         cJobs : DWord;
                         AveragePPM : DWord;
                       END {  PRINTER_INFO_2};
PRINTER_INFO_2   = _PRINTER_INFO_2;
TPRINTER_INFO_2  = _PRINTER_INFO_2;
PPRINTER_INFO_2  = ^_PRINTER_INFO_2;

TYPE _PRINTER_INFO_3 = RECORD
                         pSecurityDescriptor : PSECURITY_DESCRIPTOR;
                       END {  PRINTER_INFO_3};
PRINTER_INFO_3   = _PRINTER_INFO_3;
TPRINTER_INFO_3  = _PRINTER_INFO_3;
PPRINTER_INFO_3  = ^_PRINTER_INFO_3;

TYPE _PRINTER_INFO_4 = RECORD
                         pPrinterName : PTSTR;
                         pServerName : PTSTR;
                         Attributes : DWord;
                       END {  PRINTER_INFO_4};
PRINTER_INFO_4   = _PRINTER_INFO_4;
TPRINTER_INFO_4  = _PRINTER_INFO_4;
PPRINTER_INFO_4  = ^_PRINTER_INFO_4;

TYPE _PRINTER_INFO_5 = RECORD
                         pPrinterName : PTSTR;
                         pPortName : PTSTR;
                         Attributes : DWord;
                         DeviceNotSelectedTimeout : DWord;
                         TransmissionRetryTimeout : DWord;
                       END {  PRINTER_INFO_5};
PRINTER_INFO_5   = _PRINTER_INFO_5;
TPRINTER_INFO_5  = _PRINTER_INFO_5;
PPRINTER_INFO_5  = ^_PRINTER_INFO_5;

TYPE _PRINTER_NOTIFY_INFO_DATA = RECORD
                                   aType : Word;
                                   Field : Word;
                                   Reserved : DWord;
                                   Id : DWord;
                                   CASE integer OF
                                   0 : ( adwData : ARRAY [0..1] OF DWord );
                                   1 : ( cbBuf : DWord );
                                   2 : ( pBuf : POINTER );
                                 END {  PRINTER_NOTIFY_INFO_DATA};
PRINTER_NOTIFY_INFO_DATA   = _PRINTER_NOTIFY_INFO_DATA;
TPRINTER_NOTIFY_INFO_DATA  = _PRINTER_NOTIFY_INFO_DATA;
PPRINTER_NOTIFY_INFO_DATA  = ^_PRINTER_NOTIFY_INFO_DATA;

TYPE _PRINTER_NOTIFY_INFO = RECORD
                              Version : DWord;
                              Flags : DWord;
                              Count : DWord;
                              aData : ARRAY [0..0] OF PRINTER_NOTIFY_INFO_DATA;
                            END {  PRINTER_NOTIFY_INFO};
PRINTER_NOTIFY_INFO   = _PRINTER_NOTIFY_INFO;
TPRINTER_NOTIFY_INFO  = _PRINTER_NOTIFY_INFO;
PPRINTER_NOTIFY_INFO  = ^_PRINTER_NOTIFY_INFO;

TYPE _PRINTER_NOTIFY_OPTIONS_TYPE = RECORD
                                      aType : Word;
                                      Reserved0 : Word;
                                      Reserved1 : DWord;
                                      Reserved2 : DWord;
                                      Count : DWord;
                                      pFields : PWord;
                                    END {  PRINTER_NOTIFY_OPTIONS_TYPE};
PRINTER_NOTIFY_OPTIONS_TYPE   = _PRINTER_NOTIFY_OPTIONS_TYPE;
TPRINTER_NOTIFY_OPTIONS_TYPE  = _PRINTER_NOTIFY_OPTIONS_TYPE;
PPRINTER_NOTIFY_OPTIONS_TYPE  = ^_PRINTER_NOTIFY_OPTIONS_TYPE;
LPPRINTER_NOTIFY_OPTIONS_TYPE = ^_PRINTER_NOTIFY_OPTIONS_TYPE;


TYPE _PRINTER_NOTIFY_OPTIONS = RECORD
                                 Version : DWord;
                                 Flags : DWord;
                                 Count : DWord;
                                 pTypes : PPRINTER_NOTIFY_OPTIONS_TYPE;
                               END {  PRINTER_NOTIFY_OPTIONS};
PRINTER_NOTIFY_OPTIONS   = _PRINTER_NOTIFY_OPTIONS;
TPRINTER_NOTIFY_OPTIONS  = _PRINTER_NOTIFY_OPTIONS;
PPRINTER_NOTIFY_OPTIONS  = ^_PRINTER_NOTIFY_OPTIONS;
LPPRINTER_NOTIFY_OPTIONS = ^_PRINTER_NOTIFY_OPTIONS;


TYPE _PRINTPROCESSOR_INFO_1 = RECORD
                                pName : PTSTR;
                              END {  PRINTPROCESSOR_INFO_1};
PRINTPROCESSOR_INFO_1   = _PRINTPROCESSOR_INFO_1;
TPRINTPROCESSOR_INFO_1  = _PRINTPROCESSOR_INFO_1;
PPRINTPROCESSOR_INFO_1  = ^_PRINTPROCESSOR_INFO_1;

TYPE _PRIVILEGE_SET = RECORD
                        PrivilegeCount : DWord;
                        Control : DWord;
                        Privilege : ARRAY [0..ANYSIZE_ARRAY - 1] OF LUID_AND_ATTRIBUTES;
                      END {  PRIVILEGE_SET};
PRIVILEGE_SET   = _PRIVILEGE_SET;
TPRIVILEGE_SET  = _PRIVILEGE_SET;
PPRIVILEGE_SET  = ^_PRIVILEGE_SET;
LPPRIVILEGE_SET = ^_PRIVILEGE_SET;


TYPE _PROCESS_HEAP_ENTRY = RECORD
                             lpData : Pointer;
                             cbData : DWord;
                             cbOverhead : BYTE;
                             iRegionIndex : BYTE;
                             wFlags : Word;
                             CASE Integer OF
                                0 : ( hMem : THandle );
                                1 : (   dwCommittedSize : DWord;
                                        dwUnCommittedSize : DWord;
                                        lpFirstBlock : Pointer;
                                        lpLastBlock : Pointer );
                           END {  PROCESS_HEAP_ENTRY};
PROCESS_HEAP_ENTRY   = _PROCESS_HEAP_ENTRY;
TPROCESS_HEAP_ENTRY  = _PROCESS_HEAP_ENTRY;
TPROCESSHEAPENTRY  = _PROCESS_HEAP_ENTRY;
PPROCESS_HEAP_ENTRY  = ^_PROCESS_HEAP_ENTRY;
LPPROCESS_HEAP_ENTRY = ^_PROCESS_HEAP_ENTRY;


TYPE _PROCESS_INFORMATION = RECORD
                              hProcess : THandle;
                              hThread : THandle;
                              dwProcessId : DWord;
                              dwThreadId : DWord;
                            END {  PROCESS_INFORMATION};
PROCESS_INFORMATION   = _PROCESS_INFORMATION;
TPROCESS_INFORMATION  = _PROCESS_INFORMATION;
TPROCESSINFORMATION   = _PROCESS_INFORMATION;
PPROCESS_INFORMATION  = ^_PROCESS_INFORMATION;
LPPROCESS_INFORMATION = ^_PROCESS_INFORMATION;


LPFNPSPCALLBACK = FUNCTION ( Wnd : HWND;U : UINT;P : POINTER ) : UINT;{stdcall;}

TYPE _PROPSHEETPAGE = RECORD
                        dwSize : DWord;
                        dwFlags : DWord;
                        Instance : THANDLE;
                        u1 : RECORD
                           pszTemplate : LPCTSTR;
                           pResource : PCDLGTEMPLATE;
                        END {u1};
                        u2 : RECORD
                           icon : hICon;
                           pszIcon : LPCTSTR;
                        END {u2};
                        pszTitle : LPCTSTR;
                        pfnDlgProc : DLGPROC;
                        alParam : LPARAM32;
                        pfnCallback : LPFNPSPCALLBACK;
                        pcRefParent : pUINT;
                      END {  PROPSHEETPAGE};
PROPSHEETPAGE   = _PROPSHEETPAGE;
TPROPSHEETPAGE  = _PROPSHEETPAGE;
PPROPSHEETPAGE  = ^_PROPSHEETPAGE;
LPPROPSHEETPAGE = ^_PROPSHEETPAGE;
LPCPROPSHEETPAGE = ^_PROPSHEETPAGE;
PCPROPSHEETPAGE = LPCPROPSHEETPAGE;

TYPE {!!!!!}
HPROPSHEETPAGE  = RECORD
END;

TYPE _PROPSHEETHEADER = RECORD
                        dwSize : DWord;
                        dwFlags : DWord;
                        hwndParent : HWND;
                        Instance : THANDLE;
                        u1 : RECORD
                           icon : hICon;
                           pszIcon : LPCTSTR;
                        END {u1};

                        pszCaption : LPCTSTR;
                        nPages : UINT;

                        u2 : RECORD
                           nStartPage : UINT;
                           pStartPage : LPCTSTR;
                        END {u2};

                        u3 : RECORD
                           ppsp : LPCPROPSHEETPAGE;
                           phpage : ^HPROPSHEETPAGE;
                        END {u3};
                        pfnCallback : LPFNPSPCALLBACK{!!!!!PFNPROPSHEETCALLBACK};
                      END {  PROPSHEETHEADER};
PROPSHEETHEADER   = _PROPSHEETHEADER;
TPROPSHEETHEADER  = _PROPSHEETHEADER;
PPROPSHEETHEADER  = ^_PROPSHEETHEADER;
LPPROPSHEETHEADER = ^_PROPSHEETHEADER;
LPCPROPSHEETHEADER = ^_PROPSHEETHEADER;
PCPROPSHEETHEADER = ^_PROPSHEETHEADER;

{+// PropertySheet callbacks */ }
LPFNADDPROPSHEETPAGE = FUNCTION ( H : HPROPSHEETPAGE; L : LPARAM32 ) : WinBool;{stdcall;}
LPFNADDPROPSHEETPAGES = FUNCTION ( P : POINTER; pfn : LPFNADDPROPSHEETPAGE; L : LPARAM32 ) : WinBool;{stdcall;}

TYPE _PROTOCOL_INFO = RECORD
                        dwServiceFlags : DWord;
                        iAddressFamily : Integer;
                        iMaxSockAddr : Integer;
                        iMinSockAddr : Integer;
                        iSocketType : Integer;
                        iProtocol : Integer;
                        dwMessageSize : DWord;
                        lpProtocol : PTSTR;
                      END {  PROTOCOL_INFO};
PROTOCOL_INFO   = _PROTOCOL_INFO;
TPROTOCOL_INFO  = _PROTOCOL_INFO;
PPROTOCOL_INFO  = ^_PROTOCOL_INFO;

TYPE _PROVIDOR_INFO_1 = RECORD
                          pName : PTSTR;
                          PENVIRONMENT : PTSTR;
                          PDLLNAME : PTSTR ;
                        END {  PROVIDOR_INFO_1};
PROVIDOR_INFO_1   = _PROVIDOR_INFO_1;
TPROVIDOR_INFO_1  = _PROVIDOR_INFO_1;
PPROVIDOR_INFO_1  = ^_PROVIDOR_INFO_1;

TYPE _PSHNOTIFY = RECORD
                    hdr : NMHDR;
                    Param : LPARAM32;
                  END {  PSHNOTIFY};
PSHNOTIFY   = _PSHNOTIFY;
TPSHNOTIFY  = _PSHNOTIFY;
PPSHNOTIFY  = ^_PSHNOTIFY;
LPPSHNOTIFY = ^_PSHNOTIFY;


TYPE _punctuation = RECORD
                      iSize : Word;
                      szPunctuation : PChar;
                    END {  punctuation};
punctuation   = _punctuation;
Tpunctuation  = _punctuation;
Ppunctuation  = ^_punctuation;
LPpunctuation = ^_punctuation;


TYPE _QUERY_SERVICE_CONFIG = RECORD
                               dwServiceType : DWord;
                               dwStartType : DWord;
                               dwErrorControl : DWord;
                               lpBinaryPathName : PTSTR;
                               lpLoadOrderGroup : PTSTR;
                               dwTagId : DWord;
                               lpDependencies : PTSTR;
                               lpServiceStartName : PTSTR;
                               lpDisplayName : PTSTR;
                             END {  QUERY_SERVICE_CONFIG};
QUERY_SERVICE_CONFIG   = _QUERY_SERVICE_CONFIG;
TQUERY_SERVICE_CONFIG  = _QUERY_SERVICE_CONFIG;
PQUERY_SERVICE_CONFIG  = ^_QUERY_SERVICE_CONFIG;
LPQUERY_SERVICE_CONFIG = ^_QUERY_SERVICE_CONFIG;


TYPE _QUERY_SERVICE_LOCK_STATUS = RECORD
                                    fIsLocked : DWord;
                                    lpLockOwner : PTSTR;
                                    dwLockDuration : DWord;
                                  END {  QUERY_SERVICE_LOCK_STATUS};
QUERY_SERVICE_LOCK_STATUS   = _QUERY_SERVICE_LOCK_STATUS;
TQUERY_SERVICE_LOCK_STATUS  = _QUERY_SERVICE_LOCK_STATUS;
PQUERY_SERVICE_LOCK_STATUS  = ^_QUERY_SERVICE_LOCK_STATUS;
LPQUERY_SERVICE_LOCK_STATUS = ^_QUERY_SERVICE_LOCK_STATUS;

{==============================================}
{==============================================}

TYPE _RASAMB = RECORD
                 dwSize : DWord;
                 dwError : DWord;
                 SZNETBIOSERROR : ARRAY [0..NETBIOS_NAME_LEN] OF TCHAR;
                 bLana : BYTE;
               END {  RASAMB};
RASAMB   = _RASAMB;
TRASAMB  = _RASAMB;
PRASAMB  = ^_RASAMB;
LPRASAMB = ^_RASAMB;


TYPE _RASCONN = RECORD
                  dwSize : DWord;
                  hrasconn : HRASCONN;
                  SZENTRYNAME : ARRAY [0..RAS_MAXENTRYNAME] OF TCHAR;
                  SZDEVICETYPE : ARRAY [0..RAS_MAXDEVICETYPE] OF CHAR;
                  SZDEVICENAME : ARRAY [0..RAS_MAXDEVICENAME] OF CHAR;
                END {  RASCONN};
RASCONN   = _RASCONN;
TRASCONN  = _RASCONN;
PRASCONN  = ^_RASCONN;
LPRASCONN = ^_RASCONN;


TYPE _RASCONNSTATUS = RECORD
                        dwSize : DWord;
                        arasconnstate : RASCONNSTATE;
                        dwError : DWord;
                        SZDEVICETYPE : ARRAY [0..RAS_MAXDEVICETYPE] OF TCHAR;
                        SZDEVICENAME : ARRAY [0..RAS_MAXDEVICENAME] OF TCHAR;
                      END {  RASCONNSTATUS};
RASCONNSTATUS   = _RASCONNSTATUS;
TRASCONNSTATUS  = _RASCONNSTATUS;
PRASCONNSTATUS  = ^_RASCONNSTATUS;
LPRASCONNSTATUS = ^_RASCONNSTATUS;


TYPE _RASDIALEXTENSIONS = RECORD
                            dwSize : DWord;
                            dwfOptions : DWord;
                            hwndParent : HWND;
                            reserved : DWord;
                          END {  RASDIALEXTENSIONS};
RASDIALEXTENSIONS   = _RASDIALEXTENSIONS;
TRASDIALEXTENSIONS  = _RASDIALEXTENSIONS;
PRASDIALEXTENSIONS  = ^_RASDIALEXTENSIONS;

TYPE _RASDIALPARAMS = RECORD
                        dwSize : DWord;
                        SZENTRYNAME : ARRAY [0..RAS_MAXENTRYNAME] OF TCHAR;
                        szPhoneNumber : ARRAY [0..RAS_MaxPhoneNumber] OF TCHAR;
                        SZCALLBACKNUMBER : ARRAY [0..RAS_MAXCALLBACKNUMBER] OF TCHAR;
                        SZUSERNAME : ARRAY [0..UNLEN] OF TCHAR;
                        SZPASSWORD : ARRAY [0..PWLEN] OF TCHAR;
                        SZDOMAIN : ARRAY [0..DNLEN + 1] OF TCHAR;
                      END {  RASDIALPARAMS};
RASDIALPARAMS   = _RASDIALPARAMS;
TRASDIALPARAMS  = _RASDIALPARAMS;
PRASDIALPARAMS  = ^_RASDIALPARAMS;

TYPE _RASENTRYNAME = RECORD
                       dwSize : DWord;
                       SZENTRYNAME : ARRAY [0..RAS_MAXENTRYNAME] OF TCHAR;
                     END {  RASENTRYNAME};
TYPE RASENTRYNAME   = _RASENTRYNAME;
TYPE TRASENTRYNAME  = _RASENTRYNAME;
TYPE PRASENTRYNAME  = ^_RASENTRYNAME;
TYPE LPRASENTRYNAME = ^_RASENTRYNAME;


TYPE _RASPPPIP = RECORD
                   dwSize : DWord;
                   dwError : DWord;
                   SZIPADDRESS : ARRAY [0..RAS_MAXIPADDRESS] OF TCHAR;
                 END {  RASPPPIP};
TYPE RASPPPIP   = _RASPPPIP;
TYPE TRASPPPIP  = _RASPPPIP;
TYPE PRASPPPIP  = ^_RASPPPIP;

TYPE _RASPPPIPX = RECORD
                    dwSize : DWord;
                    dwError : DWord;
                    szIpxAddress : ARRAY [0.. RAS_MaxIpxAddress] OF TCHAR;
                  END {  RASPPPIPX};
TYPE RASPPPIPX   = _RASPPPIPX;
TYPE TRASPPPIPX  = _RASPPPIPX;
TYPE PRASPPPIPX  = ^_RASPPPIPX;

TYPE _RASPPPNBF = RECORD
                    dwSize : DWord;
                    dwError : DWord;
                    dwNetBiosError : DWord;
                    SZNETBIOSERROR : ARRAY [0..NETBIOS_NAME_LEN] OF TCHAR;
                    SZWORKSTATIONNAME : ARRAY [0..NETBIOS_NAME_LEN] OF TCHAR;
                    bLana : BYTE;
                  END {  RASPPPNBF};
TYPE RASPPPNBF   = _RASPPPNBF;
TYPE TRASPPPNBF  = _RASPPPNBF;
TYPE PRASPPPNBF  = ^_RASPPPNBF;

TYPE _RASTERIZER_STATUS = RECORD
                            nSize : SmallInt;
                            wFlags : SmallInt;
                            nLanguageID : SmallInt;
                          END {  RASTERIZER_STATUS};
TYPE RASTERIZER_STATUS   = _RASTERIZER_STATUS;
TYPE TRASTERIZER_STATUS  = _RASTERIZER_STATUS;
TYPE PRASTERIZER_STATUS  = ^_RASTERIZER_STATUS;
TYPE LPRASTERIZER_STATUS = ^_RASTERIZER_STATUS;


TYPE _REASSIGN_BLOCKS = RECORD
                          Reserved : Word;
                          Count : Word;
                          BlockNumber : ARRAY [0..0] OF DWord;
                        END {  REASSIGN_BLOCKS};
TYPE REASSIGN_BLOCKS   = _REASSIGN_BLOCKS;
TYPE TREASSIGN_BLOCKS  = _REASSIGN_BLOCKS;
TYPE PREASSIGN_BLOCKS  = ^_REASSIGN_BLOCKS;

TYPE _REMOTE_NAME_INFO = RECORD
                           lpUniversalName : PTSTR;
                           lpConnectionName : PTSTR;
                           lpRemainingPath : PTSTR;
                         END {  REMOTE_NAME_INFO};
TYPE REMOTE_NAME_INFO   = _REMOTE_NAME_INFO;
TYPE TREMOTE_NAME_INFO  = _REMOTE_NAME_INFO;
TYPE PREMOTE_NAME_INFO  = ^_REMOTE_NAME_INFO;
(*
{+// }
{-TODO: OLE }
{-typedef struct _reobject { }
{-DWord cbStruct; }
{-Longint cp; }
{-CLSID clsid; }
{-LPOLEOBJECT poleobj; }
{-LPSTORAGE pstg; }
{-LPOLECLIENTSITE polesite; }
{-SIZEL sizel; }
{-DWord dvaspect; }
{-DWord dwFlags; }
{-DWord dwUser; }
{-} REOBJECT; }
{= }
 *)

TYPE _repastespecial = RECORD
                         dwAspect : DWord;
                         dwParam : DWord;
                       END {  repastespecial};
repastespecial   = _repastespecial;
Trepastespecial  = _repastespecial;
Prepastespecial  = ^_repastespecial;

TYPE _reqresize = RECORD
                    nmhdr : NMHDR;
                    rc : RECT;
                  END {  reqresize};
reqresize   = _reqresize;
Treqresize  = _reqresize;
Preqresize  = ^_reqresize;

TYPE _RGNDATAHEADER = RECORD
                        dwSize : DWord;
                        iType : DWord;
                        nCount : DWord;
                        nRgnSize : DWord;
                        rcBound : RECT;
                      END {  RGNDATAHEADER};
RGNDATAHEADER   = _RGNDATAHEADER;
TRGNDATAHEADER  = _RGNDATAHEADER;
PRGNDATAHEADER  = ^_RGNDATAHEADER;

TYPE _RGNDATA = RECORD
                  rdh : RGNDATAHEADER;
                  Buffer : ARRAY [0..0] OF Char;
                END {  RGNDATA};
RGNDATA   = _RGNDATA;
TRGNDATA  = _RGNDATA;
PRGNDATA  = ^_RGNDATA;
LPRGNDATA = ^_RGNDATA;


TYPE tagSCROLLINFO = RECORD
                       cbSize : Word;
                       fMask : Word;
                       nMin : Integer;
                       nMax : Integer;
                       nPage : Word;
                       nPos : Integer;
                       nTrackPos : Integer;
                     END {tagSCROLLINFO};
SCROLLINFO   = tagSCROLLINFO;
TSCROLLINFO  = tagSCROLLINFO;
PSCROLLINFO  = ^tagSCROLLINFO;
LPSCROLLINFO = ^tagSCROLLINFO;

TYPE _SECURITY_ATTRIBUTES = RECORD
                              nLength : DWord;
                              lpSecurityDescriptor : POINTER;
                              bInheritHandle : WINBOOL;
                            END {  SECURITY_ATTRIBUTES};
TYPE SECURITY_ATTRIBUTES   = _SECURITY_ATTRIBUTES;
TYPE TSECURITY_ATTRIBUTES  = _SECURITY_ATTRIBUTES;
TYPE TSECURITYATTRIBUTES  = _SECURITY_ATTRIBUTES;
TYPE PSECURITY_ATTRIBUTES  = ^_SECURITY_ATTRIBUTES;
TYPE PSECURITYATTRIBUTES  = ^_SECURITY_ATTRIBUTES;
TYPE LPSECURITY_ATTRIBUTES = ^_SECURITY_ATTRIBUTES;

SECURITY_INFORMATION = DWord;
TSECURITY_INFORMATION = SECURITY_INFORMATION;
PSECURITY_INFORMATION = ^SECURITY_INFORMATION;

TYPE _selchange = RECORD
                    nmhdr : NMHDR;
                    chrg : CHARRANGE;
                    seltyp : Word;
                  END {  selchange};
selchange   = _selchange;
Tselchange  = _selchange;
Pselchange  = ^_selchange;

TYPE tagSERIALKEYS = RECORD
                       cbSize : DWord;
                       dwFlags : DWord;
                       lpszActivePort : PChar;
                       lpszPort : PChar;
                       iBaudRate : DWord;
                       iPortState : DWord;
                     END {tagSERIALKEYS};
SERIALKEYS   = tagSERIALKEYS;
TSERIALKEYS  = tagSERIALKEYS;
PSERIALKEYS  = ^tagSERIALKEYS;
LPSERIALKEYS = ^tagSERIALKEYS;


TYPE _SERVICE_TABLE_ENTRY = RECORD
                              lpServiceName : PTSTR;
                              lpServiceProc : PSERVICE_MAIN_FUNCTION;
                            END {  SERVICE_TABLE_ENTRY};
SERVICE_TABLE_ENTRY   = _SERVICE_TABLE_ENTRY;
TSERVICE_TABLE_ENTRY  = _SERVICE_TABLE_ENTRY;
PSERVICE_TABLE_ENTRY  = ^_SERVICE_TABLE_ENTRY;
LPSERVICE_TABLE_ENTRY = ^_SERVICE_TABLE_ENTRY;


TYPE _SERVICE_TYPE_VALUE_ABS = RECORD
                                 dwNameSpace : DWord;
                                 dwValueType : DWord;
                                 dwValueSize : DWord;
                                 lpValueName : PTSTR;
                                 lpValue : Pointer;
                               END {  SERVICE_TYPE_VALUE_ABS};
SERVICE_TYPE_VALUE_ABS   = _SERVICE_TYPE_VALUE_ABS;
TSERVICE_TYPE_VALUE_ABS  = _SERVICE_TYPE_VALUE_ABS;
PSERVICE_TYPE_VALUE_ABS  = ^_SERVICE_TYPE_VALUE_ABS;

TYPE _SERVICE_TYPE_INFO_ABS = RECORD
                                lpTypeName : PTSTR;
                                dwValueCount : DWord;
                                Values : ARRAY [0..0] OF SERVICE_TYPE_VALUE_ABS;
                              END {  SERVICE_TYPE_INFO_ABS};
SERVICE_TYPE_INFO_ABS   = _SERVICE_TYPE_INFO_ABS;
TSERVICE_TYPE_INFO_ABS  = _SERVICE_TYPE_INFO_ABS;
PSERVICE_TYPE_INFO_ABS  = ^_SERVICE_TYPE_INFO_ABS;

TYPE _SESSION_BUFFER = RECORD
                         lsn : Byte;
                         state : Byte;
                         local_name : ARRAY [0..NCBNAMSZ - 1] OF Byte;
                         remote_name : ARRAY [0..NCBNAMSZ - 1] OF Byte;
                         rcvs_outstanding : Byte;
                         sends_outstanding : Byte;
                       END {  SESSION_BUFFER};
SESSION_BUFFER   = _SESSION_BUFFER;
TSESSION_BUFFER  = _SESSION_BUFFER;
PSESSION_BUFFER  = ^_SESSION_BUFFER;

TYPE _SESSION_HEADER = RECORD
                         sess_name : Byte;
                         num_sess : Byte;
                         rcv_dg_outstanding : Byte;
                         rcv_any_outstanding : Byte;
                       END {  SESSION_HEADER};
SESSION_HEADER   = _SESSION_HEADER;
TSESSION_HEADER  = _SESSION_HEADER;
PSESSION_HEADER  = ^_SESSION_HEADER;

TYPE _SET_PARTITION_INFORMATION = RECORD
                                    PartitionType : BYTE;
                                  END {  SET_PARTITION_INFORMATION};
SET_PARTITION_INFORMATION   = _SET_PARTITION_INFORMATION;
TSET_PARTITION_INFORMATION  = _SET_PARTITION_INFORMATION;
PSET_PARTITION_INFORMATION  = ^_SET_PARTITION_INFORMATION;

TYPE tagSHCONTF = RECORD
                   SHCONTF_FOLDERS : INTEGER {VALUE 32};
                   SHCONTF_NONFOLDERS : INTEGER {VALUE 64};
                   SHCONTF_INCLUDEHIDDEN : INTEGER {VALUE 128};
                   END;
SHCONTF = tagSHCONTF;
PSHCONTF = ^tagSHCONTF;

TYPE _SHFILEINFO = RECORD
                     hIcon : HICON;
                     iIcon : Integer;
                     dwAttributes : DWord;
                     szDisplayName : ARRAY [0..MAX_PATH - 1] OF Char;
                     szTypeName : ARRAY [0..79] OF Char;
                   END {  SHFILEINFO};
SHFILEINFO   = _SHFILEINFO;
TSHFILEINFO  = _SHFILEINFO;
PSHFILEINFO  = ^_SHFILEINFO;

TYPE FILEOP_FLAGS = Word;

TYPE _SHFILEOPSTRUCT = RECORD
                         hwnd : HWND;
                         wFunc : Word;
                         pFrom : PChar;
                         pTo : PChar;
                         fFlags : FILEOP_FLAGS;
                         fAnyOperationsAborted : WINBOOL;
                         hNameMappings : POINTER;
                         lpszProgressTitle : PChar;
                       END {  SHFILEOPSTRUCT};
TYPE SHFILEOPSTRUCT   = _SHFILEOPSTRUCT;
TYPE TSHFILEOPSTRUCT  = _SHFILEOPSTRUCT;
TYPE PSHFILEOPSTRUCT  = ^_SHFILEOPSTRUCT;
TYPE LPSHFILEOPSTRUCT = ^_SHFILEOPSTRUCT;

TYPE tagSHGDN = RECORD
                SHGDN_NORMAL : INTEGER {VALUE 0};
                SHGDN_INFOLDER : INTEGER {VALUE 1};
                SHGDN_FORPARSING  : INTEGER {VALUE $8000};
                END;

TYPE _SHNAMEMAPPING = RECORD
                        pszOldPath : PChar;
                        pszNewPath : PChar;
                        cchOldPath : Integer;
                        cchNewPath : Integer;
                      END {  SHNAMEMAPPING};
TYPE SHNAMEMAPPING   = _SHNAMEMAPPING;
TYPE TSHNAMEMAPPING  = _SHNAMEMAPPING;
TYPE PSHNAMEMAPPING  = ^_SHNAMEMAPPING;
TYPE LPSHNAMEMAPPING = ^_SHNAMEMAPPING;

TYPE _SID_AND_ATTRIBUTES = RECORD
                             Sid : PSID;
                             Attributes : DWord;
                           END {  SID_AND_ATTRIBUTES};
TYPE SID_AND_ATTRIBUTES   = _SID_AND_ATTRIBUTES;
TYPE TSID_AND_ATTRIBUTES  = _SID_AND_ATTRIBUTES;
TYPE PSID_AND_ATTRIBUTES  = ^_SID_AND_ATTRIBUTES;
TYPE LPSID_AND_ATTRIBUTES = ^_SID_AND_ATTRIBUTES;

TYPE SID_AND_ATTRIBUTES_ARRAY = ARRAY [0..ANYSIZE_ARRAY - 1] OF SID_AND_ATTRIBUTES;
TYPE PSID_AND_ATTRIBUTES_ARRAY = ^SID_AND_ATTRIBUTES_ARRAY;

TYPE PSINGLE_LIST_ENTRY  = ^_SINGLE_LIST_ENTRY;
     _SINGLE_LIST_ENTRY = RECORD
                            Next : PSINGLE_LIST_ENTRY;
                          END {  SINGLE_LIST_ENTRY};
SINGLE_LIST_ENTRY   = _SINGLE_LIST_ENTRY;
TSINGLE_LIST_ENTRY  = _SINGLE_LIST_ENTRY;

TYPE tagSOUNDSENTRY = RECORD
                        cbSize : Word;
                        dwFlags : DWord;
                        iFSTextEffect : DWord;
                        iFSTextEffectMSec : DWord;
                        iFSTextEffectColorBits : DWord;
                        iFSGrafEffect : DWord;
                        iFSGrafEffectMSec : DWord;
                        iFSGrafEffectColor : DWord;
                        iWindowsEffect : DWord;
                        iWindowsEffectMSec : DWord;
                        lpszWindowsEffectDLL : PTSTR;
                        iWindowsEffectOrdinal : DWord;
                      END {tagSOUNDSENTRY};
TYPE SOUNDSENTRY   = tagSOUNDSENTRY;
TYPE TSOUNDSENTRY  = tagSOUNDSENTRY;
TYPE PSOUNDSENTRY  = ^tagSOUNDSENTRY;
TYPE LPSOUNDSENTRY = ^tagSOUNDSENTRY;


TYPE _STARTUPINFO = RECORD
                      cb : DWord;
                      lpReserved : PTSTR;
                      lpDesktop : PTSTR;
                      lpTitle : PTSTR;
                      dwX : DWord;
                      dwY : DWord;
                      dwXSize : DWord;
                      dwYSize : DWord;
                      dwXCountChars : DWord;
                      dwYCountChars : DWord;
                      dwFillAttribute : DWord;
                      dwFlags : DWord;
                      wShowWindow : Word;
                      cbReserved2 : Word;
                      lpReserved2 : PBYTE;
                      hStdInput : THandle;
                      hStdOutput : THandle;
                      hStdError : THandle;
                    END {  STARTUPINFO};
TYPE STARTUPINFO   = _STARTUPINFO;
TYPE TSTARTUPINFO  = _STARTUPINFO;
TYPE PSTARTUPINFO  = ^_STARTUPINFO;
TYPE LPSTARTUPINFO = ^_STARTUPINFO;

TYPE tagSTICKYKEYS = RECORD
                       cbSize : DWord;
                       dwFlags : DWord;
                     END {tagSTICKYKEYS};
TYPE STICKYKEYS   = tagSTICKYKEYS;
TYPE TSTICKYKEYS  = tagSTICKYKEYS;
TYPE PSTICKYKEYS  = ^tagSTICKYKEYS;
TYPE LPSTICKYKEYS = ^tagSTICKYKEYS;


TYPE _STRRET = RECORD
                 uType : Word;
                 CASE Integer OF
                 0 : ( pOleStr : LPCTSTR );
                 1 : ( uOffset : Word );
                 2 : ( cStr : ARRAY [0..MAX_PATH - 1] OF Char );
               END {  STRRET};
TYPE STRRET   = _STRRET;
TYPE TSTRRET  = _STRRET;
TYPE PSTRRET  = ^_STRRET;
TYPE LPSTRRET = ^_STRRET;


TYPE _tagSTYLEBUF = RECORD
                      dwStyle : DWord;
                      szDescription : ARRAY [0..31] OF Char;
                    END {  tagSTYLEBUF};
TYPE tagSTYLEBUF   = _tagSTYLEBUF;
TYPE TtagSTYLEBUF  = _tagSTYLEBUF;
TYPE PtagSTYLEBUF  = ^_tagSTYLEBUF;
TYPE LPtagSTYLEBUF = ^_tagSTYLEBUF;


TYPE tagSTYLESTRUCT = RECORD
                        styleOld : DWord;
                        styleNew : DWord;
                      END {tagSTYLESTRUCT};
TYPE STYLESTRUCT   = tagSTYLESTRUCT;
TYPE TSTYLESTRUCT  = tagSTYLESTRUCT;
TYPE PSTYLESTRUCT  = ^tagSTYLESTRUCT;
TYPE LPSTYLESTRUCT = ^tagSTYLESTRUCT;


TYPE _SYSTEM_AUDIT_ACE = RECORD
                           Header : ACE_HEADER;
                           Mask : ACCESS_MASK;
                           SidStart : DWord;
                         END {  SYSTEM_AUDIT_ACE};
TYPE SYSTEM_AUDIT_ACE   = _SYSTEM_AUDIT_ACE;
TYPE TSYSTEM_AUDIT_ACE  = _SYSTEM_AUDIT_ACE;
TYPE PSYSTEM_AUDIT_ACE  = ^_SYSTEM_AUDIT_ACE;
TYPE LPSYSTEM_AUDIT_ACE = ^_SYSTEM_AUDIT_ACE;


TYPE _SYSTEM_INFO = RECORD
     CASE Integer OF
      0 : (
        dwOemId : DWORD );
      1 : (
        wProcessorArchitecture : Word;
        wReserved : Word;
        dwPageSize : DWORD;
        lpMinimumApplicationAddress : Pointer;
        lpMaximumApplicationAddress : Pointer;
        dwActiveProcessorMask : DWORD;
        dwNumberOfProcessors : DWORD;
        dwProcessorType : DWORD;
        dwAllocationGranularity : DWORD;
        wProcessorLevel : Word;
        wProcessorRevision : Word );
                    END {  SYSTEM_INFO};
TYPE SYSTEM_INFO   = _SYSTEM_INFO;
TYPE TSYSTEM_INFO  = _SYSTEM_INFO;
TYPE PSYSTEM_INFO  = ^_SYSTEM_INFO;
TYPE LPSYSTEM_INFO = ^_SYSTEM_INFO;


TYPE _SYSTEM_POWER_STATUS = RECORD
                              ACLineStatus : BYTE;
                              BatteryFlag : BYTE;
                              BatteryLifePercent : BYTE;
                              Reserved1 : BYTE;
                              BatteryLifeTime : DWord;
                              BatteryFullLifeTime : DWord;
                            END {  SYSTEM_POWER_STATUS};
TYPE SYSTEM_POWER_STATUS   = _SYSTEM_POWER_STATUS;
TYPE TSYSTEM_POWER_STATUS  = _SYSTEM_POWER_STATUS;
TYPE PSYSTEM_POWER_STATUS  = ^_SYSTEM_POWER_STATUS;
TYPE LPSYSTEM_POWER_STATUS = ^_SYSTEM_POWER_STATUS;

TYPE _TAPE_ERASE = RECORD
                     aType : WORD;
                   END;
TAPE_ERASE = _TAPE_ERASE;
PTAPE_ERASE = ^_TAPE_ERASE;

TYPE _TAPE_GET_DRIVE_PARAMETERS = RECORD
                                    ECC : BOOLEAN;
                                    Compression : BOOLEAN;
                                    DataPadding : BOOLEAN;
                                    ReportSetmarks : BOOLEAN;
                                    DefaultBlockSize : ULONG;
                                    MaximumBlockSize : ULONG;
                                    MinimumBlockSize : ULONG;
                                    MaximumPartitionCount : ULONG;
                                    FeaturesLow : ULONG;
                                    FeaturesHigh : ULONG;
                                    EOTWarningZoneSize : ULONG;
                                  END {  TAPE_GET_DRIVE_PARAMETERS};
TYPE TAPE_GET_DRIVE_PARAMETERS   = _TAPE_GET_DRIVE_PARAMETERS;
TYPE TTAPE_GET_DRIVE_PARAMETERS  = _TAPE_GET_DRIVE_PARAMETERS;
TYPE PTAPE_GET_DRIVE_PARAMETERS  = ^_TAPE_GET_DRIVE_PARAMETERS;

TYPE _TAPE_GET_MEDIA_PARAMETERS = RECORD
                                    Capacity : LARGE_INTEGER;
                                    Remaining : LARGE_INTEGER;
                                    BlockSize : DWord;
                                    PartitionCount : DWord;
                                    WriteProtected : BOOLEAN;
                                  END {  TAPE_GET_MEDIA_PARAMETERS};
TAPE_GET_MEDIA_PARAMETERS   = _TAPE_GET_MEDIA_PARAMETERS;
TTAPE_GET_MEDIA_PARAMETERS  = _TAPE_GET_MEDIA_PARAMETERS;
PTAPE_GET_MEDIA_PARAMETERS  = ^_TAPE_GET_MEDIA_PARAMETERS;

TYPE _TAPE_GET_POSITION = RECORD
                            aType : ULONG;
                            Partition : ULONG;
                            OffsetLow : ULONG;
                            OffsetHigh : ULONG;
                          END {  TAPE_GET_POSITION};
TAPE_GET_POSITION   = _TAPE_GET_POSITION;
TTAPE_GET_POSITION  = _TAPE_GET_POSITION;
PTAPE_GET_POSITION  = ^_TAPE_GET_POSITION;

TYPE _TAPE_PREPARE = RECORD
                       Operation : ULONG;
                     END {  TAPE_PREPARE};
TAPE_PREPARE   = _TAPE_PREPARE;
TTAPE_PREPARE  = _TAPE_PREPARE;
PTAPE_PREPARE  = ^_TAPE_PREPARE;

TYPE _TAPE_SET_DRIVE_PARAMETERS = RECORD
                                    ECC : BOOLEAN;
                                    Compression : BOOLEAN;
                                    DataPadding : BOOLEAN;
                                    ReportSetmarks : BOOLEAN;
                                    EOTWarningZoneSize : ULONG;
                                  END {  TAPE_SET_DRIVE_PARAMETERS};
TAPE_SET_DRIVE_PARAMETERS   = _TAPE_SET_DRIVE_PARAMETERS;
TTAPE_SET_DRIVE_PARAMETERS  = _TAPE_SET_DRIVE_PARAMETERS;
PTAPE_SET_DRIVE_PARAMETERS  = ^_TAPE_SET_DRIVE_PARAMETERS;

TYPE _TAPE_SET_MEDIA_PARAMETERS = RECORD
                                    BlockSize : ULONG;
                                  END {  TAPE_SET_MEDIA_PARAMETERS};
TAPE_SET_MEDIA_PARAMETERS   = _TAPE_SET_MEDIA_PARAMETERS;
TTAPE_SET_MEDIA_PARAMETERS  = _TAPE_SET_MEDIA_PARAMETERS;
PTAPE_SET_MEDIA_PARAMETERS  = ^_TAPE_SET_MEDIA_PARAMETERS;

TYPE _TAPE_SET_POSITION = RECORD
                            Method : ULONG;
                            Partition : ULONG;
                            OffsetLow : ULONG;
                            OffsetHigh : ULONG;
                          END {  TAPE_SET_POSITION};
TAPE_SET_POSITION   = _TAPE_SET_POSITION;
TTAPE_SET_POSITION  = _TAPE_SET_POSITION;
PTAPE_SET_POSITION  = ^_TAPE_SET_POSITION;

TYPE _TAPE_WRITE_MARKS = RECORD
                           aType : ULONG;
                           Count : ULONG;
                         END {  TAPE_WRITE_MARKS};
TAPE_WRITE_MARKS   = _TAPE_WRITE_MARKS;
TTAPE_WRITE_MARKS  = _TAPE_WRITE_MARKS;
PTAPE_WRITE_MARKS  = ^_TAPE_WRITE_MARKS;

TYPE TBADDBITMAP = RECORD
             hInst : THANDLE;
             nID : Word;
           END {TBADDBITMAP};
PTBADDBITMAP = ^TBADDBITMAP;
LPTBADDBITMAP = ^TBADDBITMAP;


TYPE _TBBUTTON = RECORD
                   iBitmap : Integer;
                   idCommand : Integer;
                   fsState : BYTE;
                   fsStyle : BYTE;
                   dwData : DWord;
                   iString : Integer;
                 END {  TBBUTTON};
TYPE TBBUTTON   = _TBBUTTON;
TYPE TTBBUTTON  = _TBBUTTON;
TYPE PTBBUTTON  = ^_TBBUTTON;
TYPE LPTBBUTTON = ^_TBBUTTON;
TYPE PCTBBUTTON = LPTBBUTTON;

TYPE TBNOTIFY = RECORD
             hdr : NMHDR;
             iItem : Integer;
             tbButton : TBBUTTON;
             cchText : Integer;
             pszText : PTSTR;
           END {TBNOTIFY};
PTBNOTIFY = ^TBNOTIFY;
LPTBNOTIFY = ^TBNOTIFY;

TYPE TBSAVEPARAMS = RECORD
             hkr : HKEY;
             pszSubKey : LPCTSTR;
             pszValueName : LPCTSTR;
           END {  33};
PTBSAVEPARAMS = ^TBSAVEPARAMS;
LPTBSAVEPARAMS = ^TBSAVEPARAMS;

TYPE _TC_HITTESTINFO = RECORD
                         pt : POINT;
                         flags : Word;
                       END {  TC_HITTESTINFO};
TC_HITTESTINFO   = _TC_HITTESTINFO;
TTC_HITTESTINFO  = _TC_HITTESTINFO;
PTC_HITTESTINFO  = ^_TC_HITTESTINFO;

TYPE _TC_ITEM = RECORD
                  mask : Word;
                  lpReserved1 : Word;
                  lpReserved2 : Word;
                  pszText : PTSTR;
                  cchTextMax : Integer;
                  iImage : Integer;
                  lParam : LPARAM32;
                END {  TC_ITEM};
TC_ITEM   = _TC_ITEM;
TTC_ITEM  = _TC_ITEM;
PTC_ITEM  = ^_TC_ITEM;

TYPE _TC_ITEMHEADER = RECORD
                        mask : Word;
                        lpReserved1 : Word;
                        lpReserved2 : Word;
                        pszText : PTSTR;
                        cchTextMax : Integer;
                        iImage : Integer;
                      END {  TC_ITEMHEADER};
TC_ITEMHEADER   = _TC_ITEMHEADER;
TTC_ITEMHEADER  = _TC_ITEMHEADER;
PTC_ITEMHEADER  = ^_TC_ITEMHEADER;

TYPE _TC_KEYDOWN = RECORD
                     hdr : NMHDR;
                     wVKey : Word;
                     flags : Word;
                   END {  TC_KEYDOWN};
TC_KEYDOWN   = _TC_KEYDOWN;
TTC_KEYDOWN  = _TC_KEYDOWN;
PTC_KEYDOWN  = ^_TC_KEYDOWN;

TYPE _textrange = RECORD
                    chrg : CHARRANGE;
                    lpstrText : PChar;
                  END {  textrange};
textrange   = _textrange;
Ttextrange  = _textrange;
Ptextrange  = ^_textrange;

TYPE _TIME_ZONE_INFORMATION = RECORD
                                Bias : LongInt;
                                TANDARDNAME : ARRAY [0..31] OF WCHAR;
                                StandardDate : SYSTEMTIME;
                                StandardBias : LongInt;
                                DAYLIGHTNAME : ARRAY [0..31] OF WCHAR;
                                DaylightDate : SYSTEMTIME;
                                DaylightBias : LongInt;
                              END {  TIME_ZONE_INFORMATION};
TYPE TIME_ZONE_INFORMATION   = _TIME_ZONE_INFORMATION;
TYPE TTIME_ZONE_INFORMATION  = _TIME_ZONE_INFORMATION;
TYPE PTIME_ZONE_INFORMATION  = ^_TIME_ZONE_INFORMATION;
TYPE LPTIME_ZONE_INFORMATION = ^_TIME_ZONE_INFORMATION;


TYPE tagTOGGLEKEYS = RECORD
                       cbSize : DWord;
                       dwFlags : DWord;
                     END {tagTOGGLEKEYS};
TOGGLEKEYS   = tagTOGGLEKEYS;
TTOGGLEKEYS  = tagTOGGLEKEYS;
PTOGGLEKEYS  = ^tagTOGGLEKEYS;

TYPE _TOKEN_SOURCE = RECORD
                       SourceName : ARRAY [0..7] OF Char;
                       SourceIdentifier : LUID;
                     END {  TOKEN_SOURCE};
TOKEN_SOURCE   = _TOKEN_SOURCE;
TTOKEN_SOURCE  = _TOKEN_SOURCE;
PTOKEN_SOURCE  = ^_TOKEN_SOURCE;

TYPE _TOKEN_CONTROL = RECORD
                        TokenId : LUID;
                        AuthenticationId : LUID;
                        ModifiedId : LUID;
                        TokenSource : TOKEN_SOURCE;
                      END {  TOKEN_CONTROL};
TOKEN_CONTROL   = _TOKEN_CONTROL;
TTOKEN_CONTROL  = _TOKEN_CONTROL;
PTOKEN_CONTROL  = ^_TOKEN_CONTROL;

TYPE _TOKEN_DEFAULT_DACL = RECORD
                             DefaultDacl : PACL;
                           END {  TOKEN_DEFAULT_DACL};
TOKEN_DEFAULT_DACL   = _TOKEN_DEFAULT_DACL;
TTOKEN_DEFAULT_DACL  = _TOKEN_DEFAULT_DACL;
PTOKEN_DEFAULT_DACL  = ^_TOKEN_DEFAULT_DACL;

TYPE _TOKEN_GROUPS = RECORD
                       GroupCount : DWord;
                       Groups : ARRAY [0..ANYSIZE_ARRAY - 1] OF SID_AND_ATTRIBUTES;
                     END {  TOKEN_GROUPS};
TOKEN_GROUPS   = _TOKEN_GROUPS;
TTOKEN_GROUPS  = _TOKEN_GROUPS;
PTOKEN_GROUPS  = ^_TOKEN_GROUPS;
LPTOKEN_GROUPS = ^_TOKEN_GROUPS;

TYPE _TOKEN_OWNER = RECORD
                      Owner : PSID;
                    END {  TOKEN_OWNER};
TOKEN_OWNER   = _TOKEN_OWNER;
TTOKEN_OWNER  = _TOKEN_OWNER;
PTOKEN_OWNER  = ^_TOKEN_OWNER;

TYPE _TOKEN_PRIMARY_GROUP = RECORD
                              PrimaryGroup : PSID;
                            END {  TOKEN_PRIMARY_GROUP};
TYPE TOKEN_PRIMARY_GROUP   = _TOKEN_PRIMARY_GROUP;
TYPE TTOKEN_PRIMARY_GROUP  = _TOKEN_PRIMARY_GROUP;
TYPE PTOKEN_PRIMARY_GROUP  = ^_TOKEN_PRIMARY_GROUP;

TYPE _TOKEN_PRIVILEGES = RECORD
                           PrivilegeCount : DWord;
                           Privileges : ARRAY [0..ANYSIZE_ARRAY - 1] OF LUID_AND_ATTRIBUTES;
                         END {  TOKEN_PRIVILEGES};
TYPE TOKEN_PRIVILEGES   = _TOKEN_PRIVILEGES;
TYPE TTOKEN_PRIVILEGES  = _TOKEN_PRIVILEGES;
TYPE PTOKEN_PRIVILEGES  = ^_TOKEN_PRIVILEGES;
TYPE LPTOKEN_PRIVILEGES = ^_TOKEN_PRIVILEGES;


TYPE _TOKEN_STATISTICS = RECORD
                           TokenId : LUID;
                           AuthenticationId : LUID;
                           ExpirationTime : LARGE_INTEGER;
                           TokenType : TOKEN_TYPE;
                           ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL;
                           DynamicCharged : DWord;
                           DynamicAvailable : DWord;
                           GroupCount : DWord;
                           PrivilegeCount : DWord;
                           ModifiedId : LUID;
                         END {  TOKEN_STATISTICS};
TYPE TOKEN_STATISTICS   = _TOKEN_STATISTICS;
TYPE TTOKEN_STATISTICS  = _TOKEN_STATISTICS;
TYPE PTOKEN_STATISTICS  = ^_TOKEN_STATISTICS;

TYPE _TOKEN_USER = RECORD
                     User : SID_AND_ATTRIBUTES;
                   END {  TOKEN_USER};
TOKEN_USER   = _TOKEN_USER;
TTOKEN_USER  = _TOKEN_USER;
PTOKEN_USER  = ^_TOKEN_USER;

TYPE TOOLINFO = RECORD
             cbSize,
             uFlags : Word32;
             hwnd : HWND;
             uId : Word32;
             rect : RECT;
             hinst : THANDLE;
             lpszText : PTSTR;
           END {TOOLINFO};
TTOOLINFO = TOOLINFO;
PTOOLINFO = ^TOOLINFO;
LPTOOLINFO = ^TOOLINFO;

TYPE TOOLTIPTEXT = RECORD
             hdr : NMHDR;
             lpszText : PTSTR;
             szText : ARRAY [0..79] OF Char;
             hinst : THANDLE;
             uFlags : Word;
           END {TOOLTIPTEXT};
PTOOLTIPTEXT = ^TOOLTIPTEXT;
LPTOOLTIPTEXT = ^TOOLTIPTEXT;

TYPE tagTPMPARAMS = RECORD
                      cbSize : Word;
                      rcExclude : RECT;
                    END {tagTPMPARAMS};
TYPE TPMPARAMS   = tagTPMPARAMS;
TYPE TTPMPARAMS  = tagTPMPARAMS;
TYPE PTPMPARAMS  = ^tagTPMPARAMS;
TYPE LPTPMPARAMS = ^tagTPMPARAMS;


TYPE _TRANSMIT_FILE_BUFFERS = RECORD
                                Head : Pointer;
                                HeadLength : DWord;
                                Tail : Pointer;
                                TailLength : DWord;
                              END {  TRANSMIT_FILE_BUFFERS};
TYPE TRANSMIT_FILE_BUFFERS   = _TRANSMIT_FILE_BUFFERS;
TYPE TTRANSMIT_FILE_BUFFERS  = _TRANSMIT_FILE_BUFFERS;
TYPE PTRANSMIT_FILE_BUFFERS  = ^_TRANSMIT_FILE_BUFFERS;

TYPE _TT_HITTESTINFO = RECORD
                         hwnd : HWND;
                         pt : POINT;
                         ti : TOOLINFO;
                       END {  TT_HITTESTINFO};
TT_HITTESTINFO   = _TT_HITTESTINFO;
TTT_HITTESTINFO  = _TT_HITTESTINFO;
PTT_HITTESTINFO  = ^_TT_HITTESTINFO;
LPTTHITTESTINFO = ^_TT_HITTESTINFO;


TYPE tagTTPOLYCURVE = RECORD
                        wType : Word;
                        cpfx : Word;
                        apfx : ARRAY [0..0] OF POINTFX;
                      END {tagTTPOLYCURVE};
TYPE TTPOLYCURVE   = tagTTPOLYCURVE;
TYPE TTTPOLYCURVE  = tagTTPOLYCURVE;
TYPE PTTPOLYCURVE  = ^tagTTPOLYCURVE;
TYPE LPTTPOLYCURVE = ^tagTTPOLYCURVE;

TYPE _TTPOLYGONHEADER = RECORD
                          cb : DWord;
                          dwType : DWord;
                          pfxStart : POINTFX;
                        END {  TTPOLYGONHEADER};
TYPE TTPOLYGONHEADER   = _TTPOLYGONHEADER;
TYPE TTTPOLYGONHEADER  = _TTPOLYGONHEADER;
TYPE PTTPOLYGONHEADER  = ^_TTPOLYGONHEADER;
TYPE LPTTPOLYGONHEADER = ^_TTPOLYGONHEADER;

TYPE _TV_DISPINFO = RECORD
                      hdr : NMHDR;
                      item : TV_ITEM;
                    END {  TV_DISPINFO};
TV_DISPINFO   = _TV_DISPINFO;
TTV_DISPINFO  = _TV_DISPINFO;
PTV_DISPINFO  = ^_TV_DISPINFO;

TYPE _TVHITTESTINFO = RECORD
                        pt : POINT;
                        flags : Word;
                        hItem : HTREEITEM;
                      END {  TVHITTESTINFO};
TYPE TV_HITTESTINFO   = _TVHITTESTINFO;
TYPE TTV_HITTESTINFO  = _TVHITTESTINFO;
TYPE PTV_HITTESTINFO  = ^_TVHITTESTINFO;
TYPE LPTV_HITTESTINFO = ^_TVHITTESTINFO;


TYPE _TV_INSERTSTRUCT = RECORD
                          hParent : HTREEITEM;
                          hInsertAfter : HTREEITEM;
                          item : TV_ITEM;
                        END {  TV_INSERTSTRUCT};
TYPE TV_INSERTSTRUCT   = _TV_INSERTSTRUCT;
TYPE TTV_INSERTSTRUCT  = _TV_INSERTSTRUCT;
TYPE PTV_INSERTSTRUCT  = ^_TV_INSERTSTRUCT;
TYPE LPTV_INSERTSTRUCT = ^_TV_INSERTSTRUCT;


TYPE _TV_KEYDOWN = RECORD
                     hdr : NMHDR;
                     wVKey : Word;
                     flags : Word;
                   END {  TV_KEYDOWN};
TV_KEYDOWN   = _TV_KEYDOWN;
TTV_KEYDOWN  = _TV_KEYDOWN;
PTV_KEYDOWN  = ^_TV_KEYDOWN;

TYPE _TV_SORTCB = RECORD
                    hParent : HTREEITEM;
                    lpfnCompare : PFNTVCOMPARE;
                    lParam : LPARAM32;
                  END {  TV_SORTCB};
TYPE TV_SORTCB   = _TV_SORTCB;
TYPE TTV_SORTCB  = _TV_SORTCB;
TYPE PTV_SORTCB  = ^_TV_SORTCB;
TYPE LPTV_SORTCB = ^_TV_SORTCB;


TYPE UDACCEL = RECORD
             nSec : Word;
             nInc : Word;
           END {  36};
PUDACCEL = ^UDACCEL;
LPUDACCEL = ^UDACCEL;

TYPE _ULARGE_INTEGER = RECORD
                         LowPart : DWord;
                         HighPart : DWord;
                       END {  ULARGE_INTEGER};
ULARGE_INTEGER   = _ULARGE_INTEGER;
TULARGE_INTEGER  = _ULARGE_INTEGER;
PULARGE_INTEGER  = ^_ULARGE_INTEGER;

TYPE _UNIVERSAL_NAME_INFO = RECORD
                              lpUniversalName : PTSTR;
                            END {  UNIVERSAL_NAME_INFO};
UNIVERSAL_NAME_INFO   = _UNIVERSAL_NAME_INFO;
TUNIVERSAL_NAME_INFO  = _UNIVERSAL_NAME_INFO;
PUNIVERSAL_NAME_INFO  = ^_UNIVERSAL_NAME_INFO;

TYPE tagUSEROBJECTFLAGS = RECORD
                            fInherit : WINBOOL;
                            fReserved : WINBOOL;
                            dwFlags : DWord;
                          END {tagUSEROBJECTFLAGS};
USEROBJECTFLAGS   = tagUSEROBJECTFLAGS;
TUSEROBJECTFLAGS  = tagUSEROBJECTFLAGS;
PUSEROBJECTFLAGS  = ^tagUSEROBJECTFLAGS;

TYPE value_ent = RECORD
                   ve_valuename : PTSTR;
                   ve_valuelen : DWord;
                   ve_valueptr : DWord;
                   ve_type : DWord;
                 END {value_ent};
VALENT = value_ent;
PVALENT = ^value_ent;

TYPE _VERIFY_INFORMATION = RECORD
                             StartingOffset : LARGE_INTEGER;
                             Length : DWord;
                           END {  VERIFY_INFORMATION};
VERIFY_INFORMATION   = _VERIFY_INFORMATION;
TVERIFY_INFORMATION  = _VERIFY_INFORMATION;
PVERIFY_INFORMATION  = ^_VERIFY_INFORMATION;

TYPE _VS_FIXEDFILEINFO = RECORD
                           dwSignature : DWord;
                           dwStrucVersion : DWord;
                           dwFileVersionMS : DWord;
                           dwFileVersionLS : DWord;
                           dwProductVersionMS : DWord;
                           dwProductVersionLS : DWord;
                           dwFileFlagsMask : DWord;
                           dwFileFlags : DWord;
                           dwFileOS : DWord;
                           dwFileType : DWord;
                           dwFileSubtype : DWord;
                           dwFileDateMS : DWord;
                           dwFileDateLS : DWord;
                         END {  VS_FIXEDFILEINFO};
VS_FIXEDFILEINFO   = _VS_FIXEDFILEINFO;
TVS_FIXEDFILEINFO  = _VS_FIXEDFILEINFO;
PVS_FIXEDFILEINFO  = ^_VS_FIXEDFILEINFO;

TYPE _WIN32_FIND_DATA = RECORD
                          dwFileAttributes : DWord;
                          ftCreationTime : FILETIME;
                          ftLastAccessTime : FILETIME;
                          ftLastWriteTime : FILETIME;
                          nFileSizeHigh : DWord;
                          nFileSizeLow : DWord;
                          dwReserved0 : DWord;
                          dwReserved1 : DWord;
                          CFILENAME : ARRAY [0..MAX_PATH - 1] OF TCHAR;
                          CALTERNATEFILENAME : ARRAY [0..13] OF TCHAR;
                        END {  WIN32_FIND_DATA};
WIN32_FIND_DATA   = _WIN32_FIND_DATA;
TWIN32_FIND_DATA  = _WIN32_FIND_DATA;
TWIN32FINDDATA    = _WIN32_FIND_DATA;
PWIN32_FIND_DATA  = ^_WIN32_FIND_DATA;
LPWIN32_FIND_DATA = ^_WIN32_FIND_DATA;


TYPE _WIN32_STREAM_ID = RECORD
                          dwStreamId : DWord;
                          dwStreamAttributes : DWord;
                          Size : LARGE_INTEGER;
                          dwStreamNameSize : DWord;
                          CSTREAMNAME : PWCHAR;
                        END {  WIN32_STREAM_ID};
WIN32_STREAM_ID   = _WIN32_STREAM_ID;
TWIN32_STREAM_ID  = _WIN32_STREAM_ID;
PWIN32_STREAM_ID  = ^_WIN32_STREAM_ID;

TYPE _WINDOWPLACEMENT = RECORD
                          length : Word;
                          flags : Word;
                          showCmd : Word;
                          ptMinPosition : POINT;
                          ptMaxPosition : POINT;
                          rcNormalPosition : RECT;
                        END {  WINDOWPLACEMENT};
WINDOWPLACEMENT   = _WINDOWPLACEMENT;
TWINDOWPLACEMENT  = _WINDOWPLACEMENT;
PWINDOWPLACEMENT  = ^_WINDOWPLACEMENT;
LPWINDOWPLACEMENT = ^_WINDOWPLACEMENT;

TYPE _WNDCLASS = RECORD
                   style : Integer;
                   lpfnWndProc : TFNWndProc{WNDPROC};
                   cbClsExtra : Integer;
                   cbWndExtra : Integer;
                   hInstance : THANDLE;
                   hIcon : THandle;
                   hCursor : THandle;
                   hbrBackground : HBRUSH;
                   lpszMenuName : LPCTSTR;
                   lpszClassName : LPCTSTR;
                 END {  WNDCLASS};
WNDCLASS   = _WNDCLASS;
TWNDCLASS  = _WNDCLASS;
PWNDCLASS  = ^_WNDCLASS;
LPWNDCLASS = ^_WNDCLASS;

TYPE _WNDCLASSEX = RECORD
                     cbSize : UINT;
                     style : UINT;
                     lpfnWndProc : TFNWndProc{WNDPROC};
                     cbClsExtra : Integer;
                     cbWndExtra : Integer;
                     hInstance : THandle;
                     hIcon : HICON;
                     hCursor : HCURSOR;
                     hbrBackground : HBRUSH;
                     lpszMenuName : LPCTSTR;
                     lpszClassName : LPCTSTR;
                     hIconSm : HICON;
                   END {  WNDCLASSEX};
WNDCLASSEX   = _WNDCLASSEX;
TWNDCLASSEX  = _WNDCLASSEX;
PWNDCLASSEX  = ^_WNDCLASSEX;
LPWNDCLASSEX = ^_WNDCLASSEX;


TYPE _CONNECTDLGSTRUCT = RECORD
                           cbStructure : DWord;
                           hwndOwner : HWND;
                           lpConnRes : PNETRESOURCE;
                           dwFlags : DWord;
                           dwDevNum : DWord;
                         END {  CONNECTDLGSTRUCT};
CONNECTDLGSTRUCT   = _CONNECTDLGSTRUCT;
TCONNECTDLGSTRUCT  = _CONNECTDLGSTRUCT;
PCONNECTDLGSTRUCT  = ^_CONNECTDLGSTRUCT;
LPCONNECTDLGSTRUCT = ^_CONNECTDLGSTRUCT;


TYPE _DISCDLGSTRUCT = RECORD
                        cbStructure : DWord;
                        hwndOwner : HWND;
                        lpLocalName : PTSTR;
                        lpRemoteName : PTSTR;
                        dwFlags : DWord;
                      END {  DISCDLGSTRUCT};
DISCDLGSTRUCT   = _DISCDLGSTRUCT;
TDISCDLGSTRUCT  = _DISCDLGSTRUCT;
PDISCDLGSTRUCT  = ^_DISCDLGSTRUCT;
LPDISCDLGSTRUCT = ^_DISCDLGSTRUCT;


TYPE _NETINFOSTRUCT = RECORD
                        cbStructure : DWord;
                        dwProviderVersion : DWord;
                        dwStatus : DWord;
                        dwCharacteristics : DWord;
                        dwHandle : DWord;
                        wNetType : Word;
                        dwPrinters : DWord;
                        dwDrives : DWord;
                      END {  NETINFOSTRUCT};
NETINFOSTRUCT   = _NETINFOSTRUCT;
TNETINFOSTRUCT  = _NETINFOSTRUCT;
PNETINFOSTRUCT  = ^_NETINFOSTRUCT;
LPNETINFOSTRUCT = ^_NETINFOSTRUCT;


TYPE _NETCONNECTINFOSTRUCT = RECORD
                               cbStructure : DWord;
                               dwFlags : DWord;
                               dwSpeed : DWord;
                               dwDelay : DWord;
                               dwOptDataSize : DWord;
                             END {  NETCONNECTINFOSTRUCT};
NETCONNECTINFOSTRUCT   = _NETCONNECTINFOSTRUCT;
TNETCONNECTINFOSTRUCT  = _NETCONNECTINFOSTRUCT;
PNETCONNECTINFOSTRUCT  = ^_NETCONNECTINFOSTRUCT;
LPNETCONNECTINFOSTRUCT = ^_NETCONNECTINFOSTRUCT;

TYPE
ENUMMETAFILEPROC = FUNCTION ( DC : HDC; H : HANDLETABLE; M : METARECORD; I : Integer; L : LPARAM32 ) : Integer;
ENHMETAFILEPROC = FUNCTION ( DC : HDC; H : HANDLETABLE; E : ENHMETARECORD; I : Integer; L : LPARAM32 ) : Integer;
ENUMFONTSPROC = FUNCTION ( FONT : LPLOGFONT; MET : LPTEXTMETRIC; D : DWORD; L : LPARAM32 ) : Integer;
FONTENUMPROC = FUNCTION ( VAR Font : ENUMLOGFONT; VAR Met : NEWTEXTMETRIC; I : Integer; L : LPARAM32 ) : Integer;
FONTENUMEXPROC = FUNCTION ( VAR Font : ENUMLOGFONTEX; VAR Met : NEWTEXTMETRICEX; I : Integer; L : LPARAM32 ) : Integer;
LPOVERLAPPED_COMPLETION_ROUTINE = PROCEDURE ( D : DWORD; D2 : DWORD; LP : LPOVERLAPPED );
POVERLAPPED_COMPLETION_ROUTINE = TFarProc;

{+// }
{-Structures for the extensions to OpenGL }
{= }

TYPE _POINTFLOAT = RECORD
                     x : Single;
                     y : Single;
                   END {  POINTFLOAT};
POINTFLOAT   = _POINTFLOAT;
TPOINTFLOAT  = _POINTFLOAT;
PPOINTFLOAT  = ^_POINTFLOAT;

TYPE _GLYPHMETRICSFLOAT = RECORD
                            gmfBlackBoxX : Single;
                            gmfBlackBoxY : Single;
                            gmfptGlyphOrigin : POINTFLOAT;
                            gmfCellIncX : Single;
                            gmfCellIncY : Single;
                          END {  GLYPHMETRICSFLOAT};
GLYPHMETRICSFLOAT   = _GLYPHMETRICSFLOAT;
TGLYPHMETRICSFLOAT  = _GLYPHMETRICSFLOAT;
PGLYPHMETRICSFLOAT  = ^_GLYPHMETRICSFLOAT;
LPGLYPHMETRICSFLOAT = ^_GLYPHMETRICSFLOAT;


TYPE tagLAYERPLANEDESCRIPTOR = RECORD
                                 nSize : Word;
                                 nVersion : Word;
                                 dwFlags : DWord;
                                 iPixelType : BYTE;
                                 cColorBits : BYTE;
                                 cRedBits : BYTE;
                                 cRedShift : BYTE;
                                 cGreenBits : BYTE;
                                 cGreenShift : BYTE;
                                 cBlueBits : BYTE;
                                 cBlueShift : BYTE;
                                 cAlphaBits : BYTE;
                                 cAlphaShift : BYTE;
                                 cAccumBits : BYTE;
                                 cAccumRedBits : BYTE;
                                 cAccumGreenBits : BYTE;
                                 cAccumBlueBits : BYTE;
                                 cAccumAlphaBits : BYTE;
                                 cDepthBits : BYTE;
                                 cStencilBits : BYTE;
                                 cAuxBuffers : BYTE;
                                 iLayerPlane : BYTE;
                                 bReserved : BYTE;
                                 crTransparent : TColorRef;
                               END {tagLAYERPLANEDESCRIPTOR};
LAYERPLANEDESCRIPTOR   = tagLAYERPLANEDESCRIPTOR;
TLAYERPLANEDESCRIPTOR  = tagLAYERPLANEDESCRIPTOR;
PLAYERPLANEDESCRIPTOR  = ^tagLAYERPLANEDESCRIPTOR;
LPLAYERPLANEDESCRIPTOR = ^tagLAYERPLANEDESCRIPTOR;


TYPE tagPIXELFORMATDESCRIPTOR = RECORD
                                  nSize : Word;
                                  nVersion : Word;
                                  dwFlags : DWord;
                                  iPixelType : BYTE;
                                  cColorBits : BYTE;
                                  cRedBits : BYTE;
                                  cRedShift : BYTE;
                                  cGreenBits : BYTE;
                                  cGreenShift : BYTE;
                                  cBlueBits : BYTE;
                                  cBlueShift : BYTE;
                                  cAlphaBits : BYTE;
                                  cAlphaShift : BYTE;
                                  cAccumBits : BYTE;
                                  cAccumRedBits : BYTE;
                                  cAccumGreenBits : BYTE;
                                  cAccumBlueBits : BYTE;
                                  cAccumAlphaBits : BYTE;
                                  cDepthBits : BYTE;
                                  cStencilBits : BYTE;
                                  cAuxBuffers : BYTE;
                                  iLayerType : BYTE;
                                  bReserved : BYTE;
                                  dwLayerMask : DWord;
                                  dwVisibleMask : DWord;
                                  dwDamageMask : DWord;
                                END {tagPIXELFORMATDESCRIPTOR};
PIXELFORMATDESCRIPTOR   = tagPIXELFORMATDESCRIPTOR;
TPIXELFORMATDESCRIPTOR  = tagPIXELFORMATDESCRIPTOR;
PPIXELFORMATDESCRIPTOR  = ^tagPIXELFORMATDESCRIPTOR;
LPPIXELFORMATDESCRIPTOR = ^tagPIXELFORMATDESCRIPTOR;


USER_INFO_2 = RECORD
             usri2_name : LPWSTR;
             usri2_password : LPWSTR;
             usri2_password_age : DWord;
             usri2_priv : DWord;
             usri2_home_dir : LPWSTR;
             usri2_comment : LPWSTR;
             usri2_flags : DWord;
             usri2_script_path : LPWSTR;
             usri2_auth_flags : DWord;
             usri2_full_name : LPWSTR;
             usri2_usr_comment : LPWSTR;
             usri2_parms : LPWSTR;
             usri2_workstations : LPWSTR;
             usri2_last_logon : DWord;
             usri2_last_logoff : DWord;
             usri2_acct_expires : DWord;
             usri2_max_storage : DWord;
             usri2_units_per_week : DWord;
             usri2_logon_hours : PBYTE;
             usri2_bad_pw_count : DWord;
             usri2_num_logons : DWord;
             usri2_logon_server : LPWSTR;
             usri2_country_code : DWord;
             usri2_code_page : DWord;
           END {USER_INFO_2};
PUSER_INFO_2 = ^USER_INFO_2;
LPUSER_INFO_2 = PUSER_INFO_2;

USER_INFO_0 = RECORD
             usri0_name : LPWSTR;
           END {USER_INFO_0};
PUSER_INFO_0 = ^USER_INFO_0;
LPUSER_INFO_0 = PUSER_INFO_0;

USER_INFO_3 = RECORD
             usri3_name : LPWSTR;
             usri3_password : LPWSTR;
             usri3_password_age : DWord;
             usri3_priv : DWord;
             usri3_home_dir : LPWSTR;
             usri3_comment : LPWSTR;
             usri3_flags : DWord;
             usri3_script_path : LPWSTR;
             usri3_auth_flags : DWord;
             usri3_full_name : LPWSTR;
             usri3_usr_comment : LPWSTR;
             usri3_parms : LPWSTR;
             usri3_workstations : LPWSTR;
             usri3_last_logon : DWord;
             usri3_last_logoff : DWord;
             usri3_acct_expires : DWord;
             usri3_max_storage : DWord;
             usri3_units_per_week : DWord;
             usri3_logon_hours : PBYTE;
             usri3_bad_pw_count : DWord;
             usri3_num_logons : DWord;
             usri3_logon_server : LPWSTR;
             usri3_country_code : DWord;
             usri3_code_page : DWord;
             usri3_user_id : DWord;
             usri3_primary_group_id : DWord;
             usri3_profile : LPWSTR;
             usri3_home_dir_drive : LPWSTR;
             usri3_password_expired : DWord;
           END {USER_INFO_3};
PUSER_INFO_3 = ^USER_INFO_3;
LPUSER_INFO_3 = PUSER_INFO_3;

GROUP_INFO_2 = RECORD
             grpi2_name : LPWSTR;
             grpi2_comment : LPWSTR;
             grpi2_group_id : DWord;
             grpi2_attributes : DWord;
           END {GROUP_INFO_2};
PGROUP_INFO_2 = ^GROUP_INFO_2;

LOCALGROUP_INFO_0 = RECORD
             lgrpi0_name : LPWSTR;
           END {LOCALGROUP_INFO_0};
PLOCALGROUP_INFO_0 = ^LOCALGROUP_INFO_0;
LPLOCALGROUP_INFO_0 = PLOCALGROUP_INFO_0;


{///////////////////////////////////////}
CONST
  _MOUSE_EVENT = 2;
CONST
  MOUSE_WHEELED = 4;

     {$i moretype.inc}


{///////////////////////////////////////}

{$ifndef Windows_Inc}  // * * * * * *
{$ifdef IS_UNIT}
IMPLEMENTATION
END.
{$endif}{IS_UNIT}
{$endif Windows_Inc}  // * * * * * *

{$endif} {WINTYPES_PAS}

